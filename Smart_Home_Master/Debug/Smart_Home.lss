
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004f68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000017c  00800060  00004f68  00004ffc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008001dc  008001dc  00005178  2**0
                  ALLOC
  3 .stab         0000468c  00000000  00000000  00005178  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015db  00000000  00000000  00009804  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000addf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000af3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000b0ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000d113  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000e214  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000f198  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000f318  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000f5da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000fe68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	ff e4       	ldi	r31, 0x4F	; 79
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3d       	cpi	r26, 0xDC	; 220
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ed       	ldi	r26, 0xDC	; 220
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3d       	cpi	r26, 0xDE	; 222
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 90 17 	call	0x2f20	; 0x2f20 <main>
      8a:	0c 94 b2 27 	jmp	0x4f64	; 0x4f64 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ad 24 	jmp	0x495a	; 0x495a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 ec       	ldi	r26, 0xC1	; 193
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c9 24 	jmp	0x4992	; 0x4992 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d5 24 	jmp	0x49aa	; 0x49aa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d5 24 	jmp	0x49aa	; 0x49aa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ad 24 	jmp	0x495a	; 0x495a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 ec       	ldi	r24, 0xC1	; 193
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c9 24 	jmp	0x4992	; 0x4992 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b5 24 	jmp	0x496a	; 0x496a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 ec       	ldi	r22, 0xC1	; 193
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d1 24 	jmp	0x49a2	; 0x49a2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 d5 24 	jmp	0x49aa	; 0x49aa <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 d5 24 	jmp	0x49aa	; 0x49aa <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 d5 24 	jmp	0x49aa	; 0x49aa <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 bd 24 	jmp	0x497a	; 0x497a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 d9 24 	jmp	0x49b2	; 0x49b2 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <SPI_voidInit>:
#include "../../LIB/data_types.h"
#include "SPI.h"
#include "../../MCAL/DIO/DIO.h"

 void SPI_voidInit(void)
 {
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	 #if SPI_MODE == SPI_MASTER_MODE
	 
	 SET_BIT(SPCR,MSTR);
     ca6:	ad e2       	ldi	r26, 0x2D	; 45
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	ed e2       	ldi	r30, 0x2D	; 45
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 61       	ori	r24, 0x10	; 16
     cb2:	8c 93       	st	X, r24
	 DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN5,DIO_OUTPUT);
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	65 e0       	ldi	r22, 0x05	; 5
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <DIO_voidSetPinDirection>
	 DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN7,DIO_OUTPUT);
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	67 e0       	ldi	r22, 0x07	; 7
     cc2:	41 e0       	ldi	r20, 0x01	; 1
     cc4:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <DIO_voidSetPinDirection>
	 DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN4,DIO_OUTPUT);
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	64 e0       	ldi	r22, 0x04	; 4
     ccc:	41 e0       	ldi	r20, 0x01	; 1
     cce:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <DIO_voidSetPinDirection>
	 DIO_voidSetPinvalue(DIO_PORTB,DIO_PIN4,DIO_LOW);
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	64 e0       	ldi	r22, 0x04	; 4
     cd6:	40 e0       	ldi	r20, 0x00	; 0
     cd8:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_voidSetPinvalue>
	 
	 DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN6,DIO_OUTPUT);
	 CLEAR_BIT(SPCR,MSTR);
	 #endif
	 //data order
	 SET_BIT(SPCR,DORD);
     cdc:	ad e2       	ldi	r26, 0x2D	; 45
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	ed e2       	ldi	r30, 0x2D	; 45
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	80 62       	ori	r24, 0x20	; 32
     ce8:	8c 93       	st	X, r24
	 //clk polarty
	 CLEAR_BIT(SPCR,CPOL);
     cea:	ad e2       	ldi	r26, 0x2D	; 45
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	ed e2       	ldi	r30, 0x2D	; 45
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	87 7f       	andi	r24, 0xF7	; 247
     cf6:	8c 93       	st	X, r24
	 //clk phase
	 SET_BIT(SPCR,CPHA);
     cf8:	ad e2       	ldi	r26, 0x2D	; 45
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	ed e2       	ldi	r30, 0x2D	; 45
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	84 60       	ori	r24, 0x04	; 4
     d04:	8c 93       	st	X, r24
	 //set prescaler 
	 SET_BIT(SPCR,SPR0);
     d06:	ad e2       	ldi	r26, 0x2D	; 45
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	ed e2       	ldi	r30, 0x2D	; 45
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	81 60       	ori	r24, 0x01	; 1
     d12:	8c 93       	st	X, r24
	 SET_BIT(SPCR,SPR1);
     d14:	ad e2       	ldi	r26, 0x2D	; 45
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	ed e2       	ldi	r30, 0x2D	; 45
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	82 60       	ori	r24, 0x02	; 2
     d20:	8c 93       	st	X, r24
	 CLEAR_BIT(SPSR,SPI2X);
     d22:	ae e2       	ldi	r26, 0x2E	; 46
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	ee e2       	ldi	r30, 0x2E	; 46
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	8e 7f       	andi	r24, 0xFE	; 254
     d2e:	8c 93       	st	X, r24
	 //spi enable
	 SET_BIT(SPCR,SPE);
     d30:	ad e2       	ldi	r26, 0x2D	; 45
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	ed e2       	ldi	r30, 0x2D	; 45
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	80 64       	ori	r24, 0x40	; 64
     d3c:	8c 93       	st	X, r24
 }
     d3e:	cf 91       	pop	r28
     d40:	df 91       	pop	r29
     d42:	08 95       	ret

00000d44 <SPI_u8Tranceive>:
 u8 SPI_u8Tranceive(u8 Copy_u8Data)
 {
     d44:	df 93       	push	r29
     d46:	cf 93       	push	r28
     d48:	0f 92       	push	r0
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	89 83       	std	Y+1, r24	; 0x01
	 SPDR = Copy_u8Data;
     d50:	ef e2       	ldi	r30, 0x2F	; 47
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	80 83       	st	Z, r24
	 
	 while(READ_BIT(SPSR,SPIF)==0);
     d58:	ee e2       	ldi	r30, 0x2E	; 46
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	88 23       	and	r24, r24
     d60:	dc f7       	brge	.-10     	; 0xd58 <SPI_u8Tranceive+0x14>
	 
	 return SPDR;
     d62:	ef e2       	ldi	r30, 0x2F	; 47
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
	 
 }
     d68:	0f 90       	pop	r0
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <I2C_voidMasterInit>:
#include "../../LIB/data_types.h"
#include "I2C.h"
#include "../../MCAL/DIO/DIO.h"

void I2C_voidMasterInit(void)
{
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
	//TWSR = 00 Select Prescaler
	CLEAR_BIT(TWSR,TWPS0);
     d78:	a1 e2       	ldi	r26, 0x21	; 33
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e1 e2       	ldi	r30, 0x21	; 33
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	8e 7f       	andi	r24, 0xFE	; 254
     d84:	8c 93       	st	X, r24
	CLEAR_BIT(TWSR,TWPS1);
     d86:	a1 e2       	ldi	r26, 0x21	; 33
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	e1 e2       	ldi	r30, 0x21	; 33
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	8d 7f       	andi	r24, 0xFD	; 253
     d92:	8c 93       	st	X, r24
	//TWBR = 12
	TWBR = 12;
     d94:	e0 e2       	ldi	r30, 0x20	; 32
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	8c e0       	ldi	r24, 0x0C	; 12
     d9a:	80 83       	st	Z, r24
	//Enable Ack
	SET_BIT(TWCR,TWEA);
     d9c:	a6 e5       	ldi	r26, 0x56	; 86
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e6 e5       	ldi	r30, 0x56	; 86
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	80 64       	ori	r24, 0x40	; 64
     da8:	8c 93       	st	X, r24
	//Enable I2C
	SET_BIT(TWCR,TWEN);
     daa:	a6 e5       	ldi	r26, 0x56	; 86
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e6 e5       	ldi	r30, 0x56	; 86
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	84 60       	ori	r24, 0x04	; 4
     db6:	8c 93       	st	X, r24
	
}
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <I2C_voidSlaveInit>:
void I2C_voidSlaveInit(u8 Copy_u8SlaveAddress)
{
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	0f 92       	push	r0
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
     dc8:	89 83       	std	Y+1, r24	; 0x01
	//Set Slave Address at TWAR
	TWAR = (Copy_u8SlaveAddress << 1);
     dca:	e2 e2       	ldi	r30, 0x22	; 34
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	88 0f       	add	r24, r24
     dd2:	80 83       	st	Z, r24
	//Enable Ack
	SET_BIT(TWCR,TWEA);
     dd4:	a6 e5       	ldi	r26, 0x56	; 86
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	e6 e5       	ldi	r30, 0x56	; 86
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	80 64       	ori	r24, 0x40	; 64
     de0:	8c 93       	st	X, r24
	//Enable I2C
	SET_BIT(TWCR,TWEN);
     de2:	a6 e5       	ldi	r26, 0x56	; 86
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e6 e5       	ldi	r30, 0x56	; 86
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	84 60       	ori	r24, 0x04	; 4
     dee:	8c 93       	st	X, r24
}
     df0:	0f 90       	pop	r0
     df2:	cf 91       	pop	r28
     df4:	df 91       	pop	r29
     df6:	08 95       	ret

00000df8 <I2C_voidStartCondition>:

void I2C_voidStartCondition(void)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	//enable start condition
	SET_BIT(TWCR,TWSTA);
     e00:	a6 e5       	ldi	r26, 0x56	; 86
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	e6 e5       	ldi	r30, 0x56	; 86
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	80 62       	ori	r24, 0x20	; 32
     e0c:	8c 93       	st	X, r24
	//clear flag
	SET_BIT(TWCR,TWINT);
     e0e:	a6 e5       	ldi	r26, 0x56	; 86
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e6 e5       	ldi	r30, 0x56	; 86
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	80 68       	ori	r24, 0x80	; 128
     e1a:	8c 93       	st	X, r24
	//Wait the start to end
	while((READ_BIT(TWCR,TWINT))==0);
     e1c:	e6 e5       	ldi	r30, 0x56	; 86
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	88 23       	and	r24, r24
     e24:	dc f7       	brge	.-10     	; 0xe1c <I2C_voidStartCondition+0x24>
	//Should check for Ack but simulation doesnt work with it
	//While((Twsr&0b11111000) != 0x08)  0x08 -->from data sheet
	
}
     e26:	cf 91       	pop	r28
     e28:	df 91       	pop	r29
     e2a:	08 95       	ret

00000e2c <I2C_voidStopCondition>:
void I2C_voidStopCondition(void)
{
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
	//enable stop condition
	SET_BIT(TWCR,TWSTO);
     e34:	a6 e5       	ldi	r26, 0x56	; 86
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e6 e5       	ldi	r30, 0x56	; 86
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	80 61       	ori	r24, 0x10	; 16
     e40:	8c 93       	st	X, r24
	//clear flag
	SET_BIT(TWCR,TWINT);
     e42:	a6 e5       	ldi	r26, 0x56	; 86
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e6 e5       	ldi	r30, 0x56	; 86
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	80 68       	ori	r24, 0x80	; 128
     e4e:	8c 93       	st	X, r24
	
	
}
     e50:	cf 91       	pop	r28
     e52:	df 91       	pop	r29
     e54:	08 95       	ret

00000e56 <I2C_voidMasterSendAddressWrite>:

void I2C_voidMasterSendAddressWrite(u8 Copy_u8SlaveAddress)
{
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	0f 92       	push	r0
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	89 83       	std	Y+1, r24	; 0x01
	//select address
	TWDR = Copy_u8SlaveAddress<<1;
     e62:	e3 e2       	ldi	r30, 0x23	; 35
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	88 0f       	add	r24, r24
     e6a:	80 83       	st	Z, r24
	//select write operation
	CLEAR_BIT(TWDR,TWD0);
     e6c:	a3 e2       	ldi	r26, 0x23	; 35
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e3 e2       	ldi	r30, 0x23	; 35
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	8e 7f       	andi	r24, 0xFE	; 254
     e78:	8c 93       	st	X, r24
	//Disable start start condition
	CLEAR_BIT(TWCR,TWSTA);
     e7a:	a6 e5       	ldi	r26, 0x56	; 86
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e6 e5       	ldi	r30, 0x56	; 86
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	8f 7d       	andi	r24, 0xDF	; 223
     e86:	8c 93       	st	X, r24
	//Clear inturrebt falg
	SET_BIT(TWCR,TWINT);
     e88:	a6 e5       	ldi	r26, 0x56	; 86
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e6 e5       	ldi	r30, 0x56	; 86
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	80 68       	ori	r24, 0x80	; 128
     e94:	8c 93       	st	X, r24
	//Wait the start to end
	while((READ_BIT(TWCR,TWINT))==0);
     e96:	e6 e5       	ldi	r30, 0x56	; 86
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	88 23       	and	r24, r24
     e9e:	dc f7       	brge	.-10     	; 0xe96 <I2C_voidMasterSendAddressWrite+0x40>
	//Check ack
}
     ea0:	0f 90       	pop	r0
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	08 95       	ret

00000ea8 <I2C_voidMasterSendAddressRead>:
void I2C_voidMasterSendAddressRead(u8 Copy_u8SlaveAddress)
{
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	0f 92       	push	r0
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	89 83       	std	Y+1, r24	; 0x01
	//select address
	TWDR = Copy_u8SlaveAddress<<1;
     eb4:	e3 e2       	ldi	r30, 0x23	; 35
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	88 0f       	add	r24, r24
     ebc:	80 83       	st	Z, r24
	//select Read operation
	SET_BIT(TWDR,TWD0);
     ebe:	a3 e2       	ldi	r26, 0x23	; 35
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e3 e2       	ldi	r30, 0x23	; 35
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	81 60       	ori	r24, 0x01	; 1
     eca:	8c 93       	st	X, r24
	//Disable start start condition
	CLEAR_BIT(TWCR,TWSTA);
     ecc:	a6 e5       	ldi	r26, 0x56	; 86
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e6 e5       	ldi	r30, 0x56	; 86
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	8f 7d       	andi	r24, 0xDF	; 223
     ed8:	8c 93       	st	X, r24
	//Clear inturrebt falg
	SET_BIT(TWCR,TWINT);
     eda:	a6 e5       	ldi	r26, 0x56	; 86
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e6 e5       	ldi	r30, 0x56	; 86
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	80 68       	ori	r24, 0x80	; 128
     ee6:	8c 93       	st	X, r24
	//Wait the start to end
	while((READ_BIT(TWCR,TWINT))==0);
     ee8:	e6 e5       	ldi	r30, 0x56	; 86
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	88 23       	and	r24, r24
     ef0:	dc f7       	brge	.-10     	; 0xee8 <I2C_voidMasterSendAddressRead+0x40>
	//Check ack
}
     ef2:	0f 90       	pop	r0
     ef4:	cf 91       	pop	r28
     ef6:	df 91       	pop	r29
     ef8:	08 95       	ret

00000efa <I2C_voidMasterSendData>:

void I2C_voidMasterSendData(u8 Copy_u8Data)
{
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	0f 92       	push	r0
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
     f04:	89 83       	std	Y+1, r24	; 0x01
	//write data in data reg
	TWDR = Copy_u8Data;
     f06:	e3 e2       	ldi	r30, 0x23	; 35
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	80 83       	st	Z, r24
	//Clear inturrebt falg
	SET_BIT(TWCR,TWINT);
     f0e:	a6 e5       	ldi	r26, 0x56	; 86
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e6 e5       	ldi	r30, 0x56	; 86
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	80 68       	ori	r24, 0x80	; 128
     f1a:	8c 93       	st	X, r24
	//Wait the start to end
	while((READ_BIT(TWCR,TWINT))==0);
     f1c:	e6 e5       	ldi	r30, 0x56	; 86
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	88 23       	and	r24, r24
     f24:	dc f7       	brge	.-10     	; 0xf1c <I2C_voidMasterSendData+0x22>
	//Check ack
}
     f26:	0f 90       	pop	r0
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <I2C_u8MasterReadData>:

u8 I2C_u8MasterReadData(void)
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
	//Clear inturrebt falg
	SET_BIT(TWCR,TWINT);
     f36:	a6 e5       	ldi	r26, 0x56	; 86
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e6 e5       	ldi	r30, 0x56	; 86
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	80 68       	ori	r24, 0x80	; 128
     f42:	8c 93       	st	X, r24
	//Wait the start to end
	while((READ_BIT(TWCR,TWINT))==0);
     f44:	e6 e5       	ldi	r30, 0x56	; 86
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	88 23       	and	r24, r24
     f4c:	dc f7       	brge	.-10     	; 0xf44 <I2C_u8MasterReadData+0x16>
	//return data
	return TWDR;
     f4e:	e3 e2       	ldi	r30, 0x23	; 35
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
}
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	08 95       	ret

00000f5a <I2C_u8SlaveReadData>:

u8 I2C_u8SlaveReadData(void)
{
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
	//wait to receive slave address
	while((TWSR&0xF8) != 0x60);
     f62:	e1 e2       	ldi	r30, 0x21	; 33
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	88 2f       	mov	r24, r24
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	88 7f       	andi	r24, 0xF8	; 248
     f6e:	90 70       	andi	r25, 0x00	; 0
     f70:	80 36       	cpi	r24, 0x60	; 96
     f72:	91 05       	cpc	r25, r1
     f74:	b1 f7       	brne	.-20     	; 0xf62 <I2C_u8SlaveReadData+0x8>
	//Clear inturrebt falg
	SET_BIT(TWCR,TWINT);
     f76:	a6 e5       	ldi	r26, 0x56	; 86
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e6 e5       	ldi	r30, 0x56	; 86
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	80 68       	ori	r24, 0x80	; 128
     f82:	8c 93       	st	X, r24
	//Wait to receive data
	while((TWSR&0xF8) != 0x80);
     f84:	e1 e2       	ldi	r30, 0x21	; 33
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	88 2f       	mov	r24, r24
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	88 7f       	andi	r24, 0xF8	; 248
     f90:	90 70       	andi	r25, 0x00	; 0
     f92:	80 38       	cpi	r24, 0x80	; 128
     f94:	91 05       	cpc	r25, r1
     f96:	b1 f7       	brne	.-20     	; 0xf84 <I2C_u8SlaveReadData+0x2a>
	//return data
	return TWDR;
     f98:	e3 e2       	ldi	r30, 0x23	; 35
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
}
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <DIO_voidSetPinDirection>:
#include "../../LIB/Bit_math.h"
#include "../../LIB/data_types.h"
#include "../../MCAL/DIO/DIO.h"

 void DIO_voidSetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Direction)
 {
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	27 97       	sbiw	r28, 0x07	; 7
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	de bf       	out	0x3e, r29	; 62
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	cd bf       	out	0x3d, r28	; 61
     fb8:	89 83       	std	Y+1, r24	; 0x01
     fba:	6a 83       	std	Y+2, r22	; 0x02
     fbc:	4b 83       	std	Y+3, r20	; 0x03
		 
	 if(Copy_u8Direction == DIO_OUTPUT)
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	81 30       	cpi	r24, 0x01	; 1
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <DIO_voidSetPinDirection+0x22>
     fc4:	6f c0       	rjmp	.+222    	; 0x10a4 <DIO_voidSetPinDirection+0x100>
	 {
		switch(Copy_u8Port)
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	3f 83       	std	Y+7, r19	; 0x07
     fce:	2e 83       	std	Y+6, r18	; 0x06
     fd0:	8e 81       	ldd	r24, Y+6	; 0x06
     fd2:	9f 81       	ldd	r25, Y+7	; 0x07
     fd4:	81 30       	cpi	r24, 0x01	; 1
     fd6:	91 05       	cpc	r25, r1
     fd8:	49 f1       	breq	.+82     	; 0x102c <DIO_voidSetPinDirection+0x88>
     fda:	2e 81       	ldd	r18, Y+6	; 0x06
     fdc:	3f 81       	ldd	r19, Y+7	; 0x07
     fde:	22 30       	cpi	r18, 0x02	; 2
     fe0:	31 05       	cpc	r19, r1
     fe2:	2c f4       	brge	.+10     	; 0xfee <DIO_voidSetPinDirection+0x4a>
     fe4:	8e 81       	ldd	r24, Y+6	; 0x06
     fe6:	9f 81       	ldd	r25, Y+7	; 0x07
     fe8:	00 97       	sbiw	r24, 0x00	; 0
     fea:	61 f0       	breq	.+24     	; 0x1004 <DIO_voidSetPinDirection+0x60>
     fec:	d2 c0       	rjmp	.+420    	; 0x1192 <DIO_voidSetPinDirection+0x1ee>
     fee:	2e 81       	ldd	r18, Y+6	; 0x06
     ff0:	3f 81       	ldd	r19, Y+7	; 0x07
     ff2:	22 30       	cpi	r18, 0x02	; 2
     ff4:	31 05       	cpc	r19, r1
     ff6:	71 f1       	breq	.+92     	; 0x1054 <DIO_voidSetPinDirection+0xb0>
     ff8:	8e 81       	ldd	r24, Y+6	; 0x06
     ffa:	9f 81       	ldd	r25, Y+7	; 0x07
     ffc:	83 30       	cpi	r24, 0x03	; 3
     ffe:	91 05       	cpc	r25, r1
    1000:	e9 f1       	breq	.+122    	; 0x107c <DIO_voidSetPinDirection+0xd8>
    1002:	c7 c0       	rjmp	.+398    	; 0x1192 <DIO_voidSetPinDirection+0x1ee>
		{
			 case DIO_PORTA:
				SET_BIT(DDRA,Copy_u8Pin);
    1004:	aa e3       	ldi	r26, 0x3A	; 58
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	ea e3       	ldi	r30, 0x3A	; 58
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	48 2f       	mov	r20, r24
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 2e       	mov	r0, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <DIO_voidSetPinDirection+0x7e>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <DIO_voidSetPinDirection+0x7a>
    1026:	84 2b       	or	r24, r20
    1028:	8c 93       	st	X, r24
    102a:	b3 c0       	rjmp	.+358    	; 0x1192 <DIO_voidSetPinDirection+0x1ee>
			 break;
			 case DIO_PORTB:
				SET_BIT(DDRB,Copy_u8Pin);
    102c:	a7 e3       	ldi	r26, 0x37	; 55
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e7 e3       	ldi	r30, 0x37	; 55
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	48 2f       	mov	r20, r24
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	02 2e       	mov	r0, r18
    1044:	02 c0       	rjmp	.+4      	; 0x104a <DIO_voidSetPinDirection+0xa6>
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	0a 94       	dec	r0
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <DIO_voidSetPinDirection+0xa2>
    104e:	84 2b       	or	r24, r20
    1050:	8c 93       	st	X, r24
    1052:	9f c0       	rjmp	.+318    	; 0x1192 <DIO_voidSetPinDirection+0x1ee>
			 break;
			 case DIO_PORTC:
				SET_BIT(DDRC,Copy_u8Pin);
    1054:	a4 e3       	ldi	r26, 0x34	; 52
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e4 e3       	ldi	r30, 0x34	; 52
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	48 2f       	mov	r20, r24
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	02 2e       	mov	r0, r18
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <DIO_voidSetPinDirection+0xce>
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	0a 94       	dec	r0
    1074:	e2 f7       	brpl	.-8      	; 0x106e <DIO_voidSetPinDirection+0xca>
    1076:	84 2b       	or	r24, r20
    1078:	8c 93       	st	X, r24
    107a:	8b c0       	rjmp	.+278    	; 0x1192 <DIO_voidSetPinDirection+0x1ee>
			 break;
			 case DIO_PORTD:				
				SET_BIT(DDRD,Copy_u8Pin);
    107c:	a1 e3       	ldi	r26, 0x31	; 49
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e1 e3       	ldi	r30, 0x31	; 49
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	48 2f       	mov	r20, r24
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 2e       	mov	r0, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <DIO_voidSetPinDirection+0xf6>
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	0a 94       	dec	r0
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <DIO_voidSetPinDirection+0xf2>
    109e:	84 2b       	or	r24, r20
    10a0:	8c 93       	st	X, r24
    10a2:	77 c0       	rjmp	.+238    	; 0x1192 <DIO_voidSetPinDirection+0x1ee>
			 break;
				default: ;
	 
			 }
	}
	else if(Copy_u8Direction == DIO_INPUT)
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	88 23       	and	r24, r24
    10a8:	09 f0       	breq	.+2      	; 0x10ac <DIO_voidSetPinDirection+0x108>
    10aa:	73 c0       	rjmp	.+230    	; 0x1192 <DIO_voidSetPinDirection+0x1ee>
	{
		switch(Copy_u8Port)
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	3d 83       	std	Y+5, r19	; 0x05
    10b4:	2c 83       	std	Y+4, r18	; 0x04
    10b6:	8c 81       	ldd	r24, Y+4	; 0x04
    10b8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ba:	81 30       	cpi	r24, 0x01	; 1
    10bc:	91 05       	cpc	r25, r1
    10be:	59 f1       	breq	.+86     	; 0x1116 <DIO_voidSetPinDirection+0x172>
    10c0:	2c 81       	ldd	r18, Y+4	; 0x04
    10c2:	3d 81       	ldd	r19, Y+5	; 0x05
    10c4:	22 30       	cpi	r18, 0x02	; 2
    10c6:	31 05       	cpc	r19, r1
    10c8:	2c f4       	brge	.+10     	; 0x10d4 <DIO_voidSetPinDirection+0x130>
    10ca:	8c 81       	ldd	r24, Y+4	; 0x04
    10cc:	9d 81       	ldd	r25, Y+5	; 0x05
    10ce:	00 97       	sbiw	r24, 0x00	; 0
    10d0:	69 f0       	breq	.+26     	; 0x10ec <DIO_voidSetPinDirection+0x148>
    10d2:	5f c0       	rjmp	.+190    	; 0x1192 <DIO_voidSetPinDirection+0x1ee>
    10d4:	2c 81       	ldd	r18, Y+4	; 0x04
    10d6:	3d 81       	ldd	r19, Y+5	; 0x05
    10d8:	22 30       	cpi	r18, 0x02	; 2
    10da:	31 05       	cpc	r19, r1
    10dc:	89 f1       	breq	.+98     	; 0x1140 <DIO_voidSetPinDirection+0x19c>
    10de:	8c 81       	ldd	r24, Y+4	; 0x04
    10e0:	9d 81       	ldd	r25, Y+5	; 0x05
    10e2:	83 30       	cpi	r24, 0x03	; 3
    10e4:	91 05       	cpc	r25, r1
    10e6:	09 f4       	brne	.+2      	; 0x10ea <DIO_voidSetPinDirection+0x146>
    10e8:	40 c0       	rjmp	.+128    	; 0x116a <DIO_voidSetPinDirection+0x1c6>
    10ea:	53 c0       	rjmp	.+166    	; 0x1192 <DIO_voidSetPinDirection+0x1ee>
		{
			case DIO_PORTA:
				CLEAR_BIT(DDRA,Copy_u8Pin);
    10ec:	aa e3       	ldi	r26, 0x3A	; 58
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	ea e3       	ldi	r30, 0x3A	; 58
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	48 2f       	mov	r20, r24
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	02 2e       	mov	r0, r18
    1104:	02 c0       	rjmp	.+4      	; 0x110a <DIO_voidSetPinDirection+0x166>
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	0a 94       	dec	r0
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <DIO_voidSetPinDirection+0x162>
    110e:	80 95       	com	r24
    1110:	84 23       	and	r24, r20
    1112:	8c 93       	st	X, r24
    1114:	3e c0       	rjmp	.+124    	; 0x1192 <DIO_voidSetPinDirection+0x1ee>
			break;
			case DIO_PORTB:
				CLEAR_BIT(DDRB,Copy_u8Pin);
    1116:	a7 e3       	ldi	r26, 0x37	; 55
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e7 e3       	ldi	r30, 0x37	; 55
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	48 2f       	mov	r20, r24
    1122:	8a 81       	ldd	r24, Y+2	; 0x02
    1124:	28 2f       	mov	r18, r24
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 2e       	mov	r0, r18
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <DIO_voidSetPinDirection+0x190>
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	0a 94       	dec	r0
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <DIO_voidSetPinDirection+0x18c>
    1138:	80 95       	com	r24
    113a:	84 23       	and	r24, r20
    113c:	8c 93       	st	X, r24
    113e:	29 c0       	rjmp	.+82     	; 0x1192 <DIO_voidSetPinDirection+0x1ee>
			break;
			case DIO_PORTC:
				CLEAR_BIT(DDRC,Copy_u8Pin);
    1140:	a4 e3       	ldi	r26, 0x34	; 52
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e4 e3       	ldi	r30, 0x34	; 52
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	48 2f       	mov	r20, r24
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	02 2e       	mov	r0, r18
    1158:	02 c0       	rjmp	.+4      	; 0x115e <DIO_voidSetPinDirection+0x1ba>
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	0a 94       	dec	r0
    1160:	e2 f7       	brpl	.-8      	; 0x115a <DIO_voidSetPinDirection+0x1b6>
    1162:	80 95       	com	r24
    1164:	84 23       	and	r24, r20
    1166:	8c 93       	st	X, r24
    1168:	14 c0       	rjmp	.+40     	; 0x1192 <DIO_voidSetPinDirection+0x1ee>
			break;
			case DIO_PORTD:				
				CLEAR_BIT(DDRD,Copy_u8Pin);
    116a:	a1 e3       	ldi	r26, 0x31	; 49
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e1 e3       	ldi	r30, 0x31	; 49
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	48 2f       	mov	r20, r24
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 2e       	mov	r0, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <DIO_voidSetPinDirection+0x1e4>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <DIO_voidSetPinDirection+0x1e0>
    118c:	80 95       	com	r24
    118e:	84 23       	and	r24, r20
    1190:	8c 93       	st	X, r24
				 
		}
	}
	 
	 
 }
    1192:	27 96       	adiw	r28, 0x07	; 7
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	f8 94       	cli
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	cd bf       	out	0x3d, r28	; 61
    119e:	cf 91       	pop	r28
    11a0:	df 91       	pop	r29
    11a2:	08 95       	ret

000011a4 <DIO_voidSetPinvalue>:
 
 
 void DIO_voidSetPinvalue (u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8value)
 {
    11a4:	df 93       	push	r29
    11a6:	cf 93       	push	r28
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	27 97       	sbiw	r28, 0x07	; 7
    11ae:	0f b6       	in	r0, 0x3f	; 63
    11b0:	f8 94       	cli
    11b2:	de bf       	out	0x3e, r29	; 62
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	cd bf       	out	0x3d, r28	; 61
    11b8:	89 83       	std	Y+1, r24	; 0x01
    11ba:	6a 83       	std	Y+2, r22	; 0x02
    11bc:	4b 83       	std	Y+3, r20	; 0x03
	 if(Copy_u8value == DIO_HIGH)
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	81 30       	cpi	r24, 0x01	; 1
    11c2:	09 f0       	breq	.+2      	; 0x11c6 <DIO_voidSetPinvalue+0x22>
    11c4:	6f c0       	rjmp	.+222    	; 0x12a4 <DIO_voidSetPinvalue+0x100>
	 {
		switch(Copy_u8Port)
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	3f 83       	std	Y+7, r19	; 0x07
    11ce:	2e 83       	std	Y+6, r18	; 0x06
    11d0:	8e 81       	ldd	r24, Y+6	; 0x06
    11d2:	9f 81       	ldd	r25, Y+7	; 0x07
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	91 05       	cpc	r25, r1
    11d8:	49 f1       	breq	.+82     	; 0x122c <DIO_voidSetPinvalue+0x88>
    11da:	2e 81       	ldd	r18, Y+6	; 0x06
    11dc:	3f 81       	ldd	r19, Y+7	; 0x07
    11de:	22 30       	cpi	r18, 0x02	; 2
    11e0:	31 05       	cpc	r19, r1
    11e2:	2c f4       	brge	.+10     	; 0x11ee <DIO_voidSetPinvalue+0x4a>
    11e4:	8e 81       	ldd	r24, Y+6	; 0x06
    11e6:	9f 81       	ldd	r25, Y+7	; 0x07
    11e8:	00 97       	sbiw	r24, 0x00	; 0
    11ea:	61 f0       	breq	.+24     	; 0x1204 <DIO_voidSetPinvalue+0x60>
    11ec:	d2 c0       	rjmp	.+420    	; 0x1392 <DIO_voidSetPinvalue+0x1ee>
    11ee:	2e 81       	ldd	r18, Y+6	; 0x06
    11f0:	3f 81       	ldd	r19, Y+7	; 0x07
    11f2:	22 30       	cpi	r18, 0x02	; 2
    11f4:	31 05       	cpc	r19, r1
    11f6:	71 f1       	breq	.+92     	; 0x1254 <DIO_voidSetPinvalue+0xb0>
    11f8:	8e 81       	ldd	r24, Y+6	; 0x06
    11fa:	9f 81       	ldd	r25, Y+7	; 0x07
    11fc:	83 30       	cpi	r24, 0x03	; 3
    11fe:	91 05       	cpc	r25, r1
    1200:	e9 f1       	breq	.+122    	; 0x127c <DIO_voidSetPinvalue+0xd8>
    1202:	c7 c0       	rjmp	.+398    	; 0x1392 <DIO_voidSetPinvalue+0x1ee>
		{
			 case DIO_PORTA:
				SET_BIT(PORTA,Copy_u8Pin);
    1204:	ab e3       	ldi	r26, 0x3B	; 59
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	eb e3       	ldi	r30, 0x3B	; 59
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	48 2f       	mov	r20, r24
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	02 2e       	mov	r0, r18
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <DIO_voidSetPinvalue+0x7e>
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	0a 94       	dec	r0
    1224:	e2 f7       	brpl	.-8      	; 0x121e <DIO_voidSetPinvalue+0x7a>
    1226:	84 2b       	or	r24, r20
    1228:	8c 93       	st	X, r24
    122a:	b3 c0       	rjmp	.+358    	; 0x1392 <DIO_voidSetPinvalue+0x1ee>
			 break;
			 case DIO_PORTB:
				SET_BIT(PORTB,Copy_u8Pin);
    122c:	a8 e3       	ldi	r26, 0x38	; 56
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	e8 e3       	ldi	r30, 0x38	; 56
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	48 2f       	mov	r20, r24
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	02 2e       	mov	r0, r18
    1244:	02 c0       	rjmp	.+4      	; 0x124a <DIO_voidSetPinvalue+0xa6>
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	0a 94       	dec	r0
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <DIO_voidSetPinvalue+0xa2>
    124e:	84 2b       	or	r24, r20
    1250:	8c 93       	st	X, r24
    1252:	9f c0       	rjmp	.+318    	; 0x1392 <DIO_voidSetPinvalue+0x1ee>
			 break;
			 case DIO_PORTC:
				SET_BIT(PORTC,Copy_u8Pin);
    1254:	a5 e3       	ldi	r26, 0x35	; 53
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e5 e3       	ldi	r30, 0x35	; 53
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	48 2f       	mov	r20, r24
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	02 2e       	mov	r0, r18
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <DIO_voidSetPinvalue+0xce>
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	0a 94       	dec	r0
    1274:	e2 f7       	brpl	.-8      	; 0x126e <DIO_voidSetPinvalue+0xca>
    1276:	84 2b       	or	r24, r20
    1278:	8c 93       	st	X, r24
    127a:	8b c0       	rjmp	.+278    	; 0x1392 <DIO_voidSetPinvalue+0x1ee>
			 break;
			 case DIO_PORTD:				
				SET_BIT(PORTD,Copy_u8Pin);
    127c:	a2 e3       	ldi	r26, 0x32	; 50
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e2 e3       	ldi	r30, 0x32	; 50
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	48 2f       	mov	r20, r24
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	02 2e       	mov	r0, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <DIO_voidSetPinvalue+0xf6>
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	0a 94       	dec	r0
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <DIO_voidSetPinvalue+0xf2>
    129e:	84 2b       	or	r24, r20
    12a0:	8c 93       	st	X, r24
    12a2:	77 c0       	rjmp	.+238    	; 0x1392 <DIO_voidSetPinvalue+0x1ee>
			 break;
				default: ;
	 
		}
	}
	else if(Copy_u8value == DIO_LOW)
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	88 23       	and	r24, r24
    12a8:	09 f0       	breq	.+2      	; 0x12ac <DIO_voidSetPinvalue+0x108>
    12aa:	73 c0       	rjmp	.+230    	; 0x1392 <DIO_voidSetPinvalue+0x1ee>
	{
		switch(Copy_u8Port)
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	3d 83       	std	Y+5, r19	; 0x05
    12b4:	2c 83       	std	Y+4, r18	; 0x04
    12b6:	8c 81       	ldd	r24, Y+4	; 0x04
    12b8:	9d 81       	ldd	r25, Y+5	; 0x05
    12ba:	81 30       	cpi	r24, 0x01	; 1
    12bc:	91 05       	cpc	r25, r1
    12be:	59 f1       	breq	.+86     	; 0x1316 <DIO_voidSetPinvalue+0x172>
    12c0:	2c 81       	ldd	r18, Y+4	; 0x04
    12c2:	3d 81       	ldd	r19, Y+5	; 0x05
    12c4:	22 30       	cpi	r18, 0x02	; 2
    12c6:	31 05       	cpc	r19, r1
    12c8:	2c f4       	brge	.+10     	; 0x12d4 <DIO_voidSetPinvalue+0x130>
    12ca:	8c 81       	ldd	r24, Y+4	; 0x04
    12cc:	9d 81       	ldd	r25, Y+5	; 0x05
    12ce:	00 97       	sbiw	r24, 0x00	; 0
    12d0:	69 f0       	breq	.+26     	; 0x12ec <DIO_voidSetPinvalue+0x148>
    12d2:	5f c0       	rjmp	.+190    	; 0x1392 <DIO_voidSetPinvalue+0x1ee>
    12d4:	2c 81       	ldd	r18, Y+4	; 0x04
    12d6:	3d 81       	ldd	r19, Y+5	; 0x05
    12d8:	22 30       	cpi	r18, 0x02	; 2
    12da:	31 05       	cpc	r19, r1
    12dc:	89 f1       	breq	.+98     	; 0x1340 <DIO_voidSetPinvalue+0x19c>
    12de:	8c 81       	ldd	r24, Y+4	; 0x04
    12e0:	9d 81       	ldd	r25, Y+5	; 0x05
    12e2:	83 30       	cpi	r24, 0x03	; 3
    12e4:	91 05       	cpc	r25, r1
    12e6:	09 f4       	brne	.+2      	; 0x12ea <DIO_voidSetPinvalue+0x146>
    12e8:	40 c0       	rjmp	.+128    	; 0x136a <DIO_voidSetPinvalue+0x1c6>
    12ea:	53 c0       	rjmp	.+166    	; 0x1392 <DIO_voidSetPinvalue+0x1ee>
		{
			case DIO_PORTA:
				CLEAR_BIT(PORTA,Copy_u8Pin);
    12ec:	ab e3       	ldi	r26, 0x3B	; 59
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	eb e3       	ldi	r30, 0x3B	; 59
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	48 2f       	mov	r20, r24
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	28 2f       	mov	r18, r24
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	02 2e       	mov	r0, r18
    1304:	02 c0       	rjmp	.+4      	; 0x130a <DIO_voidSetPinvalue+0x166>
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	0a 94       	dec	r0
    130c:	e2 f7       	brpl	.-8      	; 0x1306 <DIO_voidSetPinvalue+0x162>
    130e:	80 95       	com	r24
    1310:	84 23       	and	r24, r20
    1312:	8c 93       	st	X, r24
    1314:	3e c0       	rjmp	.+124    	; 0x1392 <DIO_voidSetPinvalue+0x1ee>
			break;
			case DIO_PORTB:
				CLEAR_BIT(PORTB,Copy_u8Pin);
    1316:	a8 e3       	ldi	r26, 0x38	; 56
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e8 e3       	ldi	r30, 0x38	; 56
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	48 2f       	mov	r20, r24
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	02 2e       	mov	r0, r18
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <DIO_voidSetPinvalue+0x190>
    1330:	88 0f       	add	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	0a 94       	dec	r0
    1336:	e2 f7       	brpl	.-8      	; 0x1330 <DIO_voidSetPinvalue+0x18c>
    1338:	80 95       	com	r24
    133a:	84 23       	and	r24, r20
    133c:	8c 93       	st	X, r24
    133e:	29 c0       	rjmp	.+82     	; 0x1392 <DIO_voidSetPinvalue+0x1ee>
			break;
			case DIO_PORTC:
				CLEAR_BIT(PORTC,Copy_u8Pin);
    1340:	a5 e3       	ldi	r26, 0x35	; 53
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e5 e3       	ldi	r30, 0x35	; 53
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	48 2f       	mov	r20, r24
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	02 2e       	mov	r0, r18
    1358:	02 c0       	rjmp	.+4      	; 0x135e <DIO_voidSetPinvalue+0x1ba>
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	0a 94       	dec	r0
    1360:	e2 f7       	brpl	.-8      	; 0x135a <DIO_voidSetPinvalue+0x1b6>
    1362:	80 95       	com	r24
    1364:	84 23       	and	r24, r20
    1366:	8c 93       	st	X, r24
    1368:	14 c0       	rjmp	.+40     	; 0x1392 <DIO_voidSetPinvalue+0x1ee>
			break;
			case DIO_PORTD:				
				CLEAR_BIT(PORTD,Copy_u8Pin);
    136a:	a2 e3       	ldi	r26, 0x32	; 50
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e2 e3       	ldi	r30, 0x32	; 50
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	48 2f       	mov	r20, r24
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	02 2e       	mov	r0, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <DIO_voidSetPinvalue+0x1e4>
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	0a 94       	dec	r0
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <DIO_voidSetPinvalue+0x1e0>
    138c:	80 95       	com	r24
    138e:	84 23       	and	r24, r20
    1390:	8c 93       	st	X, r24
				 
				 
		}
	}
	 
 }
    1392:	27 96       	adiw	r28, 0x07	; 7
    1394:	0f b6       	in	r0, 0x3f	; 63
    1396:	f8 94       	cli
    1398:	de bf       	out	0x3e, r29	; 62
    139a:	0f be       	out	0x3f, r0	; 63
    139c:	cd bf       	out	0x3d, r28	; 61
    139e:	cf 91       	pop	r28
    13a0:	df 91       	pop	r29
    13a2:	08 95       	ret

000013a4 <DIO_u8GetPinValue>:
 u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
 {
    13a4:	df 93       	push	r29
    13a6:	cf 93       	push	r28
    13a8:	00 d0       	rcall	.+0      	; 0x13aa <DIO_u8GetPinValue+0x6>
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <DIO_u8GetPinValue+0x8>
    13ac:	0f 92       	push	r0
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
    13b2:	8a 83       	std	Y+2, r24	; 0x02
    13b4:	6b 83       	std	Y+3, r22	; 0x03
	u8 l_value =0;
    13b6:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    13b8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	3d 83       	std	Y+5, r19	; 0x05
    13c0:	2c 83       	std	Y+4, r18	; 0x04
    13c2:	4c 81       	ldd	r20, Y+4	; 0x04
    13c4:	5d 81       	ldd	r21, Y+5	; 0x05
    13c6:	41 30       	cpi	r20, 0x01	; 1
    13c8:	51 05       	cpc	r21, r1
    13ca:	41 f1       	breq	.+80     	; 0x141c <DIO_u8GetPinValue+0x78>
    13cc:	8c 81       	ldd	r24, Y+4	; 0x04
    13ce:	9d 81       	ldd	r25, Y+5	; 0x05
    13d0:	82 30       	cpi	r24, 0x02	; 2
    13d2:	91 05       	cpc	r25, r1
    13d4:	34 f4       	brge	.+12     	; 0x13e2 <DIO_u8GetPinValue+0x3e>
    13d6:	2c 81       	ldd	r18, Y+4	; 0x04
    13d8:	3d 81       	ldd	r19, Y+5	; 0x05
    13da:	21 15       	cp	r18, r1
    13dc:	31 05       	cpc	r19, r1
    13de:	61 f0       	breq	.+24     	; 0x13f8 <DIO_u8GetPinValue+0x54>
    13e0:	52 c0       	rjmp	.+164    	; 0x1486 <DIO_u8GetPinValue+0xe2>
    13e2:	4c 81       	ldd	r20, Y+4	; 0x04
    13e4:	5d 81       	ldd	r21, Y+5	; 0x05
    13e6:	42 30       	cpi	r20, 0x02	; 2
    13e8:	51 05       	cpc	r21, r1
    13ea:	51 f1       	breq	.+84     	; 0x1440 <DIO_u8GetPinValue+0x9c>
    13ec:	8c 81       	ldd	r24, Y+4	; 0x04
    13ee:	9d 81       	ldd	r25, Y+5	; 0x05
    13f0:	83 30       	cpi	r24, 0x03	; 3
    13f2:	91 05       	cpc	r25, r1
    13f4:	b9 f1       	breq	.+110    	; 0x1464 <DIO_u8GetPinValue+0xc0>
    13f6:	47 c0       	rjmp	.+142    	; 0x1486 <DIO_u8GetPinValue+0xe2>
	{
		 case DIO_PORTA:
			 l_value = READ_BIT(PINA,Copy_u8Pin);
    13f8:	e9 e3       	ldi	r30, 0x39	; 57
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	88 2f       	mov	r24, r24
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	a9 01       	movw	r20, r18
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <DIO_u8GetPinValue+0x6c>
    140c:	55 95       	asr	r21
    140e:	47 95       	ror	r20
    1410:	8a 95       	dec	r24
    1412:	e2 f7       	brpl	.-8      	; 0x140c <DIO_u8GetPinValue+0x68>
    1414:	ca 01       	movw	r24, r20
    1416:	81 70       	andi	r24, 0x01	; 1
    1418:	89 83       	std	Y+1, r24	; 0x01
    141a:	35 c0       	rjmp	.+106    	; 0x1486 <DIO_u8GetPinValue+0xe2>
		 break;
		 case DIO_PORTB:
			 l_value = READ_BIT(PINB,Copy_u8Pin);
    141c:	e6 e3       	ldi	r30, 0x36	; 54
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	88 2f       	mov	r24, r24
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	a9 01       	movw	r20, r18
    142e:	02 c0       	rjmp	.+4      	; 0x1434 <DIO_u8GetPinValue+0x90>
    1430:	55 95       	asr	r21
    1432:	47 95       	ror	r20
    1434:	8a 95       	dec	r24
    1436:	e2 f7       	brpl	.-8      	; 0x1430 <DIO_u8GetPinValue+0x8c>
    1438:	ca 01       	movw	r24, r20
    143a:	81 70       	andi	r24, 0x01	; 1
    143c:	89 83       	std	Y+1, r24	; 0x01
    143e:	23 c0       	rjmp	.+70     	; 0x1486 <DIO_u8GetPinValue+0xe2>
		 break;
		 case DIO_PORTC:
			 l_value = READ_BIT(PINC,Copy_u8Pin);
    1440:	e3 e3       	ldi	r30, 0x33	; 51
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	88 2f       	mov	r24, r24
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	a9 01       	movw	r20, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <DIO_u8GetPinValue+0xb4>
    1454:	55 95       	asr	r21
    1456:	47 95       	ror	r20
    1458:	8a 95       	dec	r24
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <DIO_u8GetPinValue+0xb0>
    145c:	ca 01       	movw	r24, r20
    145e:	81 70       	andi	r24, 0x01	; 1
    1460:	89 83       	std	Y+1, r24	; 0x01
    1462:	11 c0       	rjmp	.+34     	; 0x1486 <DIO_u8GetPinValue+0xe2>
		 break;
		 case DIO_PORTD:				
			 l_value = READ_BIT(PIND,Copy_u8Pin);
    1464:	e0 e3       	ldi	r30, 0x30	; 48
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	88 2f       	mov	r24, r24
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	a9 01       	movw	r20, r18
    1476:	02 c0       	rjmp	.+4      	; 0x147c <DIO_u8GetPinValue+0xd8>
    1478:	55 95       	asr	r21
    147a:	47 95       	ror	r20
    147c:	8a 95       	dec	r24
    147e:	e2 f7       	brpl	.-8      	; 0x1478 <DIO_u8GetPinValue+0xd4>
    1480:	ca 01       	movw	r24, r20
    1482:	81 70       	andi	r24, 0x01	; 1
    1484:	89 83       	std	Y+1, r24	; 0x01
		 break;
		 default: ;
	 
	}
	return l_value;
    1486:	89 81       	ldd	r24, Y+1	; 0x01
	
 }
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <DIO_voidTogglePinValue>:
 void DIO_voidTogglePinValue (u8 Copy_u8Port,u8 Copy_u8Pin)
 {
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	00 d0       	rcall	.+0      	; 0x149e <DIO_voidTogglePinValue+0x6>
    149e:	00 d0       	rcall	.+0      	; 0x14a0 <DIO_voidTogglePinValue+0x8>
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	89 83       	std	Y+1, r24	; 0x01
    14a6:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	3c 83       	std	Y+4, r19	; 0x04
    14b0:	2b 83       	std	Y+3, r18	; 0x03
    14b2:	8b 81       	ldd	r24, Y+3	; 0x03
    14b4:	9c 81       	ldd	r25, Y+4	; 0x04
    14b6:	81 30       	cpi	r24, 0x01	; 1
    14b8:	91 05       	cpc	r25, r1
    14ba:	49 f1       	breq	.+82     	; 0x150e <DIO_voidTogglePinValue+0x76>
    14bc:	2b 81       	ldd	r18, Y+3	; 0x03
    14be:	3c 81       	ldd	r19, Y+4	; 0x04
    14c0:	22 30       	cpi	r18, 0x02	; 2
    14c2:	31 05       	cpc	r19, r1
    14c4:	2c f4       	brge	.+10     	; 0x14d0 <DIO_voidTogglePinValue+0x38>
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ca:	00 97       	sbiw	r24, 0x00	; 0
    14cc:	61 f0       	breq	.+24     	; 0x14e6 <DIO_voidTogglePinValue+0x4e>
    14ce:	5a c0       	rjmp	.+180    	; 0x1584 <DIO_voidTogglePinValue+0xec>
    14d0:	2b 81       	ldd	r18, Y+3	; 0x03
    14d2:	3c 81       	ldd	r19, Y+4	; 0x04
    14d4:	22 30       	cpi	r18, 0x02	; 2
    14d6:	31 05       	cpc	r19, r1
    14d8:	71 f1       	breq	.+92     	; 0x1536 <DIO_voidTogglePinValue+0x9e>
    14da:	8b 81       	ldd	r24, Y+3	; 0x03
    14dc:	9c 81       	ldd	r25, Y+4	; 0x04
    14de:	83 30       	cpi	r24, 0x03	; 3
    14e0:	91 05       	cpc	r25, r1
    14e2:	e9 f1       	breq	.+122    	; 0x155e <DIO_voidTogglePinValue+0xc6>
    14e4:	4f c0       	rjmp	.+158    	; 0x1584 <DIO_voidTogglePinValue+0xec>
	{
		 case DIO_PORTA:
			TOGGLE_BIT(PORTA,Copy_u8Pin);
    14e6:	ab e3       	ldi	r26, 0x3B	; 59
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	eb e3       	ldi	r30, 0x3B	; 59
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	48 2f       	mov	r20, r24
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	02 2e       	mov	r0, r18
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <DIO_voidTogglePinValue+0x6c>
    1500:	88 0f       	add	r24, r24
    1502:	99 1f       	adc	r25, r25
    1504:	0a 94       	dec	r0
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <DIO_voidTogglePinValue+0x68>
    1508:	84 27       	eor	r24, r20
    150a:	8c 93       	st	X, r24
    150c:	3b c0       	rjmp	.+118    	; 0x1584 <DIO_voidTogglePinValue+0xec>
		 break;
		 case DIO_PORTB:
			TOGGLE_BIT(PORTB,Copy_u8Pin);
    150e:	a8 e3       	ldi	r26, 0x38	; 56
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	e8 e3       	ldi	r30, 0x38	; 56
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	48 2f       	mov	r20, r24
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	02 2e       	mov	r0, r18
    1526:	02 c0       	rjmp	.+4      	; 0x152c <DIO_voidTogglePinValue+0x94>
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	0a 94       	dec	r0
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <DIO_voidTogglePinValue+0x90>
    1530:	84 27       	eor	r24, r20
    1532:	8c 93       	st	X, r24
    1534:	27 c0       	rjmp	.+78     	; 0x1584 <DIO_voidTogglePinValue+0xec>
		 break;
		 case DIO_PORTC:
			TOGGLE_BIT(PORTC,Copy_u8Pin);
    1536:	a5 e3       	ldi	r26, 0x35	; 53
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e5 e3       	ldi	r30, 0x35	; 53
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	48 2f       	mov	r20, r24
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	02 2e       	mov	r0, r18
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <DIO_voidTogglePinValue+0xbc>
    1550:	88 0f       	add	r24, r24
    1552:	99 1f       	adc	r25, r25
    1554:	0a 94       	dec	r0
    1556:	e2 f7       	brpl	.-8      	; 0x1550 <DIO_voidTogglePinValue+0xb8>
    1558:	84 27       	eor	r24, r20
    155a:	8c 93       	st	X, r24
    155c:	13 c0       	rjmp	.+38     	; 0x1584 <DIO_voidTogglePinValue+0xec>
		 break;
		 case DIO_PORTD:				
			TOGGLE_BIT(PORTD,Copy_u8Pin);
    155e:	a2 e3       	ldi	r26, 0x32	; 50
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e2 e3       	ldi	r30, 0x32	; 50
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	48 2f       	mov	r20, r24
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	02 2e       	mov	r0, r18
    1576:	02 c0       	rjmp	.+4      	; 0x157c <DIO_voidTogglePinValue+0xe4>
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	0a 94       	dec	r0
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <DIO_voidTogglePinValue+0xe0>
    1580:	84 27       	eor	r24, r20
    1582:	8c 93       	st	X, r24
		 break;
		 default: ;
	 
	}
 }
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <DIO_voidSetPortDirection>:

 void DIO_voidSetPortDirection(u8 Copy_u8Port,u8 Copy_u8Direction)
 {
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	00 d0       	rcall	.+0      	; 0x1598 <DIO_voidSetPortDirection+0x6>
    1598:	00 d0       	rcall	.+0      	; 0x159a <DIO_voidSetPortDirection+0x8>
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	89 83       	std	Y+1, r24	; 0x01
    15a0:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	3c 83       	std	Y+4, r19	; 0x04
    15aa:	2b 83       	std	Y+3, r18	; 0x03
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	9c 81       	ldd	r25, Y+4	; 0x04
    15b0:	81 30       	cpi	r24, 0x01	; 1
    15b2:	91 05       	cpc	r25, r1
    15b4:	d1 f0       	breq	.+52     	; 0x15ea <DIO_voidSetPortDirection+0x58>
    15b6:	2b 81       	ldd	r18, Y+3	; 0x03
    15b8:	3c 81       	ldd	r19, Y+4	; 0x04
    15ba:	22 30       	cpi	r18, 0x02	; 2
    15bc:	31 05       	cpc	r19, r1
    15be:	2c f4       	brge	.+10     	; 0x15ca <DIO_voidSetPortDirection+0x38>
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	9c 81       	ldd	r25, Y+4	; 0x04
    15c4:	00 97       	sbiw	r24, 0x00	; 0
    15c6:	61 f0       	breq	.+24     	; 0x15e0 <DIO_voidSetPortDirection+0x4e>
    15c8:	1e c0       	rjmp	.+60     	; 0x1606 <DIO_voidSetPortDirection+0x74>
    15ca:	2b 81       	ldd	r18, Y+3	; 0x03
    15cc:	3c 81       	ldd	r19, Y+4	; 0x04
    15ce:	22 30       	cpi	r18, 0x02	; 2
    15d0:	31 05       	cpc	r19, r1
    15d2:	81 f0       	breq	.+32     	; 0x15f4 <DIO_voidSetPortDirection+0x62>
    15d4:	8b 81       	ldd	r24, Y+3	; 0x03
    15d6:	9c 81       	ldd	r25, Y+4	; 0x04
    15d8:	83 30       	cpi	r24, 0x03	; 3
    15da:	91 05       	cpc	r25, r1
    15dc:	81 f0       	breq	.+32     	; 0x15fe <DIO_voidSetPortDirection+0x6c>
    15de:	13 c0       	rjmp	.+38     	; 0x1606 <DIO_voidSetPortDirection+0x74>
	{
		 case DIO_PORTA:
			DDRA = Copy_u8Direction;
    15e0:	ea e3       	ldi	r30, 0x3A	; 58
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	80 83       	st	Z, r24
    15e8:	0e c0       	rjmp	.+28     	; 0x1606 <DIO_voidSetPortDirection+0x74>
		 break;
		 case DIO_PORTB:
			DDRB = Copy_u8Direction;
    15ea:	e7 e3       	ldi	r30, 0x37	; 55
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	80 83       	st	Z, r24
    15f2:	09 c0       	rjmp	.+18     	; 0x1606 <DIO_voidSetPortDirection+0x74>
		 break;
		 case DIO_PORTC:
			DDRC = Copy_u8Direction;
    15f4:	e4 e3       	ldi	r30, 0x34	; 52
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	80 83       	st	Z, r24
    15fc:	04 c0       	rjmp	.+8      	; 0x1606 <DIO_voidSetPortDirection+0x74>
		 break;
		 case DIO_PORTD:				
			DDRD = Copy_u8Direction;
    15fe:	e1 e3       	ldi	r30, 0x31	; 49
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	80 83       	st	Z, r24
		 break;
		 default: ;
	 
	}
 }
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	0f 90       	pop	r0
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	08 95       	ret

00001614 <DIO_voidSetPortvalue>:
 void DIO_voidSetPortvalue (u8 Copy_u8Port,u8 Copy_u8value)
 {
    1614:	df 93       	push	r29
    1616:	cf 93       	push	r28
    1618:	00 d0       	rcall	.+0      	; 0x161a <DIO_voidSetPortvalue+0x6>
    161a:	00 d0       	rcall	.+0      	; 0x161c <DIO_voidSetPortvalue+0x8>
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	3c 83       	std	Y+4, r19	; 0x04
    162c:	2b 83       	std	Y+3, r18	; 0x03
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	9c 81       	ldd	r25, Y+4	; 0x04
    1632:	81 30       	cpi	r24, 0x01	; 1
    1634:	91 05       	cpc	r25, r1
    1636:	d1 f0       	breq	.+52     	; 0x166c <DIO_voidSetPortvalue+0x58>
    1638:	2b 81       	ldd	r18, Y+3	; 0x03
    163a:	3c 81       	ldd	r19, Y+4	; 0x04
    163c:	22 30       	cpi	r18, 0x02	; 2
    163e:	31 05       	cpc	r19, r1
    1640:	2c f4       	brge	.+10     	; 0x164c <DIO_voidSetPortvalue+0x38>
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	9c 81       	ldd	r25, Y+4	; 0x04
    1646:	00 97       	sbiw	r24, 0x00	; 0
    1648:	61 f0       	breq	.+24     	; 0x1662 <DIO_voidSetPortvalue+0x4e>
    164a:	1e c0       	rjmp	.+60     	; 0x1688 <DIO_voidSetPortvalue+0x74>
    164c:	2b 81       	ldd	r18, Y+3	; 0x03
    164e:	3c 81       	ldd	r19, Y+4	; 0x04
    1650:	22 30       	cpi	r18, 0x02	; 2
    1652:	31 05       	cpc	r19, r1
    1654:	81 f0       	breq	.+32     	; 0x1676 <DIO_voidSetPortvalue+0x62>
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	9c 81       	ldd	r25, Y+4	; 0x04
    165a:	83 30       	cpi	r24, 0x03	; 3
    165c:	91 05       	cpc	r25, r1
    165e:	81 f0       	breq	.+32     	; 0x1680 <DIO_voidSetPortvalue+0x6c>
    1660:	13 c0       	rjmp	.+38     	; 0x1688 <DIO_voidSetPortvalue+0x74>
	{
		 case DIO_PORTA:
			PORTA = Copy_u8value;
    1662:	eb e3       	ldi	r30, 0x3B	; 59
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	80 83       	st	Z, r24
    166a:	0e c0       	rjmp	.+28     	; 0x1688 <DIO_voidSetPortvalue+0x74>
		 break;
		 case DIO_PORTB:
			PORTB = Copy_u8value;
    166c:	e8 e3       	ldi	r30, 0x38	; 56
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	80 83       	st	Z, r24
    1674:	09 c0       	rjmp	.+18     	; 0x1688 <DIO_voidSetPortvalue+0x74>
		 break;
		 case DIO_PORTC:
			PORTC = Copy_u8value;
    1676:	e5 e3       	ldi	r30, 0x35	; 53
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	80 83       	st	Z, r24
    167e:	04 c0       	rjmp	.+8      	; 0x1688 <DIO_voidSetPortvalue+0x74>
		 break;
		 case DIO_PORTD:				
			PORTD = Copy_u8value;
    1680:	e2 e3       	ldi	r30, 0x32	; 50
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	80 83       	st	Z, r24
		 break;
		 default: ;
	 
	}
 }
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	08 95       	ret

00001696 <DIO_u8GetPortValue>:
 u8   DIO_u8GetPortValue(u8 Copy_u8Port)
 {
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	00 d0       	rcall	.+0      	; 0x169c <DIO_u8GetPortValue+0x6>
    169c:	00 d0       	rcall	.+0      	; 0x169e <DIO_u8GetPortValue+0x8>
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	8a 83       	std	Y+2, r24	; 0x02
	 u8 l_value = 0;
    16a4:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	3c 83       	std	Y+4, r19	; 0x04
    16ae:	2b 83       	std	Y+3, r18	; 0x03
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	9c 81       	ldd	r25, Y+4	; 0x04
    16b4:	81 30       	cpi	r24, 0x01	; 1
    16b6:	91 05       	cpc	r25, r1
    16b8:	d1 f0       	breq	.+52     	; 0x16ee <DIO_u8GetPortValue+0x58>
    16ba:	2b 81       	ldd	r18, Y+3	; 0x03
    16bc:	3c 81       	ldd	r19, Y+4	; 0x04
    16be:	22 30       	cpi	r18, 0x02	; 2
    16c0:	31 05       	cpc	r19, r1
    16c2:	2c f4       	brge	.+10     	; 0x16ce <DIO_u8GetPortValue+0x38>
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	9c 81       	ldd	r25, Y+4	; 0x04
    16c8:	00 97       	sbiw	r24, 0x00	; 0
    16ca:	61 f0       	breq	.+24     	; 0x16e4 <DIO_u8GetPortValue+0x4e>
    16cc:	1e c0       	rjmp	.+60     	; 0x170a <DIO_u8GetPortValue+0x74>
    16ce:	2b 81       	ldd	r18, Y+3	; 0x03
    16d0:	3c 81       	ldd	r19, Y+4	; 0x04
    16d2:	22 30       	cpi	r18, 0x02	; 2
    16d4:	31 05       	cpc	r19, r1
    16d6:	81 f0       	breq	.+32     	; 0x16f8 <DIO_u8GetPortValue+0x62>
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	9c 81       	ldd	r25, Y+4	; 0x04
    16dc:	83 30       	cpi	r24, 0x03	; 3
    16de:	91 05       	cpc	r25, r1
    16e0:	81 f0       	breq	.+32     	; 0x1702 <DIO_u8GetPortValue+0x6c>
    16e2:	13 c0       	rjmp	.+38     	; 0x170a <DIO_u8GetPortValue+0x74>
	{
		 case DIO_PORTA:
			 l_value = PINA;
    16e4:	e9 e3       	ldi	r30, 0x39	; 57
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	89 83       	std	Y+1, r24	; 0x01
    16ec:	0e c0       	rjmp	.+28     	; 0x170a <DIO_u8GetPortValue+0x74>
		 break;
		 case DIO_PORTB:
			 l_value = PINB;
    16ee:	e6 e3       	ldi	r30, 0x36	; 54
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	89 83       	std	Y+1, r24	; 0x01
    16f6:	09 c0       	rjmp	.+18     	; 0x170a <DIO_u8GetPortValue+0x74>
		 break;
		 case DIO_PORTC:
			 l_value = PINC;
    16f8:	e3 e3       	ldi	r30, 0x33	; 51
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	89 83       	std	Y+1, r24	; 0x01
    1700:	04 c0       	rjmp	.+8      	; 0x170a <DIO_u8GetPortValue+0x74>
		 break;
		 case DIO_PORTD:				
			 l_value = PIND;
    1702:	e0 e3       	ldi	r30, 0x30	; 48
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	89 83       	std	Y+1, r24	; 0x01
		 break;
		 default: ;
	 
	}
	return l_value;
    170a:	89 81       	ldd	r24, Y+1	; 0x01
 }
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	cf 91       	pop	r28
    1716:	df 91       	pop	r29
    1718:	08 95       	ret

0000171a <ADC_voidInit>:
#include "ADC.h"
#include <avr/interrupt.h>


void ADC_voidInit(void)
{
    171a:	df 93       	push	r29
    171c:	cf 93       	push	r28
    171e:	cd b7       	in	r28, 0x3d	; 61
    1720:	de b7       	in	r29, 0x3e	; 62
	/*Enable the adc */
	SET_BIT(ADCSRA,ADEN);
    1722:	a6 e2       	ldi	r26, 0x26	; 38
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e6 e2       	ldi	r30, 0x26	; 38
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	80 68       	ori	r24, 0x80	; 128
    172e:	8c 93       	st	X, r24
	/*Select v ref == Vcc*/
	SET_BIT(ADMUX,REFS0);
    1730:	a7 e2       	ldi	r26, 0x27	; 39
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	e7 e2       	ldi	r30, 0x27	; 39
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	80 64       	ori	r24, 0x40	; 64
    173c:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX,REFS1);
    173e:	a7 e2       	ldi	r26, 0x27	; 39
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	e7 e2       	ldi	r30, 0x27	; 39
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	8f 77       	andi	r24, 0x7F	; 127
    174a:	8c 93       	st	X, r24
	/*Select Right Adjst*/
	CLEAR_BIT(ADMUX,ADLAR);
    174c:	a7 e2       	ldi	r26, 0x27	; 39
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	e7 e2       	ldi	r30, 0x27	; 39
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	8f 7d       	andi	r24, 0xDF	; 223
    1758:	8c 93       	st	X, r24
	/*disable the auto triger*/
	CLEAR_BIT(ADCSRA,ADATE);
    175a:	a6 e2       	ldi	r26, 0x26	; 38
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e6 e2       	ldi	r30, 0x26	; 38
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	8f 7d       	andi	r24, 0xDF	; 223
    1766:	8c 93       	st	X, r24
	/*Select Prescaler*/
	SET_BIT(ADCSRA,ADPS2);
    1768:	a6 e2       	ldi	r26, 0x26	; 38
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	e6 e2       	ldi	r30, 0x26	; 38
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	84 60       	ori	r24, 0x04	; 4
    1774:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
    1776:	a6 e2       	ldi	r26, 0x26	; 38
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e6 e2       	ldi	r30, 0x26	; 38
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	82 60       	ori	r24, 0x02	; 2
    1782:	8c 93       	st	X, r24
	CLEAR_BIT(ADCSRA,ADPS0);
    1784:	a6 e2       	ldi	r26, 0x26	; 38
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e6 e2       	ldi	r30, 0x26	; 38
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	8e 7f       	andi	r24, 0xFE	; 254
    1790:	8c 93       	st	X, r24
	
}
    1792:	cf 91       	pop	r28
    1794:	df 91       	pop	r29
    1796:	08 95       	ret

00001798 <ADC_u16GetDigitalValue>:

u16  ADC_u16GetDigitalValue(u8 Copy_u8ChannelNum)
{
    1798:	df 93       	push	r29
    179a:	cf 93       	push	r28
    179c:	0f 92       	push	r0
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	89 83       	std	Y+1, r24	; 0x01
	/*Clear first 5 bits*/
	ADMUX &= CLEAR_MASK;
    17a4:	a7 e2       	ldi	r26, 0x27	; 39
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	e7 e2       	ldi	r30, 0x27	; 39
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	80 7e       	andi	r24, 0xE0	; 224
    17b0:	8c 93       	st	X, r24
	/*Select channel*/
	ADMUX |= Copy_u8ChannelNum;
    17b2:	a7 e2       	ldi	r26, 0x27	; 39
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	e7 e2       	ldi	r30, 0x27	; 39
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	90 81       	ld	r25, Z
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	89 2b       	or	r24, r25
    17c0:	8c 93       	st	X, r24
	/*Start conversion*/
	SET_BIT(ADCSRA,ADSC);
    17c2:	a6 e2       	ldi	r26, 0x26	; 38
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	e6 e2       	ldi	r30, 0x26	; 38
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	80 64       	ori	r24, 0x40	; 64
    17ce:	8c 93       	st	X, r24
	/*wait conversion to complete*/
	while((READ_BIT(ADCSRA,ADIF)) == 0);
    17d0:	e6 e2       	ldi	r30, 0x26	; 38
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	82 95       	swap	r24
    17d8:	8f 70       	andi	r24, 0x0F	; 15
    17da:	88 2f       	mov	r24, r24
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	81 70       	andi	r24, 0x01	; 1
    17e0:	90 70       	andi	r25, 0x00	; 0
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	a9 f3       	breq	.-22     	; 0x17d0 <ADC_u16GetDigitalValue+0x38>
	/*Clear the flag*/
	SET_BIT(ADCSRA,ADIF);
    17e6:	a6 e2       	ldi	r26, 0x26	; 38
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e6 e2       	ldi	r30, 0x26	; 38
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	80 61       	ori	r24, 0x10	; 16
    17f2:	8c 93       	st	X, r24
	/*Return the Digital value*/
	return ADC_REG;
    17f4:	e4 e2       	ldi	r30, 0x24	; 36
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	91 81       	ldd	r25, Z+1	; 0x01
	
}
    17fc:	0f 90       	pop	r0
    17fe:	cf 91       	pop	r28
    1800:	df 91       	pop	r29
    1802:	08 95       	ret

00001804 <LCD_voidSendCommand>:
static void LCD_voidSendEnable(void);
static void LCD_voidSend4Bit(u8 Copy_u8CommandData);
static void LCD_4Bit_voidSetCursor(u8 Copy_u8Row,u8 Copy_u8Coulmn);

void LCD_voidSendCommand(u8 Copy_u8Command)
{
    1804:	df 93       	push	r29
    1806:	cf 93       	push	r28
    1808:	0f 92       	push	r0
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinvalue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_LOW);	
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	61 e0       	ldi	r22, 0x01	; 1
    1814:	40 e0       	ldi	r20, 0x00	; 0
    1816:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_LOW);
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	62 e0       	ldi	r22, 0x02	; 2
    181e:	40 e0       	ldi	r20, 0x00	; 0
    1820:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_voidSetPinvalue>
	
	DIO_voidSetPortvalue(LCD_DATA_PORT,Copy_u8Command);
    1824:	83 e0       	ldi	r24, 0x03	; 3
    1826:	69 81       	ldd	r22, Y+1	; 0x01
    1828:	0e 94 0a 0b 	call	0x1614	; 0x1614 <DIO_voidSetPortvalue>
	
	LCD_voidSendEnable();
    182c:	0e 94 c4 14 	call	0x2988	; 0x2988 <LCD_voidSendEnable>
}
    1830:	0f 90       	pop	r0
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	08 95       	ret

00001838 <LCD_voidSendData>:


void LCD_voidSendData(u8 Copy_u8Data)
{
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	0f 92       	push	r0
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinvalue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_HIGH);	
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	61 e0       	ldi	r22, 0x01	; 1
    1848:	41 e0       	ldi	r20, 0x01	; 1
    184a:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_LOW);
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	62 e0       	ldi	r22, 0x02	; 2
    1852:	40 e0       	ldi	r20, 0x00	; 0
    1854:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_voidSetPinvalue>
	
	DIO_voidSetPortvalue(LCD_DATA_PORT,Copy_u8Data);
    1858:	83 e0       	ldi	r24, 0x03	; 3
    185a:	69 81       	ldd	r22, Y+1	; 0x01
    185c:	0e 94 0a 0b 	call	0x1614	; 0x1614 <DIO_voidSetPortvalue>
	
	LCD_voidSendEnable();
    1860:	0e 94 c4 14 	call	0x2988	; 0x2988 <LCD_voidSendEnable>
}
    1864:	0f 90       	pop	r0
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	08 95       	ret

0000186c <LCD_voidSendDataPos>:
void LCD_voidSendDataPos(u8 Copy_u8Data,u8 Copy_u8Row,u8 Copy_u8Coulmn)
{
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	00 d0       	rcall	.+0      	; 0x1872 <LCD_voidSendDataPos+0x6>
    1872:	0f 92       	push	r0
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
    1878:	89 83       	std	Y+1, r24	; 0x01
    187a:	6a 83       	std	Y+2, r22	; 0x02
    187c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_voidSetCursor(Copy_u8Row,Copy_u8Coulmn);
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	6b 81       	ldd	r22, Y+3	; 0x03
    1882:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <LCD_voidSetCursor>

	LCD_voidSendData(Copy_u8Data);
    1886:	89 81       	ldd	r24, Y+1	; 0x01
    1888:	0e 94 1c 0c 	call	0x1838	; 0x1838 <LCD_voidSendData>
}
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	08 95       	ret

00001898 <LCD_8BitvoidInit>:

void LCD_8BitvoidInit(void)
{
    1898:	0f 93       	push	r16
    189a:	1f 93       	push	r17
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	cc 54       	subi	r28, 0x4C	; 76
    18a6:	d0 40       	sbci	r29, 0x00	; 0
    18a8:	0f b6       	in	r0, 0x3f	; 63
    18aa:	f8 94       	cli
    18ac:	de bf       	out	0x3e, r29	; 62
    18ae:	0f be       	out	0x3f, r0	; 63
    18b0:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPortDirection(LCD_DATA_PORT,0xFF);
    18b2:	83 e0       	ldi	r24, 0x03	; 3
    18b4:	6f ef       	ldi	r22, 0xFF	; 255
    18b6:	0e 94 c9 0a 	call	0x1592	; 0x1592 <DIO_voidSetPortDirection>
	
	DIO_voidSetPinDirection(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_OUTPUT);
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	61 e0       	ldi	r22, 0x01	; 1
    18be:	41 e0       	ldi	r20, 0x01	; 1
    18c0:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_OUTPUT);
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	62 e0       	ldi	r22, 0x02	; 2
    18c8:	41 e0       	ldi	r20, 0x01	; 1
    18ca:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT,LCD_EN_PIN,DIO_OUTPUT);
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	63 e0       	ldi	r22, 0x03	; 3
    18d2:	41 e0       	ldi	r20, 0x01	; 1
    18d4:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <DIO_voidSetPinDirection>
    18d8:	fe 01       	movw	r30, r28
    18da:	e7 5b       	subi	r30, 0xB7	; 183
    18dc:	ff 4f       	sbci	r31, 0xFF	; 255
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	ac e0       	ldi	r26, 0x0C	; 12
    18e4:	b2 e4       	ldi	r27, 0x42	; 66
    18e6:	80 83       	st	Z, r24
    18e8:	91 83       	std	Z+1, r25	; 0x01
    18ea:	a2 83       	std	Z+2, r26	; 0x02
    18ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ee:	8e 01       	movw	r16, r28
    18f0:	0b 5b       	subi	r16, 0xBB	; 187
    18f2:	1f 4f       	sbci	r17, 0xFF	; 255
    18f4:	fe 01       	movw	r30, r28
    18f6:	e7 5b       	subi	r30, 0xB7	; 183
    18f8:	ff 4f       	sbci	r31, 0xFF	; 255
    18fa:	60 81       	ld	r22, Z
    18fc:	71 81       	ldd	r23, Z+1	; 0x01
    18fe:	82 81       	ldd	r24, Z+2	; 0x02
    1900:	93 81       	ldd	r25, Z+3	; 0x03
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	4a ef       	ldi	r20, 0xFA	; 250
    1908:	54 e4       	ldi	r21, 0x44	; 68
    190a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	f8 01       	movw	r30, r16
    1914:	80 83       	st	Z, r24
    1916:	91 83       	std	Z+1, r25	; 0x01
    1918:	a2 83       	std	Z+2, r26	; 0x02
    191a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    191c:	fe 01       	movw	r30, r28
    191e:	eb 5b       	subi	r30, 0xBB	; 187
    1920:	ff 4f       	sbci	r31, 0xFF	; 255
    1922:	60 81       	ld	r22, Z
    1924:	71 81       	ldd	r23, Z+1	; 0x01
    1926:	82 81       	ldd	r24, Z+2	; 0x02
    1928:	93 81       	ldd	r25, Z+3	; 0x03
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	40 e8       	ldi	r20, 0x80	; 128
    1930:	5f e3       	ldi	r21, 0x3F	; 63
    1932:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1936:	88 23       	and	r24, r24
    1938:	44 f4       	brge	.+16     	; 0x194a <LCD_8BitvoidInit+0xb2>
		__ticks = 1;
    193a:	fe 01       	movw	r30, r28
    193c:	ed 5b       	subi	r30, 0xBD	; 189
    193e:	ff 4f       	sbci	r31, 0xFF	; 255
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	91 83       	std	Z+1, r25	; 0x01
    1946:	80 83       	st	Z, r24
    1948:	64 c0       	rjmp	.+200    	; 0x1a12 <LCD_8BitvoidInit+0x17a>
	else if (__tmp > 65535)
    194a:	fe 01       	movw	r30, r28
    194c:	eb 5b       	subi	r30, 0xBB	; 187
    194e:	ff 4f       	sbci	r31, 0xFF	; 255
    1950:	60 81       	ld	r22, Z
    1952:	71 81       	ldd	r23, Z+1	; 0x01
    1954:	82 81       	ldd	r24, Z+2	; 0x02
    1956:	93 81       	ldd	r25, Z+3	; 0x03
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	3f ef       	ldi	r19, 0xFF	; 255
    195c:	4f e7       	ldi	r20, 0x7F	; 127
    195e:	57 e4       	ldi	r21, 0x47	; 71
    1960:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1964:	18 16       	cp	r1, r24
    1966:	0c f0       	brlt	.+2      	; 0x196a <LCD_8BitvoidInit+0xd2>
    1968:	43 c0       	rjmp	.+134    	; 0x19f0 <LCD_8BitvoidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196a:	fe 01       	movw	r30, r28
    196c:	e7 5b       	subi	r30, 0xB7	; 183
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	60 81       	ld	r22, Z
    1972:	71 81       	ldd	r23, Z+1	; 0x01
    1974:	82 81       	ldd	r24, Z+2	; 0x02
    1976:	93 81       	ldd	r25, Z+3	; 0x03
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e2       	ldi	r20, 0x20	; 32
    197e:	51 e4       	ldi	r21, 0x41	; 65
    1980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	8e 01       	movw	r16, r28
    198a:	0d 5b       	subi	r16, 0xBD	; 189
    198c:	1f 4f       	sbci	r17, 0xFF	; 255
    198e:	bc 01       	movw	r22, r24
    1990:	cd 01       	movw	r24, r26
    1992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	f8 01       	movw	r30, r16
    199c:	91 83       	std	Z+1, r25	; 0x01
    199e:	80 83       	st	Z, r24
    19a0:	1f c0       	rjmp	.+62     	; 0x19e0 <LCD_8BitvoidInit+0x148>
    19a2:	fe 01       	movw	r30, r28
    19a4:	ef 5b       	subi	r30, 0xBF	; 191
    19a6:	ff 4f       	sbci	r31, 0xFF	; 255
    19a8:	88 ec       	ldi	r24, 0xC8	; 200
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	91 83       	std	Z+1, r25	; 0x01
    19ae:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19b0:	fe 01       	movw	r30, r28
    19b2:	ef 5b       	subi	r30, 0xBF	; 191
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	80 81       	ld	r24, Z
    19b8:	91 81       	ldd	r25, Z+1	; 0x01
    19ba:	01 97       	sbiw	r24, 0x01	; 1
    19bc:	f1 f7       	brne	.-4      	; 0x19ba <LCD_8BitvoidInit+0x122>
    19be:	fe 01       	movw	r30, r28
    19c0:	ef 5b       	subi	r30, 0xBF	; 191
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	91 83       	std	Z+1, r25	; 0x01
    19c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c8:	de 01       	movw	r26, r28
    19ca:	ad 5b       	subi	r26, 0xBD	; 189
    19cc:	bf 4f       	sbci	r27, 0xFF	; 255
    19ce:	fe 01       	movw	r30, r28
    19d0:	ed 5b       	subi	r30, 0xBD	; 189
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	80 81       	ld	r24, Z
    19d6:	91 81       	ldd	r25, Z+1	; 0x01
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	11 96       	adiw	r26, 0x01	; 1
    19dc:	9c 93       	st	X, r25
    19de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e0:	fe 01       	movw	r30, r28
    19e2:	ed 5b       	subi	r30, 0xBD	; 189
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	80 81       	ld	r24, Z
    19e8:	91 81       	ldd	r25, Z+1	; 0x01
    19ea:	00 97       	sbiw	r24, 0x00	; 0
    19ec:	d1 f6       	brne	.-76     	; 0x19a2 <LCD_8BitvoidInit+0x10a>
    19ee:	24 c0       	rjmp	.+72     	; 0x1a38 <LCD_8BitvoidInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f0:	8e 01       	movw	r16, r28
    19f2:	0d 5b       	subi	r16, 0xBD	; 189
    19f4:	1f 4f       	sbci	r17, 0xFF	; 255
    19f6:	fe 01       	movw	r30, r28
    19f8:	eb 5b       	subi	r30, 0xBB	; 187
    19fa:	ff 4f       	sbci	r31, 0xFF	; 255
    19fc:	60 81       	ld	r22, Z
    19fe:	71 81       	ldd	r23, Z+1	; 0x01
    1a00:	82 81       	ldd	r24, Z+2	; 0x02
    1a02:	93 81       	ldd	r25, Z+3	; 0x03
    1a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	f8 01       	movw	r30, r16
    1a0e:	91 83       	std	Z+1, r25	; 0x01
    1a10:	80 83       	st	Z, r24
    1a12:	fe 01       	movw	r30, r28
    1a14:	ed 5b       	subi	r30, 0xBD	; 189
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	80 81       	ld	r24, Z
    1a1a:	91 81       	ldd	r25, Z+1	; 0x01
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	ff 96       	adiw	r30, 0x3f	; 63
    1a20:	91 83       	std	Z+1, r25	; 0x01
    1a22:	80 83       	st	Z, r24
    1a24:	fe 01       	movw	r30, r28
    1a26:	ff 96       	adiw	r30, 0x3f	; 63
    1a28:	80 81       	ld	r24, Z
    1a2a:	91 81       	ldd	r25, Z+1	; 0x01
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	f1 f7       	brne	.-4      	; 0x1a2c <LCD_8BitvoidInit+0x194>
    1a30:	fe 01       	movw	r30, r28
    1a32:	ff 96       	adiw	r30, 0x3f	; 63
    1a34:	91 83       	std	Z+1, r25	; 0x01
    1a36:	80 83       	st	Z, r24
	
	_delay_ms(35);
	
	LCD_voidSendCommand(LCD_8BIT_FUNC_SET);
    1a38:	88 e3       	ldi	r24, 0x38	; 56
    1a3a:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	a8 e4       	ldi	r26, 0x48	; 72
    1a44:	b2 e4       	ldi	r27, 0x42	; 66
    1a46:	8b af       	std	Y+59, r24	; 0x3b
    1a48:	9c af       	std	Y+60, r25	; 0x3c
    1a4a:	ad af       	std	Y+61, r26	; 0x3d
    1a4c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a4e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a50:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a52:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a54:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a56:	2b ea       	ldi	r18, 0xAB	; 171
    1a58:	3a ea       	ldi	r19, 0xAA	; 170
    1a5a:	4a e2       	ldi	r20, 0x2A	; 42
    1a5c:	50 e4       	ldi	r21, 0x40	; 64
    1a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	8f ab       	std	Y+55, r24	; 0x37
    1a68:	98 af       	std	Y+56, r25	; 0x38
    1a6a:	a9 af       	std	Y+57, r26	; 0x39
    1a6c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1a6e:	6f a9       	ldd	r22, Y+55	; 0x37
    1a70:	78 ad       	ldd	r23, Y+56	; 0x38
    1a72:	89 ad       	ldd	r24, Y+57	; 0x39
    1a74:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	40 e8       	ldi	r20, 0x80	; 128
    1a7c:	5f e3       	ldi	r21, 0x3F	; 63
    1a7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a82:	88 23       	and	r24, r24
    1a84:	1c f4       	brge	.+6      	; 0x1a8c <LCD_8BitvoidInit+0x1f4>
		__ticks = 1;
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	8e ab       	std	Y+54, r24	; 0x36
    1a8a:	91 c0       	rjmp	.+290    	; 0x1bae <LCD_8BitvoidInit+0x316>
	else if (__tmp > 255)
    1a8c:	6f a9       	ldd	r22, Y+55	; 0x37
    1a8e:	78 ad       	ldd	r23, Y+56	; 0x38
    1a90:	89 ad       	ldd	r24, Y+57	; 0x39
    1a92:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	4f e7       	ldi	r20, 0x7F	; 127
    1a9a:	53 e4       	ldi	r21, 0x43	; 67
    1a9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1aa0:	18 16       	cp	r1, r24
    1aa2:	0c f0       	brlt	.+2      	; 0x1aa6 <LCD_8BitvoidInit+0x20e>
    1aa4:	7b c0       	rjmp	.+246    	; 0x1b9c <LCD_8BitvoidInit+0x304>
	{
		_delay_ms(__us / 1000.0);
    1aa6:	6b ad       	ldd	r22, Y+59	; 0x3b
    1aa8:	7c ad       	ldd	r23, Y+60	; 0x3c
    1aaa:	8d ad       	ldd	r24, Y+61	; 0x3d
    1aac:	9e ad       	ldd	r25, Y+62	; 0x3e
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	4a e7       	ldi	r20, 0x7A	; 122
    1ab4:	54 e4       	ldi	r21, 0x44	; 68
    1ab6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	8a ab       	std	Y+50, r24	; 0x32
    1ac0:	9b ab       	std	Y+51, r25	; 0x33
    1ac2:	ac ab       	std	Y+52, r26	; 0x34
    1ac4:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac6:	6a a9       	ldd	r22, Y+50	; 0x32
    1ac8:	7b a9       	ldd	r23, Y+51	; 0x33
    1aca:	8c a9       	ldd	r24, Y+52	; 0x34
    1acc:	9d a9       	ldd	r25, Y+53	; 0x35
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	4a ef       	ldi	r20, 0xFA	; 250
    1ad4:	54 e4       	ldi	r21, 0x44	; 68
    1ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	8e a7       	std	Y+46, r24	; 0x2e
    1ae0:	9f a7       	std	Y+47, r25	; 0x2f
    1ae2:	a8 ab       	std	Y+48, r26	; 0x30
    1ae4:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1ae6:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ae8:	7f a5       	ldd	r23, Y+47	; 0x2f
    1aea:	88 a9       	ldd	r24, Y+48	; 0x30
    1aec:	99 a9       	ldd	r25, Y+49	; 0x31
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	40 e8       	ldi	r20, 0x80	; 128
    1af4:	5f e3       	ldi	r21, 0x3F	; 63
    1af6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1afa:	88 23       	and	r24, r24
    1afc:	2c f4       	brge	.+10     	; 0x1b08 <LCD_8BitvoidInit+0x270>
		__ticks = 1;
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	9d a7       	std	Y+45, r25	; 0x2d
    1b04:	8c a7       	std	Y+44, r24	; 0x2c
    1b06:	3f c0       	rjmp	.+126    	; 0x1b86 <LCD_8BitvoidInit+0x2ee>
	else if (__tmp > 65535)
    1b08:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b0a:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b0c:	88 a9       	ldd	r24, Y+48	; 0x30
    1b0e:	99 a9       	ldd	r25, Y+49	; 0x31
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	3f ef       	ldi	r19, 0xFF	; 255
    1b14:	4f e7       	ldi	r20, 0x7F	; 127
    1b16:	57 e4       	ldi	r21, 0x47	; 71
    1b18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b1c:	18 16       	cp	r1, r24
    1b1e:	4c f5       	brge	.+82     	; 0x1b72 <LCD_8BitvoidInit+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b20:	6a a9       	ldd	r22, Y+50	; 0x32
    1b22:	7b a9       	ldd	r23, Y+51	; 0x33
    1b24:	8c a9       	ldd	r24, Y+52	; 0x34
    1b26:	9d a9       	ldd	r25, Y+53	; 0x35
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	40 e2       	ldi	r20, 0x20	; 32
    1b2e:	51 e4       	ldi	r21, 0x41	; 65
    1b30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	bc 01       	movw	r22, r24
    1b3a:	cd 01       	movw	r24, r26
    1b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	9d a7       	std	Y+45, r25	; 0x2d
    1b46:	8c a7       	std	Y+44, r24	; 0x2c
    1b48:	0f c0       	rjmp	.+30     	; 0x1b68 <LCD_8BitvoidInit+0x2d0>
    1b4a:	88 ec       	ldi	r24, 0xC8	; 200
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	9b a7       	std	Y+43, r25	; 0x2b
    1b50:	8a a7       	std	Y+42, r24	; 0x2a
    1b52:	8a a5       	ldd	r24, Y+42	; 0x2a
    1b54:	9b a5       	ldd	r25, Y+43	; 0x2b
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	f1 f7       	brne	.-4      	; 0x1b56 <LCD_8BitvoidInit+0x2be>
    1b5a:	9b a7       	std	Y+43, r25	; 0x2b
    1b5c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b5e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b60:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	9d a7       	std	Y+45, r25	; 0x2d
    1b66:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b68:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b6a:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b6c:	00 97       	sbiw	r24, 0x00	; 0
    1b6e:	69 f7       	brne	.-38     	; 0x1b4a <LCD_8BitvoidInit+0x2b2>
    1b70:	24 c0       	rjmp	.+72     	; 0x1bba <LCD_8BitvoidInit+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b72:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b74:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b76:	88 a9       	ldd	r24, Y+48	; 0x30
    1b78:	99 a9       	ldd	r25, Y+49	; 0x31
    1b7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	9d a7       	std	Y+45, r25	; 0x2d
    1b84:	8c a7       	std	Y+44, r24	; 0x2c
    1b86:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b88:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b8a:	99 a7       	std	Y+41, r25	; 0x29
    1b8c:	88 a7       	std	Y+40, r24	; 0x28
    1b8e:	88 a5       	ldd	r24, Y+40	; 0x28
    1b90:	99 a5       	ldd	r25, Y+41	; 0x29
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	f1 f7       	brne	.-4      	; 0x1b92 <LCD_8BitvoidInit+0x2fa>
    1b96:	99 a7       	std	Y+41, r25	; 0x29
    1b98:	88 a7       	std	Y+40, r24	; 0x28
    1b9a:	0f c0       	rjmp	.+30     	; 0x1bba <LCD_8BitvoidInit+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b9c:	6f a9       	ldd	r22, Y+55	; 0x37
    1b9e:	78 ad       	ldd	r23, Y+56	; 0x38
    1ba0:	89 ad       	ldd	r24, Y+57	; 0x39
    1ba2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ba4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	8e ab       	std	Y+54, r24	; 0x36
    1bae:	8e a9       	ldd	r24, Y+54	; 0x36
    1bb0:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bb2:	8f a1       	ldd	r24, Y+39	; 0x27
    1bb4:	8a 95       	dec	r24
    1bb6:	f1 f7       	brne	.-4      	; 0x1bb4 <LCD_8BitvoidInit+0x31c>
    1bb8:	8f a3       	std	Y+39, r24	; 0x27
	
	_delay_us(50);
	
	LCD_voidSendCommand(LCD_DISBLAY_ON_OFF);
    1bba:	8c e0       	ldi	r24, 0x0C	; 12
    1bbc:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	a8 e4       	ldi	r26, 0x48	; 72
    1bc6:	b2 e4       	ldi	r27, 0x42	; 66
    1bc8:	8b a3       	std	Y+35, r24	; 0x23
    1bca:	9c a3       	std	Y+36, r25	; 0x24
    1bcc:	ad a3       	std	Y+37, r26	; 0x25
    1bce:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1bd0:	6b a1       	ldd	r22, Y+35	; 0x23
    1bd2:	7c a1       	ldd	r23, Y+36	; 0x24
    1bd4:	8d a1       	ldd	r24, Y+37	; 0x25
    1bd6:	9e a1       	ldd	r25, Y+38	; 0x26
    1bd8:	2b ea       	ldi	r18, 0xAB	; 171
    1bda:	3a ea       	ldi	r19, 0xAA	; 170
    1bdc:	4a e2       	ldi	r20, 0x2A	; 42
    1bde:	50 e4       	ldi	r21, 0x40	; 64
    1be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	8f 8f       	std	Y+31, r24	; 0x1f
    1bea:	98 a3       	std	Y+32, r25	; 0x20
    1bec:	a9 a3       	std	Y+33, r26	; 0x21
    1bee:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1bf0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1bf2:	78 a1       	ldd	r23, Y+32	; 0x20
    1bf4:	89 a1       	ldd	r24, Y+33	; 0x21
    1bf6:	9a a1       	ldd	r25, Y+34	; 0x22
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	40 e8       	ldi	r20, 0x80	; 128
    1bfe:	5f e3       	ldi	r21, 0x3F	; 63
    1c00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c04:	88 23       	and	r24, r24
    1c06:	1c f4       	brge	.+6      	; 0x1c0e <LCD_8BitvoidInit+0x376>
		__ticks = 1;
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	8e 8f       	std	Y+30, r24	; 0x1e
    1c0c:	91 c0       	rjmp	.+290    	; 0x1d30 <LCD_8BitvoidInit+0x498>
	else if (__tmp > 255)
    1c0e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c10:	78 a1       	ldd	r23, Y+32	; 0x20
    1c12:	89 a1       	ldd	r24, Y+33	; 0x21
    1c14:	9a a1       	ldd	r25, Y+34	; 0x22
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	4f e7       	ldi	r20, 0x7F	; 127
    1c1c:	53 e4       	ldi	r21, 0x43	; 67
    1c1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c22:	18 16       	cp	r1, r24
    1c24:	0c f0       	brlt	.+2      	; 0x1c28 <LCD_8BitvoidInit+0x390>
    1c26:	7b c0       	rjmp	.+246    	; 0x1d1e <LCD_8BitvoidInit+0x486>
	{
		_delay_ms(__us / 1000.0);
    1c28:	6b a1       	ldd	r22, Y+35	; 0x23
    1c2a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c2c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c2e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	4a e7       	ldi	r20, 0x7A	; 122
    1c36:	54 e4       	ldi	r21, 0x44	; 68
    1c38:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	8a 8f       	std	Y+26, r24	; 0x1a
    1c42:	9b 8f       	std	Y+27, r25	; 0x1b
    1c44:	ac 8f       	std	Y+28, r26	; 0x1c
    1c46:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c48:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c4a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c4c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c4e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	4a ef       	ldi	r20, 0xFA	; 250
    1c56:	54 e4       	ldi	r21, 0x44	; 68
    1c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	8e 8b       	std	Y+22, r24	; 0x16
    1c62:	9f 8b       	std	Y+23, r25	; 0x17
    1c64:	a8 8f       	std	Y+24, r26	; 0x18
    1c66:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1c68:	6e 89       	ldd	r22, Y+22	; 0x16
    1c6a:	7f 89       	ldd	r23, Y+23	; 0x17
    1c6c:	88 8d       	ldd	r24, Y+24	; 0x18
    1c6e:	99 8d       	ldd	r25, Y+25	; 0x19
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	40 e8       	ldi	r20, 0x80	; 128
    1c76:	5f e3       	ldi	r21, 0x3F	; 63
    1c78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c7c:	88 23       	and	r24, r24
    1c7e:	2c f4       	brge	.+10     	; 0x1c8a <LCD_8BitvoidInit+0x3f2>
		__ticks = 1;
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	9d 8b       	std	Y+21, r25	; 0x15
    1c86:	8c 8b       	std	Y+20, r24	; 0x14
    1c88:	3f c0       	rjmp	.+126    	; 0x1d08 <LCD_8BitvoidInit+0x470>
	else if (__tmp > 65535)
    1c8a:	6e 89       	ldd	r22, Y+22	; 0x16
    1c8c:	7f 89       	ldd	r23, Y+23	; 0x17
    1c8e:	88 8d       	ldd	r24, Y+24	; 0x18
    1c90:	99 8d       	ldd	r25, Y+25	; 0x19
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	3f ef       	ldi	r19, 0xFF	; 255
    1c96:	4f e7       	ldi	r20, 0x7F	; 127
    1c98:	57 e4       	ldi	r21, 0x47	; 71
    1c9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c9e:	18 16       	cp	r1, r24
    1ca0:	4c f5       	brge	.+82     	; 0x1cf4 <LCD_8BitvoidInit+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1ca4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1ca6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ca8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	40 e2       	ldi	r20, 0x20	; 32
    1cb0:	51 e4       	ldi	r21, 0x41	; 65
    1cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	bc 01       	movw	r22, r24
    1cbc:	cd 01       	movw	r24, r26
    1cbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	9d 8b       	std	Y+21, r25	; 0x15
    1cc8:	8c 8b       	std	Y+20, r24	; 0x14
    1cca:	0f c0       	rjmp	.+30     	; 0x1cea <LCD_8BitvoidInit+0x452>
    1ccc:	88 ec       	ldi	r24, 0xC8	; 200
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	9b 8b       	std	Y+19, r25	; 0x13
    1cd2:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cd4:	8a 89       	ldd	r24, Y+18	; 0x12
    1cd6:	9b 89       	ldd	r25, Y+19	; 0x13
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	f1 f7       	brne	.-4      	; 0x1cd8 <LCD_8BitvoidInit+0x440>
    1cdc:	9b 8b       	std	Y+19, r25	; 0x13
    1cde:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce0:	8c 89       	ldd	r24, Y+20	; 0x14
    1ce2:	9d 89       	ldd	r25, Y+21	; 0x15
    1ce4:	01 97       	sbiw	r24, 0x01	; 1
    1ce6:	9d 8b       	std	Y+21, r25	; 0x15
    1ce8:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cea:	8c 89       	ldd	r24, Y+20	; 0x14
    1cec:	9d 89       	ldd	r25, Y+21	; 0x15
    1cee:	00 97       	sbiw	r24, 0x00	; 0
    1cf0:	69 f7       	brne	.-38     	; 0x1ccc <LCD_8BitvoidInit+0x434>
    1cf2:	24 c0       	rjmp	.+72     	; 0x1d3c <LCD_8BitvoidInit+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf4:	6e 89       	ldd	r22, Y+22	; 0x16
    1cf6:	7f 89       	ldd	r23, Y+23	; 0x17
    1cf8:	88 8d       	ldd	r24, Y+24	; 0x18
    1cfa:	99 8d       	ldd	r25, Y+25	; 0x19
    1cfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	9d 8b       	std	Y+21, r25	; 0x15
    1d06:	8c 8b       	std	Y+20, r24	; 0x14
    1d08:	8c 89       	ldd	r24, Y+20	; 0x14
    1d0a:	9d 89       	ldd	r25, Y+21	; 0x15
    1d0c:	99 8b       	std	Y+17, r25	; 0x11
    1d0e:	88 8b       	std	Y+16, r24	; 0x10
    1d10:	88 89       	ldd	r24, Y+16	; 0x10
    1d12:	99 89       	ldd	r25, Y+17	; 0x11
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	f1 f7       	brne	.-4      	; 0x1d14 <LCD_8BitvoidInit+0x47c>
    1d18:	99 8b       	std	Y+17, r25	; 0x11
    1d1a:	88 8b       	std	Y+16, r24	; 0x10
    1d1c:	0f c0       	rjmp	.+30     	; 0x1d3c <LCD_8BitvoidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d1e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d20:	78 a1       	ldd	r23, Y+32	; 0x20
    1d22:	89 a1       	ldd	r24, Y+33	; 0x21
    1d24:	9a a1       	ldd	r25, Y+34	; 0x22
    1d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	8e 8f       	std	Y+30, r24	; 0x1e
    1d30:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d32:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d34:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d36:	8a 95       	dec	r24
    1d38:	f1 f7       	brne	.-4      	; 0x1d36 <LCD_8BitvoidInit+0x49e>
    1d3a:	8f 87       	std	Y+15, r24	; 0x0f
	
	_delay_us(50);
	
	LCD_voidSendCommand(LCD_CLEAR_DISBLAY);
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	a0 ea       	ldi	r26, 0xA0	; 160
    1d48:	b0 e4       	ldi	r27, 0x40	; 64
    1d4a:	8b 87       	std	Y+11, r24	; 0x0b
    1d4c:	9c 87       	std	Y+12, r25	; 0x0c
    1d4e:	ad 87       	std	Y+13, r26	; 0x0d
    1d50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	4a ef       	ldi	r20, 0xFA	; 250
    1d60:	54 e4       	ldi	r21, 0x44	; 68
    1d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	8f 83       	std	Y+7, r24	; 0x07
    1d6c:	98 87       	std	Y+8, r25	; 0x08
    1d6e:	a9 87       	std	Y+9, r26	; 0x09
    1d70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d72:	6f 81       	ldd	r22, Y+7	; 0x07
    1d74:	78 85       	ldd	r23, Y+8	; 0x08
    1d76:	89 85       	ldd	r24, Y+9	; 0x09
    1d78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	40 e8       	ldi	r20, 0x80	; 128
    1d80:	5f e3       	ldi	r21, 0x3F	; 63
    1d82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d86:	88 23       	and	r24, r24
    1d88:	2c f4       	brge	.+10     	; 0x1d94 <LCD_8BitvoidInit+0x4fc>
		__ticks = 1;
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	9e 83       	std	Y+6, r25	; 0x06
    1d90:	8d 83       	std	Y+5, r24	; 0x05
    1d92:	3f c0       	rjmp	.+126    	; 0x1e12 <LCD_8BitvoidInit+0x57a>
	else if (__tmp > 65535)
    1d94:	6f 81       	ldd	r22, Y+7	; 0x07
    1d96:	78 85       	ldd	r23, Y+8	; 0x08
    1d98:	89 85       	ldd	r24, Y+9	; 0x09
    1d9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	3f ef       	ldi	r19, 0xFF	; 255
    1da0:	4f e7       	ldi	r20, 0x7F	; 127
    1da2:	57 e4       	ldi	r21, 0x47	; 71
    1da4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1da8:	18 16       	cp	r1, r24
    1daa:	4c f5       	brge	.+82     	; 0x1dfe <LCD_8BitvoidInit+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e2       	ldi	r20, 0x20	; 32
    1dba:	51 e4       	ldi	r21, 0x41	; 65
    1dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	bc 01       	movw	r22, r24
    1dc6:	cd 01       	movw	r24, r26
    1dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	9e 83       	std	Y+6, r25	; 0x06
    1dd2:	8d 83       	std	Y+5, r24	; 0x05
    1dd4:	0f c0       	rjmp	.+30     	; 0x1df4 <LCD_8BitvoidInit+0x55c>
    1dd6:	88 ec       	ldi	r24, 0xC8	; 200
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	9c 83       	std	Y+4, r25	; 0x04
    1ddc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	9c 81       	ldd	r25, Y+4	; 0x04
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	f1 f7       	brne	.-4      	; 0x1de2 <LCD_8BitvoidInit+0x54a>
    1de6:	9c 83       	std	Y+4, r25	; 0x04
    1de8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dea:	8d 81       	ldd	r24, Y+5	; 0x05
    1dec:	9e 81       	ldd	r25, Y+6	; 0x06
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	9e 83       	std	Y+6, r25	; 0x06
    1df2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df4:	8d 81       	ldd	r24, Y+5	; 0x05
    1df6:	9e 81       	ldd	r25, Y+6	; 0x06
    1df8:	00 97       	sbiw	r24, 0x00	; 0
    1dfa:	69 f7       	brne	.-38     	; 0x1dd6 <LCD_8BitvoidInit+0x53e>
    1dfc:	14 c0       	rjmp	.+40     	; 0x1e26 <LCD_8BitvoidInit+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1e00:	78 85       	ldd	r23, Y+8	; 0x08
    1e02:	89 85       	ldd	r24, Y+9	; 0x09
    1e04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	9e 83       	std	Y+6, r25	; 0x06
    1e10:	8d 83       	std	Y+5, r24	; 0x05
    1e12:	8d 81       	ldd	r24, Y+5	; 0x05
    1e14:	9e 81       	ldd	r25, Y+6	; 0x06
    1e16:	9a 83       	std	Y+2, r25	; 0x02
    1e18:	89 83       	std	Y+1, r24	; 0x01
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	f1 f7       	brne	.-4      	; 0x1e1e <LCD_8BitvoidInit+0x586>
    1e22:	9a 83       	std	Y+2, r25	; 0x02
    1e24:	89 83       	std	Y+1, r24	; 0x01
	
	_delay_ms(5);
	


}
    1e26:	c4 5b       	subi	r28, 0xB4	; 180
    1e28:	df 4f       	sbci	r29, 0xFF	; 255
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	f8 94       	cli
    1e2e:	de bf       	out	0x3e, r29	; 62
    1e30:	0f be       	out	0x3f, r0	; 63
    1e32:	cd bf       	out	0x3d, r28	; 61
    1e34:	cf 91       	pop	r28
    1e36:	df 91       	pop	r29
    1e38:	1f 91       	pop	r17
    1e3a:	0f 91       	pop	r16
    1e3c:	08 95       	ret

00001e3e <LCD_voidSendString>:

void LCD_voidSendString(u8 *Copy_PAString)
{
    1e3e:	df 93       	push	r29
    1e40:	cf 93       	push	r28
    1e42:	00 d0       	rcall	.+0      	; 0x1e44 <LCD_voidSendString+0x6>
    1e44:	0f 92       	push	r0
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
    1e4a:	9b 83       	std	Y+3, r25	; 0x03
    1e4c:	8a 83       	std	Y+2, r24	; 0x02


	for(u8 i=0;Copy_PAString[i];i++)
    1e4e:	19 82       	std	Y+1, r1	; 0x01
    1e50:	0e c0       	rjmp	.+28     	; 0x1e6e <LCD_voidSendString+0x30>
	{
		LCD_voidSendData(Copy_PAString[i]);
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	28 2f       	mov	r18, r24
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	e2 0f       	add	r30, r18
    1e60:	f3 1f       	adc	r31, r19
    1e62:	80 81       	ld	r24, Z
    1e64:	0e 94 1c 0c 	call	0x1838	; 0x1838 <LCD_voidSendData>

void LCD_voidSendString(u8 *Copy_PAString)
{


	for(u8 i=0;Copy_PAString[i];i++)
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
    1e6a:	8f 5f       	subi	r24, 0xFF	; 255
    1e6c:	89 83       	std	Y+1, r24	; 0x01
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	28 2f       	mov	r18, r24
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	9b 81       	ldd	r25, Y+3	; 0x03
    1e78:	fc 01       	movw	r30, r24
    1e7a:	e2 0f       	add	r30, r18
    1e7c:	f3 1f       	adc	r31, r19
    1e7e:	80 81       	ld	r24, Z
    1e80:	88 23       	and	r24, r24
    1e82:	39 f7       	brne	.-50     	; 0x1e52 <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(Copy_PAString[i]);
	}
}
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	08 95       	ret

00001e90 <LCD_voidSendStringPos>:

void LCD_voidSendStringPos(u8 *Copy_PAString,u8 Copy_u8Row,u8 Copy_u8Coulmn)
{
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	00 d0       	rcall	.+0      	; 0x1e96 <LCD_voidSendStringPos+0x6>
    1e96:	00 d0       	rcall	.+0      	; 0x1e98 <LCD_voidSendStringPos+0x8>
    1e98:	0f 92       	push	r0
    1e9a:	cd b7       	in	r28, 0x3d	; 61
    1e9c:	de b7       	in	r29, 0x3e	; 62
    1e9e:	9b 83       	std	Y+3, r25	; 0x03
    1ea0:	8a 83       	std	Y+2, r24	; 0x02
    1ea2:	6c 83       	std	Y+4, r22	; 0x04
    1ea4:	4d 83       	std	Y+5, r20	; 0x05
	LCD_voidSetCursor(Copy_u8Row,Copy_u8Coulmn);
    1ea6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea8:	6d 81       	ldd	r22, Y+5	; 0x05
    1eaa:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <LCD_voidSetCursor>

	for(u8 i=0;Copy_PAString[i];i++)
    1eae:	19 82       	std	Y+1, r1	; 0x01
    1eb0:	0e c0       	rjmp	.+28     	; 0x1ece <LCD_voidSendStringPos+0x3e>
	{
		LCD_voidSendData(Copy_PAString[i]);
    1eb2:	89 81       	ldd	r24, Y+1	; 0x01
    1eb4:	28 2f       	mov	r18, r24
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	9b 81       	ldd	r25, Y+3	; 0x03
    1ebc:	fc 01       	movw	r30, r24
    1ebe:	e2 0f       	add	r30, r18
    1ec0:	f3 1f       	adc	r31, r19
    1ec2:	80 81       	ld	r24, Z
    1ec4:	0e 94 1c 0c 	call	0x1838	; 0x1838 <LCD_voidSendData>

void LCD_voidSendStringPos(u8 *Copy_PAString,u8 Copy_u8Row,u8 Copy_u8Coulmn)
{
	LCD_voidSetCursor(Copy_u8Row,Copy_u8Coulmn);

	for(u8 i=0;Copy_PAString[i];i++)
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	8f 5f       	subi	r24, 0xFF	; 255
    1ecc:	89 83       	std	Y+1, r24	; 0x01
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed8:	fc 01       	movw	r30, r24
    1eda:	e2 0f       	add	r30, r18
    1edc:	f3 1f       	adc	r31, r19
    1ede:	80 81       	ld	r24, Z
    1ee0:	88 23       	and	r24, r24
    1ee2:	39 f7       	brne	.-50     	; 0x1eb2 <LCD_voidSendStringPos+0x22>
	{
		LCD_voidSendData(Copy_PAString[i]);
	}
}
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	cf 91       	pop	r28
    1ef0:	df 91       	pop	r29
    1ef2:	08 95       	ret

00001ef4 <LCD_voidSendNumberPos>:

void LCD_voidSendNumberPos(u32 Copy_u32number,u8 Copy_u8Row,u8 Copy_u8Coulmn)
{
    1ef4:	df 93       	push	r29
    1ef6:	cf 93       	push	r28
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
    1efc:	2f 97       	sbiw	r28, 0x0f	; 15
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	f8 94       	cli
    1f02:	de bf       	out	0x3e, r29	; 62
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	cd bf       	out	0x3d, r28	; 61
    1f08:	9d 87       	std	Y+13, r25	; 0x0d
    1f0a:	8c 87       	std	Y+12, r24	; 0x0c
    1f0c:	6e 87       	std	Y+14, r22	; 0x0e
    1f0e:	4f 87       	std	Y+15, r20	; 0x0f
	u8 num[11] = {0};
    1f10:	8b e0       	ldi	r24, 0x0B	; 11
    1f12:	fe 01       	movw	r30, r28
    1f14:	31 96       	adiw	r30, 0x01	; 1
    1f16:	df 01       	movw	r26, r30
    1f18:	98 2f       	mov	r25, r24
    1f1a:	1d 92       	st	X+, r1
    1f1c:	9a 95       	dec	r25
    1f1e:	e9 f7       	brne	.-6      	; 0x1f1a <LCD_voidSendNumberPos+0x26>

	sprintf(num,"%i",Copy_u32number);
    1f20:	00 d0       	rcall	.+0      	; 0x1f22 <LCD_voidSendNumberPos+0x2e>
    1f22:	00 d0       	rcall	.+0      	; 0x1f24 <LCD_voidSendNumberPos+0x30>
    1f24:	00 d0       	rcall	.+0      	; 0x1f26 <LCD_voidSendNumberPos+0x32>
    1f26:	ed b7       	in	r30, 0x3d	; 61
    1f28:	fe b7       	in	r31, 0x3e	; 62
    1f2a:	31 96       	adiw	r30, 0x01	; 1
    1f2c:	ce 01       	movw	r24, r28
    1f2e:	01 96       	adiw	r24, 0x01	; 1
    1f30:	91 83       	std	Z+1, r25	; 0x01
    1f32:	80 83       	st	Z, r24
    1f34:	80 e6       	ldi	r24, 0x60	; 96
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	93 83       	std	Z+3, r25	; 0x03
    1f3a:	82 83       	std	Z+2, r24	; 0x02
    1f3c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f3e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f40:	95 83       	std	Z+5, r25	; 0x05
    1f42:	84 83       	std	Z+4, r24	; 0x04
    1f44:	0e 94 11 25 	call	0x4a22	; 0x4a22 <sprintf>
    1f48:	ad b7       	in	r26, 0x3d	; 61
    1f4a:	be b7       	in	r27, 0x3e	; 62
    1f4c:	16 96       	adiw	r26, 0x06	; 6
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	f8 94       	cli
    1f52:	be bf       	out	0x3e, r27	; 62
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	ad bf       	out	0x3d, r26	; 61

	LCD_voidSendStringPos(num,Copy_u8Row,Copy_u8Coulmn);
    1f58:	ce 01       	movw	r24, r28
    1f5a:	01 96       	adiw	r24, 0x01	; 1
    1f5c:	6e 85       	ldd	r22, Y+14	; 0x0e
    1f5e:	4f 85       	ldd	r20, Y+15	; 0x0f
    1f60:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>


}
    1f64:	2f 96       	adiw	r28, 0x0f	; 15
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	de bf       	out	0x3e, r29	; 62
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	cd bf       	out	0x3d, r28	; 61
    1f70:	cf 91       	pop	r28
    1f72:	df 91       	pop	r29
    1f74:	08 95       	ret

00001f76 <LCD_voidDrawCustomeCharPos>:

void LCD_voidDrawCustomeCharPos(u8 *Copy_u8PAChar,u8 Copy_u8CharAddress,u8 Copy_u8Row,u8 Copy_u8Coulmn)
{
    1f76:	df 93       	push	r29
    1f78:	cf 93       	push	r28
    1f7a:	cd b7       	in	r28, 0x3d	; 61
    1f7c:	de b7       	in	r29, 0x3e	; 62
    1f7e:	6e 97       	sbiw	r28, 0x1e	; 30
    1f80:	0f b6       	in	r0, 0x3f	; 63
    1f82:	f8 94       	cli
    1f84:	de bf       	out	0x3e, r29	; 62
    1f86:	0f be       	out	0x3f, r0	; 63
    1f88:	cd bf       	out	0x3d, r28	; 61
    1f8a:	9b 8f       	std	Y+27, r25	; 0x1b
    1f8c:	8a 8f       	std	Y+26, r24	; 0x1a
    1f8e:	6c 8f       	std	Y+28, r22	; 0x1c
    1f90:	4d 8f       	std	Y+29, r20	; 0x1d
    1f92:	2e 8f       	std	Y+30, r18	; 0x1e
	LCD_voidSendCommand(LCD_CGRAM_START + (Copy_u8CharAddress*8));
    1f94:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f96:	88 2f       	mov	r24, r24
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	08 96       	adiw	r24, 0x08	; 8
    1f9c:	88 0f       	add	r24, r24
    1f9e:	99 1f       	adc	r25, r25
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	88 0f       	add	r24, r24
    1fa6:	99 1f       	adc	r25, r25
    1fa8:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	a8 e4       	ldi	r26, 0x48	; 72
    1fb2:	b2 e4       	ldi	r27, 0x42	; 66
    1fb4:	8d 8b       	std	Y+21, r24	; 0x15
    1fb6:	9e 8b       	std	Y+22, r25	; 0x16
    1fb8:	af 8b       	std	Y+23, r26	; 0x17
    1fba:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fbc:	6d 89       	ldd	r22, Y+21	; 0x15
    1fbe:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc4:	2b ea       	ldi	r18, 0xAB	; 171
    1fc6:	3a ea       	ldi	r19, 0xAA	; 170
    1fc8:	4a e2       	ldi	r20, 0x2A	; 42
    1fca:	50 e4       	ldi	r21, 0x40	; 64
    1fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	89 8b       	std	Y+17, r24	; 0x11
    1fd6:	9a 8b       	std	Y+18, r25	; 0x12
    1fd8:	ab 8b       	std	Y+19, r26	; 0x13
    1fda:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1fdc:	69 89       	ldd	r22, Y+17	; 0x11
    1fde:	7a 89       	ldd	r23, Y+18	; 0x12
    1fe0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	40 e8       	ldi	r20, 0x80	; 128
    1fea:	5f e3       	ldi	r21, 0x3F	; 63
    1fec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ff0:	88 23       	and	r24, r24
    1ff2:	1c f4       	brge	.+6      	; 0x1ffa <LCD_voidDrawCustomeCharPos+0x84>
		__ticks = 1;
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	88 8b       	std	Y+16, r24	; 0x10
    1ff8:	91 c0       	rjmp	.+290    	; 0x211c <LCD_voidDrawCustomeCharPos+0x1a6>
	else if (__tmp > 255)
    1ffa:	69 89       	ldd	r22, Y+17	; 0x11
    1ffc:	7a 89       	ldd	r23, Y+18	; 0x12
    1ffe:	8b 89       	ldd	r24, Y+19	; 0x13
    2000:	9c 89       	ldd	r25, Y+20	; 0x14
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	4f e7       	ldi	r20, 0x7F	; 127
    2008:	53 e4       	ldi	r21, 0x43	; 67
    200a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    200e:	18 16       	cp	r1, r24
    2010:	0c f0       	brlt	.+2      	; 0x2014 <LCD_voidDrawCustomeCharPos+0x9e>
    2012:	7b c0       	rjmp	.+246    	; 0x210a <LCD_voidDrawCustomeCharPos+0x194>
	{
		_delay_ms(__us / 1000.0);
    2014:	6d 89       	ldd	r22, Y+21	; 0x15
    2016:	7e 89       	ldd	r23, Y+22	; 0x16
    2018:	8f 89       	ldd	r24, Y+23	; 0x17
    201a:	98 8d       	ldd	r25, Y+24	; 0x18
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	4a e7       	ldi	r20, 0x7A	; 122
    2022:	54 e4       	ldi	r21, 0x44	; 68
    2024:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	8c 87       	std	Y+12, r24	; 0x0c
    202e:	9d 87       	std	Y+13, r25	; 0x0d
    2030:	ae 87       	std	Y+14, r26	; 0x0e
    2032:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2034:	6c 85       	ldd	r22, Y+12	; 0x0c
    2036:	7d 85       	ldd	r23, Y+13	; 0x0d
    2038:	8e 85       	ldd	r24, Y+14	; 0x0e
    203a:	9f 85       	ldd	r25, Y+15	; 0x0f
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	4a ef       	ldi	r20, 0xFA	; 250
    2042:	54 e4       	ldi	r21, 0x44	; 68
    2044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	88 87       	std	Y+8, r24	; 0x08
    204e:	99 87       	std	Y+9, r25	; 0x09
    2050:	aa 87       	std	Y+10, r26	; 0x0a
    2052:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2054:	68 85       	ldd	r22, Y+8	; 0x08
    2056:	79 85       	ldd	r23, Y+9	; 0x09
    2058:	8a 85       	ldd	r24, Y+10	; 0x0a
    205a:	9b 85       	ldd	r25, Y+11	; 0x0b
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e8       	ldi	r20, 0x80	; 128
    2062:	5f e3       	ldi	r21, 0x3F	; 63
    2064:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2068:	88 23       	and	r24, r24
    206a:	2c f4       	brge	.+10     	; 0x2076 <LCD_voidDrawCustomeCharPos+0x100>
		__ticks = 1;
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	9f 83       	std	Y+7, r25	; 0x07
    2072:	8e 83       	std	Y+6, r24	; 0x06
    2074:	3f c0       	rjmp	.+126    	; 0x20f4 <LCD_voidDrawCustomeCharPos+0x17e>
	else if (__tmp > 65535)
    2076:	68 85       	ldd	r22, Y+8	; 0x08
    2078:	79 85       	ldd	r23, Y+9	; 0x09
    207a:	8a 85       	ldd	r24, Y+10	; 0x0a
    207c:	9b 85       	ldd	r25, Y+11	; 0x0b
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	3f ef       	ldi	r19, 0xFF	; 255
    2082:	4f e7       	ldi	r20, 0x7F	; 127
    2084:	57 e4       	ldi	r21, 0x47	; 71
    2086:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    208a:	18 16       	cp	r1, r24
    208c:	4c f5       	brge	.+82     	; 0x20e0 <LCD_voidDrawCustomeCharPos+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2090:	7d 85       	ldd	r23, Y+13	; 0x0d
    2092:	8e 85       	ldd	r24, Y+14	; 0x0e
    2094:	9f 85       	ldd	r25, Y+15	; 0x0f
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	40 e2       	ldi	r20, 0x20	; 32
    209c:	51 e4       	ldi	r21, 0x41	; 65
    209e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	bc 01       	movw	r22, r24
    20a8:	cd 01       	movw	r24, r26
    20aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	9f 83       	std	Y+7, r25	; 0x07
    20b4:	8e 83       	std	Y+6, r24	; 0x06
    20b6:	0f c0       	rjmp	.+30     	; 0x20d6 <LCD_voidDrawCustomeCharPos+0x160>
    20b8:	88 ec       	ldi	r24, 0xC8	; 200
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	9d 83       	std	Y+5, r25	; 0x05
    20be:	8c 83       	std	Y+4, r24	; 0x04
    20c0:	8c 81       	ldd	r24, Y+4	; 0x04
    20c2:	9d 81       	ldd	r25, Y+5	; 0x05
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	f1 f7       	brne	.-4      	; 0x20c4 <LCD_voidDrawCustomeCharPos+0x14e>
    20c8:	9d 83       	std	Y+5, r25	; 0x05
    20ca:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20cc:	8e 81       	ldd	r24, Y+6	; 0x06
    20ce:	9f 81       	ldd	r25, Y+7	; 0x07
    20d0:	01 97       	sbiw	r24, 0x01	; 1
    20d2:	9f 83       	std	Y+7, r25	; 0x07
    20d4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d6:	8e 81       	ldd	r24, Y+6	; 0x06
    20d8:	9f 81       	ldd	r25, Y+7	; 0x07
    20da:	00 97       	sbiw	r24, 0x00	; 0
    20dc:	69 f7       	brne	.-38     	; 0x20b8 <LCD_voidDrawCustomeCharPos+0x142>
    20de:	24 c0       	rjmp	.+72     	; 0x2128 <LCD_voidDrawCustomeCharPos+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e0:	68 85       	ldd	r22, Y+8	; 0x08
    20e2:	79 85       	ldd	r23, Y+9	; 0x09
    20e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    20e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    20e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	9f 83       	std	Y+7, r25	; 0x07
    20f2:	8e 83       	std	Y+6, r24	; 0x06
    20f4:	8e 81       	ldd	r24, Y+6	; 0x06
    20f6:	9f 81       	ldd	r25, Y+7	; 0x07
    20f8:	9b 83       	std	Y+3, r25	; 0x03
    20fa:	8a 83       	std	Y+2, r24	; 0x02
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	f1 f7       	brne	.-4      	; 0x2100 <LCD_voidDrawCustomeCharPos+0x18a>
    2104:	9b 83       	std	Y+3, r25	; 0x03
    2106:	8a 83       	std	Y+2, r24	; 0x02
    2108:	0f c0       	rjmp	.+30     	; 0x2128 <LCD_voidDrawCustomeCharPos+0x1b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    210a:	69 89       	ldd	r22, Y+17	; 0x11
    210c:	7a 89       	ldd	r23, Y+18	; 0x12
    210e:	8b 89       	ldd	r24, Y+19	; 0x13
    2110:	9c 89       	ldd	r25, Y+20	; 0x14
    2112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	88 8b       	std	Y+16, r24	; 0x10
    211c:	88 89       	ldd	r24, Y+16	; 0x10
    211e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	8a 95       	dec	r24
    2124:	f1 f7       	brne	.-4      	; 0x2122 <LCD_voidDrawCustomeCharPos+0x1ac>
    2126:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);

	for(u8 i=0;i<8;i++)
    2128:	19 8e       	std	Y+25, r1	; 0x19
    212a:	0e c0       	rjmp	.+28     	; 0x2148 <LCD_voidDrawCustomeCharPos+0x1d2>
	{
		LCD_voidSendData(Copy_u8PAChar[i]);
    212c:	89 8d       	ldd	r24, Y+25	; 0x19
    212e:	28 2f       	mov	r18, r24
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2134:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2136:	fc 01       	movw	r30, r24
    2138:	e2 0f       	add	r30, r18
    213a:	f3 1f       	adc	r31, r19
    213c:	80 81       	ld	r24, Z
    213e:	0e 94 1c 0c 	call	0x1838	; 0x1838 <LCD_voidSendData>
void LCD_voidDrawCustomeCharPos(u8 *Copy_u8PAChar,u8 Copy_u8CharAddress,u8 Copy_u8Row,u8 Copy_u8Coulmn)
{
	LCD_voidSendCommand(LCD_CGRAM_START + (Copy_u8CharAddress*8));
	_delay_us(50);

	for(u8 i=0;i<8;i++)
    2142:	89 8d       	ldd	r24, Y+25	; 0x19
    2144:	8f 5f       	subi	r24, 0xFF	; 255
    2146:	89 8f       	std	Y+25, r24	; 0x19
    2148:	89 8d       	ldd	r24, Y+25	; 0x19
    214a:	88 30       	cpi	r24, 0x08	; 8
    214c:	78 f3       	brcs	.-34     	; 0x212c <LCD_voidDrawCustomeCharPos+0x1b6>
	{
		LCD_voidSendData(Copy_u8PAChar[i]);
	}
	LCD_voidSendDataPos(Copy_u8CharAddress,Copy_u8Row,Copy_u8Coulmn);
    214e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2150:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2152:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2154:	0e 94 36 0c 	call	0x186c	; 0x186c <LCD_voidSendDataPos>
}
    2158:	6e 96       	adiw	r28, 0x1e	; 30
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	f8 94       	cli
    215e:	de bf       	out	0x3e, r29	; 62
    2160:	0f be       	out	0x3f, r0	; 63
    2162:	cd bf       	out	0x3d, r28	; 61
    2164:	cf 91       	pop	r28
    2166:	df 91       	pop	r29
    2168:	08 95       	ret

0000216a <LCD_4BitvoidInit>:




void LCD_4BitvoidInit(void)
{
    216a:	df 93       	push	r29
    216c:	cf 93       	push	r28
    216e:	cd b7       	in	r28, 0x3d	; 61
    2170:	de b7       	in	r29, 0x3e	; 62
    2172:	e4 97       	sbiw	r28, 0x34	; 52
    2174:	0f b6       	in	r0, 0x3f	; 63
    2176:	f8 94       	cli
    2178:	de bf       	out	0x3e, r29	; 62
    217a:	0f be       	out	0x3f, r0	; 63
    217c:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinDirection(LCD_DATA_PORT,DIO_PIN0,DIO_OUTPUT);
    217e:	83 e0       	ldi	r24, 0x03	; 3
    2180:	60 e0       	ldi	r22, 0x00	; 0
    2182:	41 e0       	ldi	r20, 0x01	; 1
    2184:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT,DIO_PIN1,DIO_OUTPUT);
    2188:	83 e0       	ldi	r24, 0x03	; 3
    218a:	61 e0       	ldi	r22, 0x01	; 1
    218c:	41 e0       	ldi	r20, 0x01	; 1
    218e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT,DIO_PIN2,DIO_OUTPUT);
    2192:	83 e0       	ldi	r24, 0x03	; 3
    2194:	62 e0       	ldi	r22, 0x02	; 2
    2196:	41 e0       	ldi	r20, 0x01	; 1
    2198:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT,DIO_PIN3,DIO_OUTPUT);
    219c:	83 e0       	ldi	r24, 0x03	; 3
    219e:	63 e0       	ldi	r22, 0x03	; 3
    21a0:	41 e0       	ldi	r20, 0x01	; 1
    21a2:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(LCD_CONTROL_PORT,DIO_PIN0,DIO_OUTPUT);
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	60 e0       	ldi	r22, 0x00	; 0
    21aa:	41 e0       	ldi	r20, 0x01	; 1
    21ac:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT,DIO_PIN1,DIO_OUTPUT);
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	61 e0       	ldi	r22, 0x01	; 1
    21b4:	41 e0       	ldi	r20, 0x01	; 1
    21b6:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT,DIO_PIN2,DIO_OUTPUT);
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	62 e0       	ldi	r22, 0x02	; 2
    21be:	41 e0       	ldi	r20, 0x01	; 1
    21c0:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <DIO_voidSetPinDirection>
    21c4:	80 e0       	ldi	r24, 0x00	; 0
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	a0 ea       	ldi	r26, 0xA0	; 160
    21ca:	b1 e4       	ldi	r27, 0x41	; 65
    21cc:	89 ab       	std	Y+49, r24	; 0x31
    21ce:	9a ab       	std	Y+50, r25	; 0x32
    21d0:	ab ab       	std	Y+51, r26	; 0x33
    21d2:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d4:	69 a9       	ldd	r22, Y+49	; 0x31
    21d6:	7a a9       	ldd	r23, Y+50	; 0x32
    21d8:	8b a9       	ldd	r24, Y+51	; 0x33
    21da:	9c a9       	ldd	r25, Y+52	; 0x34
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	4a ef       	ldi	r20, 0xFA	; 250
    21e2:	54 e4       	ldi	r21, 0x44	; 68
    21e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	8d a7       	std	Y+45, r24	; 0x2d
    21ee:	9e a7       	std	Y+46, r25	; 0x2e
    21f0:	af a7       	std	Y+47, r26	; 0x2f
    21f2:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    21f4:	6d a5       	ldd	r22, Y+45	; 0x2d
    21f6:	7e a5       	ldd	r23, Y+46	; 0x2e
    21f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    21fa:	98 a9       	ldd	r25, Y+48	; 0x30
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	40 e8       	ldi	r20, 0x80	; 128
    2202:	5f e3       	ldi	r21, 0x3F	; 63
    2204:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2208:	88 23       	and	r24, r24
    220a:	2c f4       	brge	.+10     	; 0x2216 <LCD_4BitvoidInit+0xac>
		__ticks = 1;
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	9c a7       	std	Y+44, r25	; 0x2c
    2212:	8b a7       	std	Y+43, r24	; 0x2b
    2214:	3f c0       	rjmp	.+126    	; 0x2294 <LCD_4BitvoidInit+0x12a>
	else if (__tmp > 65535)
    2216:	6d a5       	ldd	r22, Y+45	; 0x2d
    2218:	7e a5       	ldd	r23, Y+46	; 0x2e
    221a:	8f a5       	ldd	r24, Y+47	; 0x2f
    221c:	98 a9       	ldd	r25, Y+48	; 0x30
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	3f ef       	ldi	r19, 0xFF	; 255
    2222:	4f e7       	ldi	r20, 0x7F	; 127
    2224:	57 e4       	ldi	r21, 0x47	; 71
    2226:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    222a:	18 16       	cp	r1, r24
    222c:	4c f5       	brge	.+82     	; 0x2280 <LCD_4BitvoidInit+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    222e:	69 a9       	ldd	r22, Y+49	; 0x31
    2230:	7a a9       	ldd	r23, Y+50	; 0x32
    2232:	8b a9       	ldd	r24, Y+51	; 0x33
    2234:	9c a9       	ldd	r25, Y+52	; 0x34
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e2       	ldi	r20, 0x20	; 32
    223c:	51 e4       	ldi	r21, 0x41	; 65
    223e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	bc 01       	movw	r22, r24
    2248:	cd 01       	movw	r24, r26
    224a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	9c a7       	std	Y+44, r25	; 0x2c
    2254:	8b a7       	std	Y+43, r24	; 0x2b
    2256:	0f c0       	rjmp	.+30     	; 0x2276 <LCD_4BitvoidInit+0x10c>
    2258:	88 ec       	ldi	r24, 0xC8	; 200
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	9a a7       	std	Y+42, r25	; 0x2a
    225e:	89 a7       	std	Y+41, r24	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2260:	89 a5       	ldd	r24, Y+41	; 0x29
    2262:	9a a5       	ldd	r25, Y+42	; 0x2a
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	f1 f7       	brne	.-4      	; 0x2264 <LCD_4BitvoidInit+0xfa>
    2268:	9a a7       	std	Y+42, r25	; 0x2a
    226a:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    226c:	8b a5       	ldd	r24, Y+43	; 0x2b
    226e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	9c a7       	std	Y+44, r25	; 0x2c
    2274:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2276:	8b a5       	ldd	r24, Y+43	; 0x2b
    2278:	9c a5       	ldd	r25, Y+44	; 0x2c
    227a:	00 97       	sbiw	r24, 0x00	; 0
    227c:	69 f7       	brne	.-38     	; 0x2258 <LCD_4BitvoidInit+0xee>
    227e:	14 c0       	rjmp	.+40     	; 0x22a8 <LCD_4BitvoidInit+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2280:	6d a5       	ldd	r22, Y+45	; 0x2d
    2282:	7e a5       	ldd	r23, Y+46	; 0x2e
    2284:	8f a5       	ldd	r24, Y+47	; 0x2f
    2286:	98 a9       	ldd	r25, Y+48	; 0x30
    2288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	9c a7       	std	Y+44, r25	; 0x2c
    2292:	8b a7       	std	Y+43, r24	; 0x2b
    2294:	8b a5       	ldd	r24, Y+43	; 0x2b
    2296:	9c a5       	ldd	r25, Y+44	; 0x2c
    2298:	98 a7       	std	Y+40, r25	; 0x28
    229a:	8f a3       	std	Y+39, r24	; 0x27
    229c:	8f a1       	ldd	r24, Y+39	; 0x27
    229e:	98 a5       	ldd	r25, Y+40	; 0x28
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	f1 f7       	brne	.-4      	; 0x22a0 <LCD_4BitvoidInit+0x136>
    22a4:	98 a7       	std	Y+40, r25	; 0x28
    22a6:	8f a3       	std	Y+39, r24	; 0x27

	 _delay_ms(20);
	 LCD_4Bit_voidSendCommand(LCD_8BIT_FUNC_SET);
    22a8:	88 e3       	ldi	r24, 0x38	; 56
    22aa:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_4Bit_voidSendCommand>
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	a0 ea       	ldi	r26, 0xA0	; 160
    22b4:	b0 e4       	ldi	r27, 0x40	; 64
    22b6:	8b a3       	std	Y+35, r24	; 0x23
    22b8:	9c a3       	std	Y+36, r25	; 0x24
    22ba:	ad a3       	std	Y+37, r26	; 0x25
    22bc:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22be:	6b a1       	ldd	r22, Y+35	; 0x23
    22c0:	7c a1       	ldd	r23, Y+36	; 0x24
    22c2:	8d a1       	ldd	r24, Y+37	; 0x25
    22c4:	9e a1       	ldd	r25, Y+38	; 0x26
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	4a ef       	ldi	r20, 0xFA	; 250
    22cc:	54 e4       	ldi	r21, 0x44	; 68
    22ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	8f 8f       	std	Y+31, r24	; 0x1f
    22d8:	98 a3       	std	Y+32, r25	; 0x20
    22da:	a9 a3       	std	Y+33, r26	; 0x21
    22dc:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    22de:	6f 8d       	ldd	r22, Y+31	; 0x1f
    22e0:	78 a1       	ldd	r23, Y+32	; 0x20
    22e2:	89 a1       	ldd	r24, Y+33	; 0x21
    22e4:	9a a1       	ldd	r25, Y+34	; 0x22
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	40 e8       	ldi	r20, 0x80	; 128
    22ec:	5f e3       	ldi	r21, 0x3F	; 63
    22ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22f2:	88 23       	and	r24, r24
    22f4:	2c f4       	brge	.+10     	; 0x2300 <LCD_4BitvoidInit+0x196>
		__ticks = 1;
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	9e 8f       	std	Y+30, r25	; 0x1e
    22fc:	8d 8f       	std	Y+29, r24	; 0x1d
    22fe:	3f c0       	rjmp	.+126    	; 0x237e <LCD_4BitvoidInit+0x214>
	else if (__tmp > 65535)
    2300:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2302:	78 a1       	ldd	r23, Y+32	; 0x20
    2304:	89 a1       	ldd	r24, Y+33	; 0x21
    2306:	9a a1       	ldd	r25, Y+34	; 0x22
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	3f ef       	ldi	r19, 0xFF	; 255
    230c:	4f e7       	ldi	r20, 0x7F	; 127
    230e:	57 e4       	ldi	r21, 0x47	; 71
    2310:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2314:	18 16       	cp	r1, r24
    2316:	4c f5       	brge	.+82     	; 0x236a <LCD_4BitvoidInit+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2318:	6b a1       	ldd	r22, Y+35	; 0x23
    231a:	7c a1       	ldd	r23, Y+36	; 0x24
    231c:	8d a1       	ldd	r24, Y+37	; 0x25
    231e:	9e a1       	ldd	r25, Y+38	; 0x26
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e2       	ldi	r20, 0x20	; 32
    2326:	51 e4       	ldi	r21, 0x41	; 65
    2328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	bc 01       	movw	r22, r24
    2332:	cd 01       	movw	r24, r26
    2334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	9e 8f       	std	Y+30, r25	; 0x1e
    233e:	8d 8f       	std	Y+29, r24	; 0x1d
    2340:	0f c0       	rjmp	.+30     	; 0x2360 <LCD_4BitvoidInit+0x1f6>
    2342:	88 ec       	ldi	r24, 0xC8	; 200
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	9c 8f       	std	Y+28, r25	; 0x1c
    2348:	8b 8f       	std	Y+27, r24	; 0x1b
    234a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    234c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	f1 f7       	brne	.-4      	; 0x234e <LCD_4BitvoidInit+0x1e4>
    2352:	9c 8f       	std	Y+28, r25	; 0x1c
    2354:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2356:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2358:	9e 8d       	ldd	r25, Y+30	; 0x1e
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	9e 8f       	std	Y+30, r25	; 0x1e
    235e:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2360:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2362:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2364:	00 97       	sbiw	r24, 0x00	; 0
    2366:	69 f7       	brne	.-38     	; 0x2342 <LCD_4BitvoidInit+0x1d8>
    2368:	14 c0       	rjmp	.+40     	; 0x2392 <LCD_4BitvoidInit+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    236a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    236c:	78 a1       	ldd	r23, Y+32	; 0x20
    236e:	89 a1       	ldd	r24, Y+33	; 0x21
    2370:	9a a1       	ldd	r25, Y+34	; 0x22
    2372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	9e 8f       	std	Y+30, r25	; 0x1e
    237c:	8d 8f       	std	Y+29, r24	; 0x1d
    237e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2380:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2382:	9a 8f       	std	Y+26, r25	; 0x1a
    2384:	89 8f       	std	Y+25, r24	; 0x19
    2386:	89 8d       	ldd	r24, Y+25	; 0x19
    2388:	9a 8d       	ldd	r25, Y+26	; 0x1a
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	f1 f7       	brne	.-4      	; 0x238a <LCD_4BitvoidInit+0x220>
    238e:	9a 8f       	std	Y+26, r25	; 0x1a
    2390:	89 8f       	std	Y+25, r24	; 0x19
	 _delay_ms(5);
	 LCD_4Bit_voidSendCommand(LCD_8BIT_FUNC_SET);
    2392:	88 e3       	ldi	r24, 0x38	; 56
    2394:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_4Bit_voidSendCommand>
    2398:	80 e0       	ldi	r24, 0x00	; 0
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	a6 e1       	ldi	r26, 0x16	; 22
    239e:	b3 e4       	ldi	r27, 0x43	; 67
    23a0:	8d 8b       	std	Y+21, r24	; 0x15
    23a2:	9e 8b       	std	Y+22, r25	; 0x16
    23a4:	af 8b       	std	Y+23, r26	; 0x17
    23a6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23a8:	6d 89       	ldd	r22, Y+21	; 0x15
    23aa:	7e 89       	ldd	r23, Y+22	; 0x16
    23ac:	8f 89       	ldd	r24, Y+23	; 0x17
    23ae:	98 8d       	ldd	r25, Y+24	; 0x18
    23b0:	2b ea       	ldi	r18, 0xAB	; 171
    23b2:	3a ea       	ldi	r19, 0xAA	; 170
    23b4:	4a e2       	ldi	r20, 0x2A	; 42
    23b6:	50 e4       	ldi	r21, 0x40	; 64
    23b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	89 8b       	std	Y+17, r24	; 0x11
    23c2:	9a 8b       	std	Y+18, r25	; 0x12
    23c4:	ab 8b       	std	Y+19, r26	; 0x13
    23c6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    23c8:	69 89       	ldd	r22, Y+17	; 0x11
    23ca:	7a 89       	ldd	r23, Y+18	; 0x12
    23cc:	8b 89       	ldd	r24, Y+19	; 0x13
    23ce:	9c 89       	ldd	r25, Y+20	; 0x14
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	40 e8       	ldi	r20, 0x80	; 128
    23d6:	5f e3       	ldi	r21, 0x3F	; 63
    23d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23dc:	88 23       	and	r24, r24
    23de:	1c f4       	brge	.+6      	; 0x23e6 <LCD_4BitvoidInit+0x27c>
		__ticks = 1;
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	88 8b       	std	Y+16, r24	; 0x10
    23e4:	91 c0       	rjmp	.+290    	; 0x2508 <LCD_4BitvoidInit+0x39e>
	else if (__tmp > 255)
    23e6:	69 89       	ldd	r22, Y+17	; 0x11
    23e8:	7a 89       	ldd	r23, Y+18	; 0x12
    23ea:	8b 89       	ldd	r24, Y+19	; 0x13
    23ec:	9c 89       	ldd	r25, Y+20	; 0x14
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	4f e7       	ldi	r20, 0x7F	; 127
    23f4:	53 e4       	ldi	r21, 0x43	; 67
    23f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23fa:	18 16       	cp	r1, r24
    23fc:	0c f0       	brlt	.+2      	; 0x2400 <LCD_4BitvoidInit+0x296>
    23fe:	7b c0       	rjmp	.+246    	; 0x24f6 <LCD_4BitvoidInit+0x38c>
	{
		_delay_ms(__us / 1000.0);
    2400:	6d 89       	ldd	r22, Y+21	; 0x15
    2402:	7e 89       	ldd	r23, Y+22	; 0x16
    2404:	8f 89       	ldd	r24, Y+23	; 0x17
    2406:	98 8d       	ldd	r25, Y+24	; 0x18
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	4a e7       	ldi	r20, 0x7A	; 122
    240e:	54 e4       	ldi	r21, 0x44	; 68
    2410:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	8c 87       	std	Y+12, r24	; 0x0c
    241a:	9d 87       	std	Y+13, r25	; 0x0d
    241c:	ae 87       	std	Y+14, r26	; 0x0e
    241e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2420:	6c 85       	ldd	r22, Y+12	; 0x0c
    2422:	7d 85       	ldd	r23, Y+13	; 0x0d
    2424:	8e 85       	ldd	r24, Y+14	; 0x0e
    2426:	9f 85       	ldd	r25, Y+15	; 0x0f
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	4a ef       	ldi	r20, 0xFA	; 250
    242e:	54 e4       	ldi	r21, 0x44	; 68
    2430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	88 87       	std	Y+8, r24	; 0x08
    243a:	99 87       	std	Y+9, r25	; 0x09
    243c:	aa 87       	std	Y+10, r26	; 0x0a
    243e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2440:	68 85       	ldd	r22, Y+8	; 0x08
    2442:	79 85       	ldd	r23, Y+9	; 0x09
    2444:	8a 85       	ldd	r24, Y+10	; 0x0a
    2446:	9b 85       	ldd	r25, Y+11	; 0x0b
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	40 e8       	ldi	r20, 0x80	; 128
    244e:	5f e3       	ldi	r21, 0x3F	; 63
    2450:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2454:	88 23       	and	r24, r24
    2456:	2c f4       	brge	.+10     	; 0x2462 <LCD_4BitvoidInit+0x2f8>
		__ticks = 1;
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	9f 83       	std	Y+7, r25	; 0x07
    245e:	8e 83       	std	Y+6, r24	; 0x06
    2460:	3f c0       	rjmp	.+126    	; 0x24e0 <LCD_4BitvoidInit+0x376>
	else if (__tmp > 65535)
    2462:	68 85       	ldd	r22, Y+8	; 0x08
    2464:	79 85       	ldd	r23, Y+9	; 0x09
    2466:	8a 85       	ldd	r24, Y+10	; 0x0a
    2468:	9b 85       	ldd	r25, Y+11	; 0x0b
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	3f ef       	ldi	r19, 0xFF	; 255
    246e:	4f e7       	ldi	r20, 0x7F	; 127
    2470:	57 e4       	ldi	r21, 0x47	; 71
    2472:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2476:	18 16       	cp	r1, r24
    2478:	4c f5       	brge	.+82     	; 0x24cc <LCD_4BitvoidInit+0x362>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    247a:	6c 85       	ldd	r22, Y+12	; 0x0c
    247c:	7d 85       	ldd	r23, Y+13	; 0x0d
    247e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2480:	9f 85       	ldd	r25, Y+15	; 0x0f
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	40 e2       	ldi	r20, 0x20	; 32
    2488:	51 e4       	ldi	r21, 0x41	; 65
    248a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	bc 01       	movw	r22, r24
    2494:	cd 01       	movw	r24, r26
    2496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	9f 83       	std	Y+7, r25	; 0x07
    24a0:	8e 83       	std	Y+6, r24	; 0x06
    24a2:	0f c0       	rjmp	.+30     	; 0x24c2 <LCD_4BitvoidInit+0x358>
    24a4:	88 ec       	ldi	r24, 0xC8	; 200
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	9d 83       	std	Y+5, r25	; 0x05
    24aa:	8c 83       	std	Y+4, r24	; 0x04
    24ac:	8c 81       	ldd	r24, Y+4	; 0x04
    24ae:	9d 81       	ldd	r25, Y+5	; 0x05
    24b0:	01 97       	sbiw	r24, 0x01	; 1
    24b2:	f1 f7       	brne	.-4      	; 0x24b0 <LCD_4BitvoidInit+0x346>
    24b4:	9d 83       	std	Y+5, r25	; 0x05
    24b6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b8:	8e 81       	ldd	r24, Y+6	; 0x06
    24ba:	9f 81       	ldd	r25, Y+7	; 0x07
    24bc:	01 97       	sbiw	r24, 0x01	; 1
    24be:	9f 83       	std	Y+7, r25	; 0x07
    24c0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c2:	8e 81       	ldd	r24, Y+6	; 0x06
    24c4:	9f 81       	ldd	r25, Y+7	; 0x07
    24c6:	00 97       	sbiw	r24, 0x00	; 0
    24c8:	69 f7       	brne	.-38     	; 0x24a4 <LCD_4BitvoidInit+0x33a>
    24ca:	24 c0       	rjmp	.+72     	; 0x2514 <LCD_4BitvoidInit+0x3aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24cc:	68 85       	ldd	r22, Y+8	; 0x08
    24ce:	79 85       	ldd	r23, Y+9	; 0x09
    24d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    24d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    24d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	9f 83       	std	Y+7, r25	; 0x07
    24de:	8e 83       	std	Y+6, r24	; 0x06
    24e0:	8e 81       	ldd	r24, Y+6	; 0x06
    24e2:	9f 81       	ldd	r25, Y+7	; 0x07
    24e4:	9b 83       	std	Y+3, r25	; 0x03
    24e6:	8a 83       	std	Y+2, r24	; 0x02
    24e8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ea:	9b 81       	ldd	r25, Y+3	; 0x03
    24ec:	01 97       	sbiw	r24, 0x01	; 1
    24ee:	f1 f7       	brne	.-4      	; 0x24ec <LCD_4BitvoidInit+0x382>
    24f0:	9b 83       	std	Y+3, r25	; 0x03
    24f2:	8a 83       	std	Y+2, r24	; 0x02
    24f4:	0f c0       	rjmp	.+30     	; 0x2514 <LCD_4BitvoidInit+0x3aa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24f6:	69 89       	ldd	r22, Y+17	; 0x11
    24f8:	7a 89       	ldd	r23, Y+18	; 0x12
    24fa:	8b 89       	ldd	r24, Y+19	; 0x13
    24fc:	9c 89       	ldd	r25, Y+20	; 0x14
    24fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	88 8b       	std	Y+16, r24	; 0x10
    2508:	88 89       	ldd	r24, Y+16	; 0x10
    250a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    250c:	89 81       	ldd	r24, Y+1	; 0x01
    250e:	8a 95       	dec	r24
    2510:	f1 f7       	brne	.-4      	; 0x250e <LCD_4BitvoidInit+0x3a4>
    2512:	89 83       	std	Y+1, r24	; 0x01
	 _delay_us(150);
	 LCD_4Bit_voidSendCommand(LCD_8BIT_FUNC_SET);
    2514:	88 e3       	ldi	r24, 0x38	; 56
    2516:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_4Bit_voidSendCommand>
	 LCD_4Bit_voidSendCommand(LCD_CLEAR_DISBLAY);
    251a:	81 e0       	ldi	r24, 0x01	; 1
    251c:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_4Bit_voidSendCommand>
	 LCD_4Bit_voidSendCommand(LCD_RETURN_HOME);
    2520:	82 e0       	ldi	r24, 0x02	; 2
    2522:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_4Bit_voidSendCommand>
	 LCD_4Bit_voidSendCommand(LCD_ENTERY_MODE);
    2526:	86 e0       	ldi	r24, 0x06	; 6
    2528:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_4Bit_voidSendCommand>
	 LCD_4Bit_voidSendCommand(LCD_DISBLAY_ON_OFF);
    252c:	8c e0       	ldi	r24, 0x0C	; 12
    252e:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_4Bit_voidSendCommand>
	 LCD_4Bit_voidSendCommand(LCD_4BIT_FUNC_SET);
    2532:	88 e2       	ldi	r24, 0x28	; 40
    2534:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_4Bit_voidSendCommand>
	 LCD_4Bit_voidSendCommand(DDRAM_START);
    2538:	80 e8       	ldi	r24, 0x80	; 128
    253a:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_4Bit_voidSendCommand>



}
    253e:	e4 96       	adiw	r28, 0x34	; 52
    2540:	0f b6       	in	r0, 0x3f	; 63
    2542:	f8 94       	cli
    2544:	de bf       	out	0x3e, r29	; 62
    2546:	0f be       	out	0x3f, r0	; 63
    2548:	cd bf       	out	0x3d, r28	; 61
    254a:	cf 91       	pop	r28
    254c:	df 91       	pop	r29
    254e:	08 95       	ret

00002550 <LCD_4Bit_voidSendCommand>:



void LCD_4Bit_voidSendCommand(u8 Copy_u8Command)
{
    2550:	df 93       	push	r29
    2552:	cf 93       	push	r28
    2554:	0f 92       	push	r0
    2556:	cd b7       	in	r28, 0x3d	; 61
    2558:	de b7       	in	r29, 0x3e	; 62
    255a:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinvalue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_LOW);
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	61 e0       	ldi	r22, 0x01	; 1
    2560:	40 e0       	ldi	r20, 0x00	; 0
    2562:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_LOW);
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	62 e0       	ldi	r22, 0x02	; 2
    256a:	40 e0       	ldi	r20, 0x00	; 0
    256c:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_voidSetPinvalue>

	LCD_voidSend4Bit(Copy_u8Command>>4);
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	82 95       	swap	r24
    2574:	8f 70       	andi	r24, 0x0F	; 15
    2576:	0e 94 94 14 	call	0x2928	; 0x2928 <LCD_voidSend4Bit>
	LCD_voidSendEnable();
    257a:	0e 94 c4 14 	call	0x2988	; 0x2988 <LCD_voidSendEnable>
	LCD_voidSend4Bit(Copy_u8Command);
    257e:	89 81       	ldd	r24, Y+1	; 0x01
    2580:	0e 94 94 14 	call	0x2928	; 0x2928 <LCD_voidSend4Bit>
	LCD_voidSendEnable();
    2584:	0e 94 c4 14 	call	0x2988	; 0x2988 <LCD_voidSendEnable>

}
    2588:	0f 90       	pop	r0
    258a:	cf 91       	pop	r28
    258c:	df 91       	pop	r29
    258e:	08 95       	ret

00002590 <LCD_4Bit_voidSendData>:

void LCD_4Bit_voidSendData(u8 Copy_u8Data)
{
    2590:	df 93       	push	r29
    2592:	cf 93       	push	r28
    2594:	0f 92       	push	r0
    2596:	cd b7       	in	r28, 0x3d	; 61
    2598:	de b7       	in	r29, 0x3e	; 62
    259a:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinvalue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_HIGH);
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	61 e0       	ldi	r22, 0x01	; 1
    25a0:	41 e0       	ldi	r20, 0x01	; 1
    25a2:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_LOW);
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	62 e0       	ldi	r22, 0x02	; 2
    25aa:	40 e0       	ldi	r20, 0x00	; 0
    25ac:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_voidSetPinvalue>

	LCD_voidSend4Bit(Copy_u8Data>>4);
    25b0:	89 81       	ldd	r24, Y+1	; 0x01
    25b2:	82 95       	swap	r24
    25b4:	8f 70       	andi	r24, 0x0F	; 15
    25b6:	0e 94 94 14 	call	0x2928	; 0x2928 <LCD_voidSend4Bit>
	LCD_voidSendEnable();
    25ba:	0e 94 c4 14 	call	0x2988	; 0x2988 <LCD_voidSendEnable>
	LCD_voidSend4Bit(Copy_u8Data);
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	0e 94 94 14 	call	0x2928	; 0x2928 <LCD_voidSend4Bit>
	LCD_voidSendEnable();
    25c4:	0e 94 c4 14 	call	0x2988	; 0x2988 <LCD_voidSendEnable>

}
    25c8:	0f 90       	pop	r0
    25ca:	cf 91       	pop	r28
    25cc:	df 91       	pop	r29
    25ce:	08 95       	ret

000025d0 <LCD_4Bit_voidSendDataPos>:

void LCD_4Bit_voidSendDataPos(u8 Copy_u8Data,u8 Copy_u8Row,u8 Copy_u8Coulmn)
{
    25d0:	df 93       	push	r29
    25d2:	cf 93       	push	r28
    25d4:	00 d0       	rcall	.+0      	; 0x25d6 <LCD_4Bit_voidSendDataPos+0x6>
    25d6:	0f 92       	push	r0
    25d8:	cd b7       	in	r28, 0x3d	; 61
    25da:	de b7       	in	r29, 0x3e	; 62
    25dc:	89 83       	std	Y+1, r24	; 0x01
    25de:	6a 83       	std	Y+2, r22	; 0x02
    25e0:	4b 83       	std	Y+3, r20	; 0x03
	LCD_4Bit_voidSetCursor(Copy_u8Row,Copy_u8Coulmn);
    25e2:	8a 81       	ldd	r24, Y+2	; 0x02
    25e4:	6b 81       	ldd	r22, Y+3	; 0x03
    25e6:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_4Bit_voidSetCursor>
	LCD_4Bit_voidSendData(Copy_u8Data);
    25ea:	89 81       	ldd	r24, Y+1	; 0x01
    25ec:	0e 94 c8 12 	call	0x2590	; 0x2590 <LCD_4Bit_voidSendData>

}
    25f0:	0f 90       	pop	r0
    25f2:	0f 90       	pop	r0
    25f4:	0f 90       	pop	r0
    25f6:	cf 91       	pop	r28
    25f8:	df 91       	pop	r29
    25fa:	08 95       	ret

000025fc <LCD_4Bit_voidSendString>:

void LCD_4Bit_voidSendString(u8 *Copy_PAString)
{
    25fc:	df 93       	push	r29
    25fe:	cf 93       	push	r28
    2600:	00 d0       	rcall	.+0      	; 0x2602 <LCD_4Bit_voidSendString+0x6>
    2602:	0f 92       	push	r0
    2604:	cd b7       	in	r28, 0x3d	; 61
    2606:	de b7       	in	r29, 0x3e	; 62
    2608:	9b 83       	std	Y+3, r25	; 0x03
    260a:	8a 83       	std	Y+2, r24	; 0x02


	for(u8 i=0;Copy_PAString[i];i++)
    260c:	19 82       	std	Y+1, r1	; 0x01
    260e:	0e c0       	rjmp	.+28     	; 0x262c <LCD_4Bit_voidSendString+0x30>
	{
		LCD_4Bit_voidSendData(Copy_PAString[i]);
    2610:	89 81       	ldd	r24, Y+1	; 0x01
    2612:	28 2f       	mov	r18, r24
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	8a 81       	ldd	r24, Y+2	; 0x02
    2618:	9b 81       	ldd	r25, Y+3	; 0x03
    261a:	fc 01       	movw	r30, r24
    261c:	e2 0f       	add	r30, r18
    261e:	f3 1f       	adc	r31, r19
    2620:	80 81       	ld	r24, Z
    2622:	0e 94 c8 12 	call	0x2590	; 0x2590 <LCD_4Bit_voidSendData>

void LCD_4Bit_voidSendString(u8 *Copy_PAString)
{


	for(u8 i=0;Copy_PAString[i];i++)
    2626:	89 81       	ldd	r24, Y+1	; 0x01
    2628:	8f 5f       	subi	r24, 0xFF	; 255
    262a:	89 83       	std	Y+1, r24	; 0x01
    262c:	89 81       	ldd	r24, Y+1	; 0x01
    262e:	28 2f       	mov	r18, r24
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	8a 81       	ldd	r24, Y+2	; 0x02
    2634:	9b 81       	ldd	r25, Y+3	; 0x03
    2636:	fc 01       	movw	r30, r24
    2638:	e2 0f       	add	r30, r18
    263a:	f3 1f       	adc	r31, r19
    263c:	80 81       	ld	r24, Z
    263e:	88 23       	and	r24, r24
    2640:	39 f7       	brne	.-50     	; 0x2610 <LCD_4Bit_voidSendString+0x14>
	{
		LCD_4Bit_voidSendData(Copy_PAString[i]);
	}
}
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	0f 90       	pop	r0
    2648:	cf 91       	pop	r28
    264a:	df 91       	pop	r29
    264c:	08 95       	ret

0000264e <LCD_4Bit_voidSendStringPos>:

void LCD_4Bit_voidSendStringPos(u8 *Copy_PAString,u8 Copy_u8Row,u8 Copy_u8Coulmn)
{
    264e:	df 93       	push	r29
    2650:	cf 93       	push	r28
    2652:	00 d0       	rcall	.+0      	; 0x2654 <LCD_4Bit_voidSendStringPos+0x6>
    2654:	00 d0       	rcall	.+0      	; 0x2656 <LCD_4Bit_voidSendStringPos+0x8>
    2656:	0f 92       	push	r0
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
    265c:	9b 83       	std	Y+3, r25	; 0x03
    265e:	8a 83       	std	Y+2, r24	; 0x02
    2660:	6c 83       	std	Y+4, r22	; 0x04
    2662:	4d 83       	std	Y+5, r20	; 0x05
	LCD_4Bit_voidSetCursor(Copy_u8Row,Copy_u8Coulmn);
    2664:	8c 81       	ldd	r24, Y+4	; 0x04
    2666:	6d 81       	ldd	r22, Y+5	; 0x05
    2668:	0e 94 98 15 	call	0x2b30	; 0x2b30 <LCD_4Bit_voidSetCursor>

	for(u8 i=0;Copy_PAString[i];i++)
    266c:	19 82       	std	Y+1, r1	; 0x01
    266e:	0e c0       	rjmp	.+28     	; 0x268c <LCD_4Bit_voidSendStringPos+0x3e>
	{
		LCD_4Bit_voidSendData(Copy_PAString[i]);
    2670:	89 81       	ldd	r24, Y+1	; 0x01
    2672:	28 2f       	mov	r18, r24
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	8a 81       	ldd	r24, Y+2	; 0x02
    2678:	9b 81       	ldd	r25, Y+3	; 0x03
    267a:	fc 01       	movw	r30, r24
    267c:	e2 0f       	add	r30, r18
    267e:	f3 1f       	adc	r31, r19
    2680:	80 81       	ld	r24, Z
    2682:	0e 94 c8 12 	call	0x2590	; 0x2590 <LCD_4Bit_voidSendData>

void LCD_4Bit_voidSendStringPos(u8 *Copy_PAString,u8 Copy_u8Row,u8 Copy_u8Coulmn)
{
	LCD_4Bit_voidSetCursor(Copy_u8Row,Copy_u8Coulmn);

	for(u8 i=0;Copy_PAString[i];i++)
    2686:	89 81       	ldd	r24, Y+1	; 0x01
    2688:	8f 5f       	subi	r24, 0xFF	; 255
    268a:	89 83       	std	Y+1, r24	; 0x01
    268c:	89 81       	ldd	r24, Y+1	; 0x01
    268e:	28 2f       	mov	r18, r24
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	8a 81       	ldd	r24, Y+2	; 0x02
    2694:	9b 81       	ldd	r25, Y+3	; 0x03
    2696:	fc 01       	movw	r30, r24
    2698:	e2 0f       	add	r30, r18
    269a:	f3 1f       	adc	r31, r19
    269c:	80 81       	ld	r24, Z
    269e:	88 23       	and	r24, r24
    26a0:	39 f7       	brne	.-50     	; 0x2670 <LCD_4Bit_voidSendStringPos+0x22>
	{
		LCD_4Bit_voidSendData(Copy_PAString[i]);
	}
}
    26a2:	0f 90       	pop	r0
    26a4:	0f 90       	pop	r0
    26a6:	0f 90       	pop	r0
    26a8:	0f 90       	pop	r0
    26aa:	0f 90       	pop	r0
    26ac:	cf 91       	pop	r28
    26ae:	df 91       	pop	r29
    26b0:	08 95       	ret

000026b2 <LCD_4Bit_voidSendNumberPos>:


void LCD_4Bit_voidSendNumberPos(u32 Copy_u32number,u8 Copy_u8Row,u8 Copy_u8Coulmn)
{
    26b2:	df 93       	push	r29
    26b4:	cf 93       	push	r28
    26b6:	cd b7       	in	r28, 0x3d	; 61
    26b8:	de b7       	in	r29, 0x3e	; 62
    26ba:	2f 97       	sbiw	r28, 0x0f	; 15
    26bc:	0f b6       	in	r0, 0x3f	; 63
    26be:	f8 94       	cli
    26c0:	de bf       	out	0x3e, r29	; 62
    26c2:	0f be       	out	0x3f, r0	; 63
    26c4:	cd bf       	out	0x3d, r28	; 61
    26c6:	9d 87       	std	Y+13, r25	; 0x0d
    26c8:	8c 87       	std	Y+12, r24	; 0x0c
    26ca:	6e 87       	std	Y+14, r22	; 0x0e
    26cc:	4f 87       	std	Y+15, r20	; 0x0f
	u8 num[11] = {0};
    26ce:	8b e0       	ldi	r24, 0x0B	; 11
    26d0:	fe 01       	movw	r30, r28
    26d2:	31 96       	adiw	r30, 0x01	; 1
    26d4:	df 01       	movw	r26, r30
    26d6:	98 2f       	mov	r25, r24
    26d8:	1d 92       	st	X+, r1
    26da:	9a 95       	dec	r25
    26dc:	e9 f7       	brne	.-6      	; 0x26d8 <LCD_4Bit_voidSendNumberPos+0x26>

	sprintf(num,"%i",Copy_u32number);
    26de:	00 d0       	rcall	.+0      	; 0x26e0 <LCD_4Bit_voidSendNumberPos+0x2e>
    26e0:	00 d0       	rcall	.+0      	; 0x26e2 <LCD_4Bit_voidSendNumberPos+0x30>
    26e2:	00 d0       	rcall	.+0      	; 0x26e4 <LCD_4Bit_voidSendNumberPos+0x32>
    26e4:	ed b7       	in	r30, 0x3d	; 61
    26e6:	fe b7       	in	r31, 0x3e	; 62
    26e8:	31 96       	adiw	r30, 0x01	; 1
    26ea:	ce 01       	movw	r24, r28
    26ec:	01 96       	adiw	r24, 0x01	; 1
    26ee:	91 83       	std	Z+1, r25	; 0x01
    26f0:	80 83       	st	Z, r24
    26f2:	80 e6       	ldi	r24, 0x60	; 96
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	93 83       	std	Z+3, r25	; 0x03
    26f8:	82 83       	std	Z+2, r24	; 0x02
    26fa:	8c 85       	ldd	r24, Y+12	; 0x0c
    26fc:	9d 85       	ldd	r25, Y+13	; 0x0d
    26fe:	95 83       	std	Z+5, r25	; 0x05
    2700:	84 83       	std	Z+4, r24	; 0x04
    2702:	0e 94 11 25 	call	0x4a22	; 0x4a22 <sprintf>
    2706:	ad b7       	in	r26, 0x3d	; 61
    2708:	be b7       	in	r27, 0x3e	; 62
    270a:	16 96       	adiw	r26, 0x06	; 6
    270c:	0f b6       	in	r0, 0x3f	; 63
    270e:	f8 94       	cli
    2710:	be bf       	out	0x3e, r27	; 62
    2712:	0f be       	out	0x3f, r0	; 63
    2714:	ad bf       	out	0x3d, r26	; 61

	LCD_4Bit_voidSendStringPos(num,Copy_u8Row,Copy_u8Coulmn);
    2716:	ce 01       	movw	r24, r28
    2718:	01 96       	adiw	r24, 0x01	; 1
    271a:	6e 85       	ldd	r22, Y+14	; 0x0e
    271c:	4f 85       	ldd	r20, Y+15	; 0x0f
    271e:	0e 94 27 13 	call	0x264e	; 0x264e <LCD_4Bit_voidSendStringPos>


}
    2722:	2f 96       	adiw	r28, 0x0f	; 15
    2724:	0f b6       	in	r0, 0x3f	; 63
    2726:	f8 94       	cli
    2728:	de bf       	out	0x3e, r29	; 62
    272a:	0f be       	out	0x3f, r0	; 63
    272c:	cd bf       	out	0x3d, r28	; 61
    272e:	cf 91       	pop	r28
    2730:	df 91       	pop	r29
    2732:	08 95       	ret

00002734 <LCD_4Bit_voidDrawCustomeCharPos>:

void LCD_4Bit_voidDrawCustomeCharPos(u8 *Copy_u8PAChar,u8 Copy_u8CharAddress,u8 Copy_u8Row,u8 Copy_u8Coulmn)
{
    2734:	df 93       	push	r29
    2736:	cf 93       	push	r28
    2738:	cd b7       	in	r28, 0x3d	; 61
    273a:	de b7       	in	r29, 0x3e	; 62
    273c:	6e 97       	sbiw	r28, 0x1e	; 30
    273e:	0f b6       	in	r0, 0x3f	; 63
    2740:	f8 94       	cli
    2742:	de bf       	out	0x3e, r29	; 62
    2744:	0f be       	out	0x3f, r0	; 63
    2746:	cd bf       	out	0x3d, r28	; 61
    2748:	9b 8f       	std	Y+27, r25	; 0x1b
    274a:	8a 8f       	std	Y+26, r24	; 0x1a
    274c:	6c 8f       	std	Y+28, r22	; 0x1c
    274e:	4d 8f       	std	Y+29, r20	; 0x1d
    2750:	2e 8f       	std	Y+30, r18	; 0x1e
	LCD_4Bit_voidSendCommand(LCD_CGRAM_START + (Copy_u8CharAddress*8));
    2752:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2754:	88 2f       	mov	r24, r24
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	08 96       	adiw	r24, 0x08	; 8
    275a:	88 0f       	add	r24, r24
    275c:	99 1f       	adc	r25, r25
    275e:	88 0f       	add	r24, r24
    2760:	99 1f       	adc	r25, r25
    2762:	88 0f       	add	r24, r24
    2764:	99 1f       	adc	r25, r25
    2766:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_4Bit_voidSendCommand>
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	a8 e4       	ldi	r26, 0x48	; 72
    2770:	b2 e4       	ldi	r27, 0x42	; 66
    2772:	8d 8b       	std	Y+21, r24	; 0x15
    2774:	9e 8b       	std	Y+22, r25	; 0x16
    2776:	af 8b       	std	Y+23, r26	; 0x17
    2778:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    277a:	6d 89       	ldd	r22, Y+21	; 0x15
    277c:	7e 89       	ldd	r23, Y+22	; 0x16
    277e:	8f 89       	ldd	r24, Y+23	; 0x17
    2780:	98 8d       	ldd	r25, Y+24	; 0x18
    2782:	2b ea       	ldi	r18, 0xAB	; 171
    2784:	3a ea       	ldi	r19, 0xAA	; 170
    2786:	4a e2       	ldi	r20, 0x2A	; 42
    2788:	50 e4       	ldi	r21, 0x40	; 64
    278a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	89 8b       	std	Y+17, r24	; 0x11
    2794:	9a 8b       	std	Y+18, r25	; 0x12
    2796:	ab 8b       	std	Y+19, r26	; 0x13
    2798:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    279a:	69 89       	ldd	r22, Y+17	; 0x11
    279c:	7a 89       	ldd	r23, Y+18	; 0x12
    279e:	8b 89       	ldd	r24, Y+19	; 0x13
    27a0:	9c 89       	ldd	r25, Y+20	; 0x14
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	40 e8       	ldi	r20, 0x80	; 128
    27a8:	5f e3       	ldi	r21, 0x3F	; 63
    27aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27ae:	88 23       	and	r24, r24
    27b0:	1c f4       	brge	.+6      	; 0x27b8 <LCD_4Bit_voidDrawCustomeCharPos+0x84>
		__ticks = 1;
    27b2:	81 e0       	ldi	r24, 0x01	; 1
    27b4:	88 8b       	std	Y+16, r24	; 0x10
    27b6:	91 c0       	rjmp	.+290    	; 0x28da <LCD_4Bit_voidDrawCustomeCharPos+0x1a6>
	else if (__tmp > 255)
    27b8:	69 89       	ldd	r22, Y+17	; 0x11
    27ba:	7a 89       	ldd	r23, Y+18	; 0x12
    27bc:	8b 89       	ldd	r24, Y+19	; 0x13
    27be:	9c 89       	ldd	r25, Y+20	; 0x14
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	4f e7       	ldi	r20, 0x7F	; 127
    27c6:	53 e4       	ldi	r21, 0x43	; 67
    27c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27cc:	18 16       	cp	r1, r24
    27ce:	0c f0       	brlt	.+2      	; 0x27d2 <LCD_4Bit_voidDrawCustomeCharPos+0x9e>
    27d0:	7b c0       	rjmp	.+246    	; 0x28c8 <LCD_4Bit_voidDrawCustomeCharPos+0x194>
	{
		_delay_ms(__us / 1000.0);
    27d2:	6d 89       	ldd	r22, Y+21	; 0x15
    27d4:	7e 89       	ldd	r23, Y+22	; 0x16
    27d6:	8f 89       	ldd	r24, Y+23	; 0x17
    27d8:	98 8d       	ldd	r25, Y+24	; 0x18
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	4a e7       	ldi	r20, 0x7A	; 122
    27e0:	54 e4       	ldi	r21, 0x44	; 68
    27e2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	8c 87       	std	Y+12, r24	; 0x0c
    27ec:	9d 87       	std	Y+13, r25	; 0x0d
    27ee:	ae 87       	std	Y+14, r26	; 0x0e
    27f0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f2:	6c 85       	ldd	r22, Y+12	; 0x0c
    27f4:	7d 85       	ldd	r23, Y+13	; 0x0d
    27f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    27f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	4a ef       	ldi	r20, 0xFA	; 250
    2800:	54 e4       	ldi	r21, 0x44	; 68
    2802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	88 87       	std	Y+8, r24	; 0x08
    280c:	99 87       	std	Y+9, r25	; 0x09
    280e:	aa 87       	std	Y+10, r26	; 0x0a
    2810:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2812:	68 85       	ldd	r22, Y+8	; 0x08
    2814:	79 85       	ldd	r23, Y+9	; 0x09
    2816:	8a 85       	ldd	r24, Y+10	; 0x0a
    2818:	9b 85       	ldd	r25, Y+11	; 0x0b
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	40 e8       	ldi	r20, 0x80	; 128
    2820:	5f e3       	ldi	r21, 0x3F	; 63
    2822:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2826:	88 23       	and	r24, r24
    2828:	2c f4       	brge	.+10     	; 0x2834 <LCD_4Bit_voidDrawCustomeCharPos+0x100>
		__ticks = 1;
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	9f 83       	std	Y+7, r25	; 0x07
    2830:	8e 83       	std	Y+6, r24	; 0x06
    2832:	3f c0       	rjmp	.+126    	; 0x28b2 <LCD_4Bit_voidDrawCustomeCharPos+0x17e>
	else if (__tmp > 65535)
    2834:	68 85       	ldd	r22, Y+8	; 0x08
    2836:	79 85       	ldd	r23, Y+9	; 0x09
    2838:	8a 85       	ldd	r24, Y+10	; 0x0a
    283a:	9b 85       	ldd	r25, Y+11	; 0x0b
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	3f ef       	ldi	r19, 0xFF	; 255
    2840:	4f e7       	ldi	r20, 0x7F	; 127
    2842:	57 e4       	ldi	r21, 0x47	; 71
    2844:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2848:	18 16       	cp	r1, r24
    284a:	4c f5       	brge	.+82     	; 0x289e <LCD_4Bit_voidDrawCustomeCharPos+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284c:	6c 85       	ldd	r22, Y+12	; 0x0c
    284e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2850:	8e 85       	ldd	r24, Y+14	; 0x0e
    2852:	9f 85       	ldd	r25, Y+15	; 0x0f
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	40 e2       	ldi	r20, 0x20	; 32
    285a:	51 e4       	ldi	r21, 0x41	; 65
    285c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	bc 01       	movw	r22, r24
    2866:	cd 01       	movw	r24, r26
    2868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	9f 83       	std	Y+7, r25	; 0x07
    2872:	8e 83       	std	Y+6, r24	; 0x06
    2874:	0f c0       	rjmp	.+30     	; 0x2894 <LCD_4Bit_voidDrawCustomeCharPos+0x160>
    2876:	88 ec       	ldi	r24, 0xC8	; 200
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	9d 83       	std	Y+5, r25	; 0x05
    287c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    287e:	8c 81       	ldd	r24, Y+4	; 0x04
    2880:	9d 81       	ldd	r25, Y+5	; 0x05
    2882:	01 97       	sbiw	r24, 0x01	; 1
    2884:	f1 f7       	brne	.-4      	; 0x2882 <LCD_4Bit_voidDrawCustomeCharPos+0x14e>
    2886:	9d 83       	std	Y+5, r25	; 0x05
    2888:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    288a:	8e 81       	ldd	r24, Y+6	; 0x06
    288c:	9f 81       	ldd	r25, Y+7	; 0x07
    288e:	01 97       	sbiw	r24, 0x01	; 1
    2890:	9f 83       	std	Y+7, r25	; 0x07
    2892:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2894:	8e 81       	ldd	r24, Y+6	; 0x06
    2896:	9f 81       	ldd	r25, Y+7	; 0x07
    2898:	00 97       	sbiw	r24, 0x00	; 0
    289a:	69 f7       	brne	.-38     	; 0x2876 <LCD_4Bit_voidDrawCustomeCharPos+0x142>
    289c:	24 c0       	rjmp	.+72     	; 0x28e6 <LCD_4Bit_voidDrawCustomeCharPos+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    289e:	68 85       	ldd	r22, Y+8	; 0x08
    28a0:	79 85       	ldd	r23, Y+9	; 0x09
    28a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    28a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    28a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	9f 83       	std	Y+7, r25	; 0x07
    28b0:	8e 83       	std	Y+6, r24	; 0x06
    28b2:	8e 81       	ldd	r24, Y+6	; 0x06
    28b4:	9f 81       	ldd	r25, Y+7	; 0x07
    28b6:	9b 83       	std	Y+3, r25	; 0x03
    28b8:	8a 83       	std	Y+2, r24	; 0x02
    28ba:	8a 81       	ldd	r24, Y+2	; 0x02
    28bc:	9b 81       	ldd	r25, Y+3	; 0x03
    28be:	01 97       	sbiw	r24, 0x01	; 1
    28c0:	f1 f7       	brne	.-4      	; 0x28be <LCD_4Bit_voidDrawCustomeCharPos+0x18a>
    28c2:	9b 83       	std	Y+3, r25	; 0x03
    28c4:	8a 83       	std	Y+2, r24	; 0x02
    28c6:	0f c0       	rjmp	.+30     	; 0x28e6 <LCD_4Bit_voidDrawCustomeCharPos+0x1b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28c8:	69 89       	ldd	r22, Y+17	; 0x11
    28ca:	7a 89       	ldd	r23, Y+18	; 0x12
    28cc:	8b 89       	ldd	r24, Y+19	; 0x13
    28ce:	9c 89       	ldd	r25, Y+20	; 0x14
    28d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	88 8b       	std	Y+16, r24	; 0x10
    28da:	88 89       	ldd	r24, Y+16	; 0x10
    28dc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	8a 95       	dec	r24
    28e2:	f1 f7       	brne	.-4      	; 0x28e0 <LCD_4Bit_voidDrawCustomeCharPos+0x1ac>
    28e4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);

	for(u8 i=0;i<8;i++)
    28e6:	19 8e       	std	Y+25, r1	; 0x19
    28e8:	0e c0       	rjmp	.+28     	; 0x2906 <LCD_4Bit_voidDrawCustomeCharPos+0x1d2>
	{
		LCD_4Bit_voidSendData(Copy_u8PAChar[i]);
    28ea:	89 8d       	ldd	r24, Y+25	; 0x19
    28ec:	28 2f       	mov	r18, r24
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    28f2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    28f4:	fc 01       	movw	r30, r24
    28f6:	e2 0f       	add	r30, r18
    28f8:	f3 1f       	adc	r31, r19
    28fa:	80 81       	ld	r24, Z
    28fc:	0e 94 c8 12 	call	0x2590	; 0x2590 <LCD_4Bit_voidSendData>
void LCD_4Bit_voidDrawCustomeCharPos(u8 *Copy_u8PAChar,u8 Copy_u8CharAddress,u8 Copy_u8Row,u8 Copy_u8Coulmn)
{
	LCD_4Bit_voidSendCommand(LCD_CGRAM_START + (Copy_u8CharAddress*8));
	_delay_us(50);

	for(u8 i=0;i<8;i++)
    2900:	89 8d       	ldd	r24, Y+25	; 0x19
    2902:	8f 5f       	subi	r24, 0xFF	; 255
    2904:	89 8f       	std	Y+25, r24	; 0x19
    2906:	89 8d       	ldd	r24, Y+25	; 0x19
    2908:	88 30       	cpi	r24, 0x08	; 8
    290a:	78 f3       	brcs	.-34     	; 0x28ea <LCD_4Bit_voidDrawCustomeCharPos+0x1b6>
	{
		LCD_4Bit_voidSendData(Copy_u8PAChar[i]);
	}
	LCD_4Bit_voidSendDataPos(Copy_u8CharAddress,Copy_u8Row,Copy_u8Coulmn);
    290c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    290e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2910:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2912:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <LCD_4Bit_voidSendDataPos>
}
    2916:	6e 96       	adiw	r28, 0x1e	; 30
    2918:	0f b6       	in	r0, 0x3f	; 63
    291a:	f8 94       	cli
    291c:	de bf       	out	0x3e, r29	; 62
    291e:	0f be       	out	0x3f, r0	; 63
    2920:	cd bf       	out	0x3d, r28	; 61
    2922:	cf 91       	pop	r28
    2924:	df 91       	pop	r29
    2926:	08 95       	ret

00002928 <LCD_voidSend4Bit>:

static void LCD_voidSend4Bit(u8 Copy_u8CommandData)
{
    2928:	df 93       	push	r29
    292a:	cf 93       	push	r28
    292c:	0f 92       	push	r0
    292e:	cd b7       	in	r28, 0x3d	; 61
    2930:	de b7       	in	r29, 0x3e	; 62
    2932:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinvalue(LCD_DATA_PORT,DIO_PIN0,(Copy_u8CommandData>>0)&(u8)0x01);
    2934:	89 81       	ldd	r24, Y+1	; 0x01
    2936:	98 2f       	mov	r25, r24
    2938:	91 70       	andi	r25, 0x01	; 1
    293a:	83 e0       	ldi	r24, 0x03	; 3
    293c:	60 e0       	ldi	r22, 0x00	; 0
    293e:	49 2f       	mov	r20, r25
    2940:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(LCD_DATA_PORT,DIO_PIN1,(Copy_u8CommandData>>1)&(u8)0x01);
    2944:	89 81       	ldd	r24, Y+1	; 0x01
    2946:	86 95       	lsr	r24
    2948:	98 2f       	mov	r25, r24
    294a:	91 70       	andi	r25, 0x01	; 1
    294c:	83 e0       	ldi	r24, 0x03	; 3
    294e:	61 e0       	ldi	r22, 0x01	; 1
    2950:	49 2f       	mov	r20, r25
    2952:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(LCD_DATA_PORT,DIO_PIN2,(Copy_u8CommandData>>2)&(u8)0x01);
    2956:	89 81       	ldd	r24, Y+1	; 0x01
    2958:	86 95       	lsr	r24
    295a:	86 95       	lsr	r24
    295c:	98 2f       	mov	r25, r24
    295e:	91 70       	andi	r25, 0x01	; 1
    2960:	83 e0       	ldi	r24, 0x03	; 3
    2962:	62 e0       	ldi	r22, 0x02	; 2
    2964:	49 2f       	mov	r20, r25
    2966:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_voidSetPinvalue>
	DIO_voidSetPinvalue(LCD_DATA_PORT,DIO_PIN3,(Copy_u8CommandData>>3)&(u8)0x01);
    296a:	89 81       	ldd	r24, Y+1	; 0x01
    296c:	86 95       	lsr	r24
    296e:	86 95       	lsr	r24
    2970:	86 95       	lsr	r24
    2972:	98 2f       	mov	r25, r24
    2974:	91 70       	andi	r25, 0x01	; 1
    2976:	83 e0       	ldi	r24, 0x03	; 3
    2978:	63 e0       	ldi	r22, 0x03	; 3
    297a:	49 2f       	mov	r20, r25
    297c:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_voidSetPinvalue>
}
    2980:	0f 90       	pop	r0
    2982:	cf 91       	pop	r28
    2984:	df 91       	pop	r29
    2986:	08 95       	ret

00002988 <LCD_voidSendEnable>:

static void LCD_voidSendEnable(void)
{
    2988:	df 93       	push	r29
    298a:	cf 93       	push	r28
    298c:	cd b7       	in	r28, 0x3d	; 61
    298e:	de b7       	in	r29, 0x3e	; 62
    2990:	2e 97       	sbiw	r28, 0x0e	; 14
    2992:	0f b6       	in	r0, 0x3f	; 63
    2994:	f8 94       	cli
    2996:	de bf       	out	0x3e, r29	; 62
    2998:	0f be       	out	0x3f, r0	; 63
    299a:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinvalue(LCD_CONTROL_PORT,LCD_EN_PIN,DIO_HIGH);
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	63 e0       	ldi	r22, 0x03	; 3
    29a0:	41 e0       	ldi	r20, 0x01	; 1
    29a2:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_voidSetPinvalue>
    29a6:	80 e0       	ldi	r24, 0x00	; 0
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	a0 e8       	ldi	r26, 0x80	; 128
    29ac:	bf e3       	ldi	r27, 0x3F	; 63
    29ae:	8b 87       	std	Y+11, r24	; 0x0b
    29b0:	9c 87       	std	Y+12, r25	; 0x0c
    29b2:	ad 87       	std	Y+13, r26	; 0x0d
    29b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    29bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	4a ef       	ldi	r20, 0xFA	; 250
    29c4:	54 e4       	ldi	r21, 0x44	; 68
    29c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	8f 83       	std	Y+7, r24	; 0x07
    29d0:	98 87       	std	Y+8, r25	; 0x08
    29d2:	a9 87       	std	Y+9, r26	; 0x09
    29d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29d6:	6f 81       	ldd	r22, Y+7	; 0x07
    29d8:	78 85       	ldd	r23, Y+8	; 0x08
    29da:	89 85       	ldd	r24, Y+9	; 0x09
    29dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	40 e8       	ldi	r20, 0x80	; 128
    29e4:	5f e3       	ldi	r21, 0x3F	; 63
    29e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29ea:	88 23       	and	r24, r24
    29ec:	2c f4       	brge	.+10     	; 0x29f8 <LCD_voidSendEnable+0x70>
		__ticks = 1;
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	9e 83       	std	Y+6, r25	; 0x06
    29f4:	8d 83       	std	Y+5, r24	; 0x05
    29f6:	3f c0       	rjmp	.+126    	; 0x2a76 <LCD_voidSendEnable+0xee>
	else if (__tmp > 65535)
    29f8:	6f 81       	ldd	r22, Y+7	; 0x07
    29fa:	78 85       	ldd	r23, Y+8	; 0x08
    29fc:	89 85       	ldd	r24, Y+9	; 0x09
    29fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	3f ef       	ldi	r19, 0xFF	; 255
    2a04:	4f e7       	ldi	r20, 0x7F	; 127
    2a06:	57 e4       	ldi	r21, 0x47	; 71
    2a08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a0c:	18 16       	cp	r1, r24
    2a0e:	4c f5       	brge	.+82     	; 0x2a62 <LCD_voidSendEnable+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a10:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a12:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a14:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a16:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	40 e2       	ldi	r20, 0x20	; 32
    2a1e:	51 e4       	ldi	r21, 0x41	; 65
    2a20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	bc 01       	movw	r22, r24
    2a2a:	cd 01       	movw	r24, r26
    2a2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	9e 83       	std	Y+6, r25	; 0x06
    2a36:	8d 83       	std	Y+5, r24	; 0x05
    2a38:	0f c0       	rjmp	.+30     	; 0x2a58 <LCD_voidSendEnable+0xd0>
    2a3a:	88 ec       	ldi	r24, 0xC8	; 200
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	9c 83       	std	Y+4, r25	; 0x04
    2a40:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a42:	8b 81       	ldd	r24, Y+3	; 0x03
    2a44:	9c 81       	ldd	r25, Y+4	; 0x04
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	f1 f7       	brne	.-4      	; 0x2a46 <LCD_voidSendEnable+0xbe>
    2a4a:	9c 83       	std	Y+4, r25	; 0x04
    2a4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a50:	9e 81       	ldd	r25, Y+6	; 0x06
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	9e 83       	std	Y+6, r25	; 0x06
    2a56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a58:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5c:	00 97       	sbiw	r24, 0x00	; 0
    2a5e:	69 f7       	brne	.-38     	; 0x2a3a <LCD_voidSendEnable+0xb2>
    2a60:	14 c0       	rjmp	.+40     	; 0x2a8a <LCD_voidSendEnable+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a62:	6f 81       	ldd	r22, Y+7	; 0x07
    2a64:	78 85       	ldd	r23, Y+8	; 0x08
    2a66:	89 85       	ldd	r24, Y+9	; 0x09
    2a68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	9e 83       	std	Y+6, r25	; 0x06
    2a74:	8d 83       	std	Y+5, r24	; 0x05
    2a76:	8d 81       	ldd	r24, Y+5	; 0x05
    2a78:	9e 81       	ldd	r25, Y+6	; 0x06
    2a7a:	9a 83       	std	Y+2, r25	; 0x02
    2a7c:	89 83       	std	Y+1, r24	; 0x01
    2a7e:	89 81       	ldd	r24, Y+1	; 0x01
    2a80:	9a 81       	ldd	r25, Y+2	; 0x02
    2a82:	01 97       	sbiw	r24, 0x01	; 1
    2a84:	f1 f7       	brne	.-4      	; 0x2a82 <LCD_voidSendEnable+0xfa>
    2a86:	9a 83       	std	Y+2, r25	; 0x02
    2a88:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPinvalue(LCD_CONTROL_PORT,LCD_EN_PIN,DIO_LOW);
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	63 e0       	ldi	r22, 0x03	; 3
    2a8e:	40 e0       	ldi	r20, 0x00	; 0
    2a90:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_voidSetPinvalue>

}
    2a94:	2e 96       	adiw	r28, 0x0e	; 14
    2a96:	0f b6       	in	r0, 0x3f	; 63
    2a98:	f8 94       	cli
    2a9a:	de bf       	out	0x3e, r29	; 62
    2a9c:	0f be       	out	0x3f, r0	; 63
    2a9e:	cd bf       	out	0x3d, r28	; 61
    2aa0:	cf 91       	pop	r28
    2aa2:	df 91       	pop	r29
    2aa4:	08 95       	ret

00002aa6 <LCD_voidSetCursor>:

static void LCD_voidSetCursor(u8 Copy_u8Row,u8 Copy_u8Coulmn)
{
    2aa6:	df 93       	push	r29
    2aa8:	cf 93       	push	r28
    2aaa:	00 d0       	rcall	.+0      	; 0x2aac <LCD_voidSetCursor+0x6>
    2aac:	00 d0       	rcall	.+0      	; 0x2aae <LCD_voidSetCursor+0x8>
    2aae:	cd b7       	in	r28, 0x3d	; 61
    2ab0:	de b7       	in	r29, 0x3e	; 62
    2ab2:	89 83       	std	Y+1, r24	; 0x01
    2ab4:	6a 83       	std	Y+2, r22	; 0x02
	Copy_u8Coulmn--;
    2ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab8:	81 50       	subi	r24, 0x01	; 1
    2aba:	8a 83       	std	Y+2, r24	; 0x02
	switch(Copy_u8Row)
    2abc:	89 81       	ldd	r24, Y+1	; 0x01
    2abe:	28 2f       	mov	r18, r24
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	3c 83       	std	Y+4, r19	; 0x04
    2ac4:	2b 83       	std	Y+3, r18	; 0x03
    2ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aca:	82 30       	cpi	r24, 0x02	; 2
    2acc:	91 05       	cpc	r25, r1
    2ace:	d9 f0       	breq	.+54     	; 0x2b06 <LCD_voidSetCursor+0x60>
    2ad0:	2b 81       	ldd	r18, Y+3	; 0x03
    2ad2:	3c 81       	ldd	r19, Y+4	; 0x04
    2ad4:	23 30       	cpi	r18, 0x03	; 3
    2ad6:	31 05       	cpc	r19, r1
    2ad8:	34 f4       	brge	.+12     	; 0x2ae6 <LCD_voidSetCursor+0x40>
    2ada:	8b 81       	ldd	r24, Y+3	; 0x03
    2adc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ade:	81 30       	cpi	r24, 0x01	; 1
    2ae0:	91 05       	cpc	r25, r1
    2ae2:	61 f0       	breq	.+24     	; 0x2afc <LCD_voidSetCursor+0x56>
    2ae4:	1e c0       	rjmp	.+60     	; 0x2b22 <LCD_voidSetCursor+0x7c>
    2ae6:	2b 81       	ldd	r18, Y+3	; 0x03
    2ae8:	3c 81       	ldd	r19, Y+4	; 0x04
    2aea:	23 30       	cpi	r18, 0x03	; 3
    2aec:	31 05       	cpc	r19, r1
    2aee:	81 f0       	breq	.+32     	; 0x2b10 <LCD_voidSetCursor+0x6a>
    2af0:	8b 81       	ldd	r24, Y+3	; 0x03
    2af2:	9c 81       	ldd	r25, Y+4	; 0x04
    2af4:	84 30       	cpi	r24, 0x04	; 4
    2af6:	91 05       	cpc	r25, r1
    2af8:	81 f0       	breq	.+32     	; 0x2b1a <LCD_voidSetCursor+0x74>
    2afa:	13 c0       	rjmp	.+38     	; 0x2b22 <LCD_voidSetCursor+0x7c>
	{

		case ROW1:

			LCD_voidSendCommand(0x80+Copy_u8Coulmn);
    2afc:	8a 81       	ldd	r24, Y+2	; 0x02
    2afe:	80 58       	subi	r24, 0x80	; 128
    2b00:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
    2b04:	0e c0       	rjmp	.+28     	; 0x2b22 <LCD_voidSetCursor+0x7c>

		break;
		case ROW2:

			LCD_voidSendCommand(0xC0+Copy_u8Coulmn);
    2b06:	8a 81       	ldd	r24, Y+2	; 0x02
    2b08:	80 54       	subi	r24, 0x40	; 64
    2b0a:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
    2b0e:	09 c0       	rjmp	.+18     	; 0x2b22 <LCD_voidSetCursor+0x7c>
		break;
		case ROW3:

			LCD_voidSendCommand(0x94+Copy_u8Coulmn);
    2b10:	8a 81       	ldd	r24, Y+2	; 0x02
    2b12:	8c 56       	subi	r24, 0x6C	; 108
    2b14:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
    2b18:	04 c0       	rjmp	.+8      	; 0x2b22 <LCD_voidSetCursor+0x7c>

		break;
		case ROW4:

			LCD_voidSendCommand(0xD4+Copy_u8Coulmn);
    2b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1c:	8c 52       	subi	r24, 0x2C	; 44
    2b1e:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
		break;
	}
}
    2b22:	0f 90       	pop	r0
    2b24:	0f 90       	pop	r0
    2b26:	0f 90       	pop	r0
    2b28:	0f 90       	pop	r0
    2b2a:	cf 91       	pop	r28
    2b2c:	df 91       	pop	r29
    2b2e:	08 95       	ret

00002b30 <LCD_4Bit_voidSetCursor>:

static void LCD_4Bit_voidSetCursor(u8 Copy_u8Row,u8 Copy_u8Coulmn)
{
    2b30:	df 93       	push	r29
    2b32:	cf 93       	push	r28
    2b34:	00 d0       	rcall	.+0      	; 0x2b36 <LCD_4Bit_voidSetCursor+0x6>
    2b36:	00 d0       	rcall	.+0      	; 0x2b38 <LCD_4Bit_voidSetCursor+0x8>
    2b38:	cd b7       	in	r28, 0x3d	; 61
    2b3a:	de b7       	in	r29, 0x3e	; 62
    2b3c:	89 83       	std	Y+1, r24	; 0x01
    2b3e:	6a 83       	std	Y+2, r22	; 0x02
	Copy_u8Coulmn--;
    2b40:	8a 81       	ldd	r24, Y+2	; 0x02
    2b42:	81 50       	subi	r24, 0x01	; 1
    2b44:	8a 83       	std	Y+2, r24	; 0x02
	switch(Copy_u8Row)
    2b46:	89 81       	ldd	r24, Y+1	; 0x01
    2b48:	28 2f       	mov	r18, r24
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	3c 83       	std	Y+4, r19	; 0x04
    2b4e:	2b 83       	std	Y+3, r18	; 0x03
    2b50:	8b 81       	ldd	r24, Y+3	; 0x03
    2b52:	9c 81       	ldd	r25, Y+4	; 0x04
    2b54:	81 30       	cpi	r24, 0x01	; 1
    2b56:	91 05       	cpc	r25, r1
    2b58:	31 f0       	breq	.+12     	; 0x2b66 <LCD_4Bit_voidSetCursor+0x36>
    2b5a:	2b 81       	ldd	r18, Y+3	; 0x03
    2b5c:	3c 81       	ldd	r19, Y+4	; 0x04
    2b5e:	22 30       	cpi	r18, 0x02	; 2
    2b60:	31 05       	cpc	r19, r1
    2b62:	31 f0       	breq	.+12     	; 0x2b70 <LCD_4Bit_voidSetCursor+0x40>
    2b64:	09 c0       	rjmp	.+18     	; 0x2b78 <LCD_4Bit_voidSetCursor+0x48>
	{

		case ROW1:

			LCD_4Bit_voidSendCommand(0x80+Copy_u8Coulmn);
    2b66:	8a 81       	ldd	r24, Y+2	; 0x02
    2b68:	80 58       	subi	r24, 0x80	; 128
    2b6a:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_4Bit_voidSendCommand>
    2b6e:	04 c0       	rjmp	.+8      	; 0x2b78 <LCD_4Bit_voidSetCursor+0x48>

		break;
		case ROW2:

			LCD_4Bit_voidSendCommand(0xC0+Copy_u8Coulmn);
    2b70:	8a 81       	ldd	r24, Y+2	; 0x02
    2b72:	80 54       	subi	r24, 0x40	; 64
    2b74:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_4Bit_voidSendCommand>
		break;
	}
}
    2b78:	0f 90       	pop	r0
    2b7a:	0f 90       	pop	r0
    2b7c:	0f 90       	pop	r0
    2b7e:	0f 90       	pop	r0
    2b80:	cf 91       	pop	r28
    2b82:	df 91       	pop	r29
    2b84:	08 95       	ret

00002b86 <KPD_voidInit>:

static u8 KPD_Au8RowPins[ROWS] = {KPD_R1_PIN,KPD_R2_PIN,KPD_R3_PIN,KPD_R4_PIN};
static u8 KPD_Au8COULMNSPins[COULMNS] = {KPD_C1_PIN,KPD_C2_PIN,KPD_C3_PIN};

void KPD_voidInit(void)
{
    2b86:	df 93       	push	r29
    2b88:	cf 93       	push	r28
    2b8a:	cd b7       	in	r28, 0x3d	; 61
    2b8c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDirection(KPD_PORT,KPD_CONTROL);
    2b8e:	80 e0       	ldi	r24, 0x00	; 0
    2b90:	6f e0       	ldi	r22, 0x0F	; 15
    2b92:	0e 94 c9 0a 	call	0x1592	; 0x1592 <DIO_voidSetPortDirection>
	DIO_voidSetPortvalue(KPD_PORT,0xFF);
    2b96:	80 e0       	ldi	r24, 0x00	; 0
    2b98:	6f ef       	ldi	r22, 0xFF	; 255
    2b9a:	0e 94 0a 0b 	call	0x1614	; 0x1614 <DIO_voidSetPortvalue>
}
    2b9e:	cf 91       	pop	r28
    2ba0:	df 91       	pop	r29
    2ba2:	08 95       	ret

00002ba4 <KPD_u8GetPressKey>:
	
	
u8 KPD_u8GetPressKey(void)
{
    2ba4:	df 93       	push	r29
    2ba6:	cf 93       	push	r28
    2ba8:	cd b7       	in	r28, 0x3d	; 61
    2baa:	de b7       	in	r29, 0x3e	; 62
    2bac:	63 97       	sbiw	r28, 0x13	; 19
    2bae:	0f b6       	in	r0, 0x3f	; 63
    2bb0:	f8 94       	cli
    2bb2:	de bf       	out	0x3e, r29	; 62
    2bb4:	0f be       	out	0x3f, r0	; 63
    2bb6:	cd bf       	out	0x3d, r28	; 61
	u8 l_u8RowCounter =0;
    2bb8:	1b 8a       	std	Y+19, r1	; 0x13
	u8 l_u8CoulmnCounter =0;
    2bba:	1a 8a       	std	Y+18, r1	; 0x12
	u8 l_u8PressedKey =0;
    2bbc:	19 8a       	std	Y+17, r1	; 0x11
	u8 l_u8Flag=0;
    2bbe:	18 8a       	std	Y+16, r1	; 0x10
	u8 l_u8ReturnedValue=KPD_CHECK_KEY;
    2bc0:	8f ef       	ldi	r24, 0xFF	; 255
    2bc2:	8f 87       	std	Y+15, r24	; 0x0f
	for(l_u8RowCounter=0;l_u8RowCounter<ROWS;l_u8RowCounter++)
    2bc4:	1b 8a       	std	Y+19, r1	; 0x13
    2bc6:	db c0       	rjmp	.+438    	; 0x2d7e <KPD_u8GetPressKey+0x1da>
	{
		DIO_voidSetPinvalue(KPD_PORT,KPD_Au8RowPins[l_u8RowCounter],DIO_LOW);
    2bc8:	8b 89       	ldd	r24, Y+19	; 0x13
    2bca:	88 2f       	mov	r24, r24
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	fc 01       	movw	r30, r24
    2bd0:	eb 52       	subi	r30, 0x2B	; 43
    2bd2:	fe 4f       	sbci	r31, 0xFE	; 254
    2bd4:	90 81       	ld	r25, Z
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	69 2f       	mov	r22, r25
    2bda:	40 e0       	ldi	r20, 0x00	; 0
    2bdc:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_voidSetPinvalue>
		for(l_u8CoulmnCounter=0;l_u8CoulmnCounter<COULMNS;l_u8CoulmnCounter++)
    2be0:	1a 8a       	std	Y+18, r1	; 0x12
    2be2:	a4 c0       	rjmp	.+328    	; 0x2d2c <KPD_u8GetPressKey+0x188>
		{
			l_u8PressedKey = DIO_u8GetPinValue(KPD_PORT,KPD_Au8COULMNSPins[l_u8CoulmnCounter]);
    2be4:	8a 89       	ldd	r24, Y+18	; 0x12
    2be6:	88 2f       	mov	r24, r24
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	fc 01       	movw	r30, r24
    2bec:	e7 52       	subi	r30, 0x27	; 39
    2bee:	fe 4f       	sbci	r31, 0xFE	; 254
    2bf0:	90 81       	ld	r25, Z
    2bf2:	80 e0       	ldi	r24, 0x00	; 0
    2bf4:	69 2f       	mov	r22, r25
    2bf6:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <DIO_u8GetPinValue>
    2bfa:	89 8b       	std	Y+17, r24	; 0x11
			if(l_u8PressedKey == DIO_LOW)
    2bfc:	89 89       	ldd	r24, Y+17	; 0x11
    2bfe:	88 23       	and	r24, r24
    2c00:	09 f0       	breq	.+2      	; 0x2c04 <KPD_u8GetPressKey+0x60>
    2c02:	91 c0       	rjmp	.+290    	; 0x2d26 <KPD_u8GetPressKey+0x182>
    2c04:	80 e0       	ldi	r24, 0x00	; 0
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	a0 ea       	ldi	r26, 0xA0	; 160
    2c0a:	b1 e4       	ldi	r27, 0x41	; 65
    2c0c:	8b 87       	std	Y+11, r24	; 0x0b
    2c0e:	9c 87       	std	Y+12, r25	; 0x0c
    2c10:	ad 87       	std	Y+13, r26	; 0x0d
    2c12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c14:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c16:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c18:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	4a ef       	ldi	r20, 0xFA	; 250
    2c22:	54 e4       	ldi	r21, 0x44	; 68
    2c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c28:	dc 01       	movw	r26, r24
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	8f 83       	std	Y+7, r24	; 0x07
    2c2e:	98 87       	std	Y+8, r25	; 0x08
    2c30:	a9 87       	std	Y+9, r26	; 0x09
    2c32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c34:	6f 81       	ldd	r22, Y+7	; 0x07
    2c36:	78 85       	ldd	r23, Y+8	; 0x08
    2c38:	89 85       	ldd	r24, Y+9	; 0x09
    2c3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	40 e8       	ldi	r20, 0x80	; 128
    2c42:	5f e3       	ldi	r21, 0x3F	; 63
    2c44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c48:	88 23       	and	r24, r24
    2c4a:	2c f4       	brge	.+10     	; 0x2c56 <KPD_u8GetPressKey+0xb2>
		__ticks = 1;
    2c4c:	81 e0       	ldi	r24, 0x01	; 1
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	9e 83       	std	Y+6, r25	; 0x06
    2c52:	8d 83       	std	Y+5, r24	; 0x05
    2c54:	3f c0       	rjmp	.+126    	; 0x2cd4 <KPD_u8GetPressKey+0x130>
	else if (__tmp > 65535)
    2c56:	6f 81       	ldd	r22, Y+7	; 0x07
    2c58:	78 85       	ldd	r23, Y+8	; 0x08
    2c5a:	89 85       	ldd	r24, Y+9	; 0x09
    2c5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c5e:	20 e0       	ldi	r18, 0x00	; 0
    2c60:	3f ef       	ldi	r19, 0xFF	; 255
    2c62:	4f e7       	ldi	r20, 0x7F	; 127
    2c64:	57 e4       	ldi	r21, 0x47	; 71
    2c66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c6a:	18 16       	cp	r1, r24
    2c6c:	4c f5       	brge	.+82     	; 0x2cc0 <KPD_u8GetPressKey+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c70:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c72:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c74:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c76:	20 e0       	ldi	r18, 0x00	; 0
    2c78:	30 e0       	ldi	r19, 0x00	; 0
    2c7a:	40 e2       	ldi	r20, 0x20	; 32
    2c7c:	51 e4       	ldi	r21, 0x41	; 65
    2c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	bc 01       	movw	r22, r24
    2c88:	cd 01       	movw	r24, r26
    2c8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	9e 83       	std	Y+6, r25	; 0x06
    2c94:	8d 83       	std	Y+5, r24	; 0x05
    2c96:	0f c0       	rjmp	.+30     	; 0x2cb6 <KPD_u8GetPressKey+0x112>
    2c98:	88 ec       	ldi	r24, 0xC8	; 200
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	9c 83       	std	Y+4, r25	; 0x04
    2c9e:	8b 83       	std	Y+3, r24	; 0x03
    2ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca4:	01 97       	sbiw	r24, 0x01	; 1
    2ca6:	f1 f7       	brne	.-4      	; 0x2ca4 <KPD_u8GetPressKey+0x100>
    2ca8:	9c 83       	std	Y+4, r25	; 0x04
    2caa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cac:	8d 81       	ldd	r24, Y+5	; 0x05
    2cae:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb0:	01 97       	sbiw	r24, 0x01	; 1
    2cb2:	9e 83       	std	Y+6, r25	; 0x06
    2cb4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cba:	00 97       	sbiw	r24, 0x00	; 0
    2cbc:	69 f7       	brne	.-38     	; 0x2c98 <KPD_u8GetPressKey+0xf4>
    2cbe:	14 c0       	rjmp	.+40     	; 0x2ce8 <KPD_u8GetPressKey+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cc0:	6f 81       	ldd	r22, Y+7	; 0x07
    2cc2:	78 85       	ldd	r23, Y+8	; 0x08
    2cc4:	89 85       	ldd	r24, Y+9	; 0x09
    2cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	9e 83       	std	Y+6, r25	; 0x06
    2cd2:	8d 83       	std	Y+5, r24	; 0x05
    2cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd8:	9a 83       	std	Y+2, r25	; 0x02
    2cda:	89 83       	std	Y+1, r24	; 0x01
    2cdc:	89 81       	ldd	r24, Y+1	; 0x01
    2cde:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce0:	01 97       	sbiw	r24, 0x01	; 1
    2ce2:	f1 f7       	brne	.-4      	; 0x2ce0 <KPD_u8GetPressKey+0x13c>
    2ce4:	9a 83       	std	Y+2, r25	; 0x02
    2ce6:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(20);
				l_u8PressedKey = DIO_u8GetPinValue(KPD_PORT,KPD_Au8COULMNSPins[l_u8CoulmnCounter]);
    2ce8:	8a 89       	ldd	r24, Y+18	; 0x12
    2cea:	88 2f       	mov	r24, r24
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	fc 01       	movw	r30, r24
    2cf0:	e7 52       	subi	r30, 0x27	; 39
    2cf2:	fe 4f       	sbci	r31, 0xFE	; 254
    2cf4:	90 81       	ld	r25, Z
    2cf6:	80 e0       	ldi	r24, 0x00	; 0
    2cf8:	69 2f       	mov	r22, r25
    2cfa:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <DIO_u8GetPinValue>
    2cfe:	89 8b       	std	Y+17, r24	; 0x11
    2d00:	0c c0       	rjmp	.+24     	; 0x2d1a <KPD_u8GetPressKey+0x176>
				while(l_u8PressedKey == DIO_LOW )
				{
					l_u8PressedKey = DIO_u8GetPinValue(KPD_PORT,KPD_Au8COULMNSPins[l_u8CoulmnCounter]);
    2d02:	8a 89       	ldd	r24, Y+18	; 0x12
    2d04:	88 2f       	mov	r24, r24
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	fc 01       	movw	r30, r24
    2d0a:	e7 52       	subi	r30, 0x27	; 39
    2d0c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d0e:	90 81       	ld	r25, Z
    2d10:	80 e0       	ldi	r24, 0x00	; 0
    2d12:	69 2f       	mov	r22, r25
    2d14:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <DIO_u8GetPinValue>
    2d18:	89 8b       	std	Y+17, r24	; 0x11
			l_u8PressedKey = DIO_u8GetPinValue(KPD_PORT,KPD_Au8COULMNSPins[l_u8CoulmnCounter]);
			if(l_u8PressedKey == DIO_LOW)
			{
				_delay_ms(20);
				l_u8PressedKey = DIO_u8GetPinValue(KPD_PORT,KPD_Au8COULMNSPins[l_u8CoulmnCounter]);
				while(l_u8PressedKey == DIO_LOW )
    2d1a:	89 89       	ldd	r24, Y+17	; 0x11
    2d1c:	88 23       	and	r24, r24
    2d1e:	89 f3       	breq	.-30     	; 0x2d02 <KPD_u8GetPressKey+0x15e>
				{
					l_u8PressedKey = DIO_u8GetPinValue(KPD_PORT,KPD_Au8COULMNSPins[l_u8CoulmnCounter]);
				}
				l_u8Flag = 1;
    2d20:	81 e0       	ldi	r24, 0x01	; 1
    2d22:	88 8b       	std	Y+16, r24	; 0x10
    2d24:	07 c0       	rjmp	.+14     	; 0x2d34 <KPD_u8GetPressKey+0x190>
	u8 l_u8Flag=0;
	u8 l_u8ReturnedValue=KPD_CHECK_KEY;
	for(l_u8RowCounter=0;l_u8RowCounter<ROWS;l_u8RowCounter++)
	{
		DIO_voidSetPinvalue(KPD_PORT,KPD_Au8RowPins[l_u8RowCounter],DIO_LOW);
		for(l_u8CoulmnCounter=0;l_u8CoulmnCounter<COULMNS;l_u8CoulmnCounter++)
    2d26:	8a 89       	ldd	r24, Y+18	; 0x12
    2d28:	8f 5f       	subi	r24, 0xFF	; 255
    2d2a:	8a 8b       	std	Y+18, r24	; 0x12
    2d2c:	8a 89       	ldd	r24, Y+18	; 0x12
    2d2e:	83 30       	cpi	r24, 0x03	; 3
    2d30:	08 f4       	brcc	.+2      	; 0x2d34 <KPD_u8GetPressKey+0x190>
    2d32:	58 cf       	rjmp	.-336    	; 0x2be4 <KPD_u8GetPressKey+0x40>
				}
				l_u8Flag = 1;
				break;
			}
		}
		DIO_voidSetPinvalue(KPD_PORT,KPD_Au8RowPins[l_u8RowCounter],DIO_HIGH);
    2d34:	8b 89       	ldd	r24, Y+19	; 0x13
    2d36:	88 2f       	mov	r24, r24
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	fc 01       	movw	r30, r24
    2d3c:	eb 52       	subi	r30, 0x2B	; 43
    2d3e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d40:	90 81       	ld	r25, Z
    2d42:	80 e0       	ldi	r24, 0x00	; 0
    2d44:	69 2f       	mov	r22, r25
    2d46:	41 e0       	ldi	r20, 0x01	; 1
    2d48:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_voidSetPinvalue>
		if(l_u8Flag==1)
    2d4c:	88 89       	ldd	r24, Y+16	; 0x10
    2d4e:	81 30       	cpi	r24, 0x01	; 1
    2d50:	99 f4       	brne	.+38     	; 0x2d78 <KPD_u8GetPressKey+0x1d4>
		{
			l_u8ReturnedValue =  KPD_Au8Keys[l_u8RowCounter][l_u8CoulmnCounter];
    2d52:	8b 89       	ldd	r24, Y+19	; 0x13
    2d54:	28 2f       	mov	r18, r24
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	8a 89       	ldd	r24, Y+18	; 0x12
    2d5a:	48 2f       	mov	r20, r24
    2d5c:	50 e0       	ldi	r21, 0x00	; 0
    2d5e:	c9 01       	movw	r24, r18
    2d60:	88 0f       	add	r24, r24
    2d62:	99 1f       	adc	r25, r25
    2d64:	82 0f       	add	r24, r18
    2d66:	93 1f       	adc	r25, r19
    2d68:	84 0f       	add	r24, r20
    2d6a:	95 1f       	adc	r25, r21
    2d6c:	fc 01       	movw	r30, r24
    2d6e:	e7 53       	subi	r30, 0x37	; 55
    2d70:	fe 4f       	sbci	r31, 0xFE	; 254
    2d72:	80 81       	ld	r24, Z
    2d74:	8f 87       	std	Y+15, r24	; 0x0f
    2d76:	07 c0       	rjmp	.+14     	; 0x2d86 <KPD_u8GetPressKey+0x1e2>
	u8 l_u8RowCounter =0;
	u8 l_u8CoulmnCounter =0;
	u8 l_u8PressedKey =0;
	u8 l_u8Flag=0;
	u8 l_u8ReturnedValue=KPD_CHECK_KEY;
	for(l_u8RowCounter=0;l_u8RowCounter<ROWS;l_u8RowCounter++)
    2d78:	8b 89       	ldd	r24, Y+19	; 0x13
    2d7a:	8f 5f       	subi	r24, 0xFF	; 255
    2d7c:	8b 8b       	std	Y+19, r24	; 0x13
    2d7e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d80:	84 30       	cpi	r24, 0x04	; 4
    2d82:	08 f4       	brcc	.+2      	; 0x2d86 <KPD_u8GetPressKey+0x1e2>
    2d84:	21 cf       	rjmp	.-446    	; 0x2bc8 <KPD_u8GetPressKey+0x24>
		}
	}
	


	return l_u8ReturnedValue;
    2d86:	8f 85       	ldd	r24, Y+15	; 0x0f

}
    2d88:	63 96       	adiw	r28, 0x13	; 19
    2d8a:	0f b6       	in	r0, 0x3f	; 63
    2d8c:	f8 94       	cli
    2d8e:	de bf       	out	0x3e, r29	; 62
    2d90:	0f be       	out	0x3f, r0	; 63
    2d92:	cd bf       	out	0x3d, r28	; 61
    2d94:	cf 91       	pop	r28
    2d96:	df 91       	pop	r29
    2d98:	08 95       	ret

00002d9a <EEPROM_voidWriteData>:
#include "EEPROM.h"
#include "../../MCAL/I2C/I2C.h"
#include <util/delay.h>

 void EEPROM_voidWriteData(u8 Copy_u8Data,u16 Copy_u16Address)
 {
    2d9a:	df 93       	push	r29
    2d9c:	cf 93       	push	r28
    2d9e:	cd b7       	in	r28, 0x3d	; 61
    2da0:	de b7       	in	r29, 0x3e	; 62
    2da2:	61 97       	sbiw	r28, 0x11	; 17
    2da4:	0f b6       	in	r0, 0x3f	; 63
    2da6:	f8 94       	cli
    2da8:	de bf       	out	0x3e, r29	; 62
    2daa:	0f be       	out	0x3f, r0	; 63
    2dac:	cd bf       	out	0x3d, r28	; 61
    2dae:	8f 87       	std	Y+15, r24	; 0x0f
    2db0:	79 8b       	std	Y+17, r23	; 0x11
    2db2:	68 8b       	std	Y+16, r22	; 0x10
	 I2C_voidStartCondition();
    2db4:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <I2C_voidStartCondition>
	 I2C_voidMasterSendAddressWrite((0x50)| (A2_PIN <<2) | (Copy_u16Address>>8));
    2db8:	88 89       	ldd	r24, Y+16	; 0x10
    2dba:	99 89       	ldd	r25, Y+17	; 0x11
    2dbc:	89 2f       	mov	r24, r25
    2dbe:	99 27       	eor	r25, r25
    2dc0:	80 65       	ori	r24, 0x50	; 80
    2dc2:	0e 94 2b 07 	call	0xe56	; 0xe56 <I2C_voidMasterSendAddressWrite>
	 I2C_voidMasterSendData(((u8)Copy_u16Address));
    2dc6:	88 89       	ldd	r24, Y+16	; 0x10
    2dc8:	0e 94 7d 07 	call	0xefa	; 0xefa <I2C_voidMasterSendData>
	 I2C_voidMasterSendData(Copy_u8Data);
    2dcc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dce:	0e 94 7d 07 	call	0xefa	; 0xefa <I2C_voidMasterSendData>
	 I2C_voidStopCondition();
    2dd2:	0e 94 16 07 	call	0xe2c	; 0xe2c <I2C_voidStopCondition>
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	a0 e2       	ldi	r26, 0x20	; 32
    2ddc:	b1 e4       	ldi	r27, 0x41	; 65
    2dde:	8b 87       	std	Y+11, r24	; 0x0b
    2de0:	9c 87       	std	Y+12, r25	; 0x0c
    2de2:	ad 87       	std	Y+13, r26	; 0x0d
    2de4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2de6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2de8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dea:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dec:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	4a ef       	ldi	r20, 0xFA	; 250
    2df4:	54 e4       	ldi	r21, 0x44	; 68
    2df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	cb 01       	movw	r24, r22
    2dfe:	8f 83       	std	Y+7, r24	; 0x07
    2e00:	98 87       	std	Y+8, r25	; 0x08
    2e02:	a9 87       	std	Y+9, r26	; 0x09
    2e04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e06:	6f 81       	ldd	r22, Y+7	; 0x07
    2e08:	78 85       	ldd	r23, Y+8	; 0x08
    2e0a:	89 85       	ldd	r24, Y+9	; 0x09
    2e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e0e:	20 e0       	ldi	r18, 0x00	; 0
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	40 e8       	ldi	r20, 0x80	; 128
    2e14:	5f e3       	ldi	r21, 0x3F	; 63
    2e16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e1a:	88 23       	and	r24, r24
    2e1c:	2c f4       	brge	.+10     	; 0x2e28 <EEPROM_voidWriteData+0x8e>
		__ticks = 1;
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	9e 83       	std	Y+6, r25	; 0x06
    2e24:	8d 83       	std	Y+5, r24	; 0x05
    2e26:	3f c0       	rjmp	.+126    	; 0x2ea6 <EEPROM_voidWriteData+0x10c>
	else if (__tmp > 65535)
    2e28:	6f 81       	ldd	r22, Y+7	; 0x07
    2e2a:	78 85       	ldd	r23, Y+8	; 0x08
    2e2c:	89 85       	ldd	r24, Y+9	; 0x09
    2e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e30:	20 e0       	ldi	r18, 0x00	; 0
    2e32:	3f ef       	ldi	r19, 0xFF	; 255
    2e34:	4f e7       	ldi	r20, 0x7F	; 127
    2e36:	57 e4       	ldi	r21, 0x47	; 71
    2e38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e3c:	18 16       	cp	r1, r24
    2e3e:	4c f5       	brge	.+82     	; 0x2e92 <EEPROM_voidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e40:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e42:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e44:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e46:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	40 e2       	ldi	r20, 0x20	; 32
    2e4e:	51 e4       	ldi	r21, 0x41	; 65
    2e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	bc 01       	movw	r22, r24
    2e5a:	cd 01       	movw	r24, r26
    2e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e60:	dc 01       	movw	r26, r24
    2e62:	cb 01       	movw	r24, r22
    2e64:	9e 83       	std	Y+6, r25	; 0x06
    2e66:	8d 83       	std	Y+5, r24	; 0x05
    2e68:	0f c0       	rjmp	.+30     	; 0x2e88 <EEPROM_voidWriteData+0xee>
    2e6a:	88 ec       	ldi	r24, 0xC8	; 200
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	9c 83       	std	Y+4, r25	; 0x04
    2e70:	8b 83       	std	Y+3, r24	; 0x03
    2e72:	8b 81       	ldd	r24, Y+3	; 0x03
    2e74:	9c 81       	ldd	r25, Y+4	; 0x04
    2e76:	01 97       	sbiw	r24, 0x01	; 1
    2e78:	f1 f7       	brne	.-4      	; 0x2e76 <EEPROM_voidWriteData+0xdc>
    2e7a:	9c 83       	std	Y+4, r25	; 0x04
    2e7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e80:	9e 81       	ldd	r25, Y+6	; 0x06
    2e82:	01 97       	sbiw	r24, 0x01	; 1
    2e84:	9e 83       	std	Y+6, r25	; 0x06
    2e86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e88:	8d 81       	ldd	r24, Y+5	; 0x05
    2e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e8c:	00 97       	sbiw	r24, 0x00	; 0
    2e8e:	69 f7       	brne	.-38     	; 0x2e6a <EEPROM_voidWriteData+0xd0>
    2e90:	14 c0       	rjmp	.+40     	; 0x2eba <EEPROM_voidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e92:	6f 81       	ldd	r22, Y+7	; 0x07
    2e94:	78 85       	ldd	r23, Y+8	; 0x08
    2e96:	89 85       	ldd	r24, Y+9	; 0x09
    2e98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	9e 83       	std	Y+6, r25	; 0x06
    2ea4:	8d 83       	std	Y+5, r24	; 0x05
    2ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eaa:	9a 83       	std	Y+2, r25	; 0x02
    2eac:	89 83       	std	Y+1, r24	; 0x01
    2eae:	89 81       	ldd	r24, Y+1	; 0x01
    2eb0:	9a 81       	ldd	r25, Y+2	; 0x02
    2eb2:	01 97       	sbiw	r24, 0x01	; 1
    2eb4:	f1 f7       	brne	.-4      	; 0x2eb2 <EEPROM_voidWriteData+0x118>
    2eb6:	9a 83       	std	Y+2, r25	; 0x02
    2eb8:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(10);
 }
    2eba:	61 96       	adiw	r28, 0x11	; 17
    2ebc:	0f b6       	in	r0, 0x3f	; 63
    2ebe:	f8 94       	cli
    2ec0:	de bf       	out	0x3e, r29	; 62
    2ec2:	0f be       	out	0x3f, r0	; 63
    2ec4:	cd bf       	out	0x3d, r28	; 61
    2ec6:	cf 91       	pop	r28
    2ec8:	df 91       	pop	r29
    2eca:	08 95       	ret

00002ecc <EEPROM_voidReadData>:
 u8 EEPROM_voidReadData(u16 Copy_u16Address)
 {
    2ecc:	df 93       	push	r29
    2ece:	cf 93       	push	r28
    2ed0:	00 d0       	rcall	.+0      	; 0x2ed2 <EEPROM_voidReadData+0x6>
    2ed2:	0f 92       	push	r0
    2ed4:	cd b7       	in	r28, 0x3d	; 61
    2ed6:	de b7       	in	r29, 0x3e	; 62
    2ed8:	9b 83       	std	Y+3, r25	; 0x03
    2eda:	8a 83       	std	Y+2, r24	; 0x02
	 u8 l_data =0;
    2edc:	19 82       	std	Y+1, r1	; 0x01
	 I2C_voidStartCondition();
    2ede:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <I2C_voidStartCondition>

	 I2C_voidMasterSendAddressWrite((0x50) | (A2_PIN <<2) | (Copy_u16Address>>8));
    2ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ee6:	89 2f       	mov	r24, r25
    2ee8:	99 27       	eor	r25, r25
    2eea:	80 65       	ori	r24, 0x50	; 80
    2eec:	0e 94 2b 07 	call	0xe56	; 0xe56 <I2C_voidMasterSendAddressWrite>

	 I2C_voidMasterSendData(((u8)Copy_u16Address));
    2ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef2:	0e 94 7d 07 	call	0xefa	; 0xefa <I2C_voidMasterSendData>

	 I2C_voidStartCondition();
    2ef6:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <I2C_voidStartCondition>

	 I2C_voidMasterSendAddressRead((0x50) | (A2_PIN <<2) | (Copy_u16Address>>8));
    2efa:	8a 81       	ldd	r24, Y+2	; 0x02
    2efc:	9b 81       	ldd	r25, Y+3	; 0x03
    2efe:	89 2f       	mov	r24, r25
    2f00:	99 27       	eor	r25, r25
    2f02:	80 65       	ori	r24, 0x50	; 80
    2f04:	0e 94 54 07 	call	0xea8	; 0xea8 <I2C_voidMasterSendAddressRead>

	 l_data = I2C_u8MasterReadData();
    2f08:	0e 94 97 07 	call	0xf2e	; 0xf2e <I2C_u8MasterReadData>
    2f0c:	89 83       	std	Y+1, r24	; 0x01

	 I2C_voidStopCondition();
    2f0e:	0e 94 16 07 	call	0xe2c	; 0xe2c <I2C_voidStopCondition>
	 
	 return l_data;
    2f12:	89 81       	ldd	r24, Y+1	; 0x01
 }
    2f14:	0f 90       	pop	r0
    2f16:	0f 90       	pop	r0
    2f18:	0f 90       	pop	r0
    2f1a:	cf 91       	pop	r28
    2f1c:	df 91       	pop	r29
    2f1e:	08 95       	ret

00002f20 <main>:
void Mode_3(u8 *l,u8 *chose,u8 *Heater_Degree,u8 *Air_cound_Degree,u16 *true_value);
void Mode_4(u8 *flag,u8 *chose);


int main(void)
{
    2f20:	0f 93       	push	r16
    2f22:	1f 93       	push	r17
    2f24:	df 93       	push	r29
    2f26:	cf 93       	push	r28
    2f28:	cd b7       	in	r28, 0x3d	; 61
    2f2a:	de b7       	in	r29, 0x3e	; 62
    2f2c:	c5 59       	subi	r28, 0x95	; 149
    2f2e:	d0 40       	sbci	r29, 0x00	; 0
    2f30:	0f b6       	in	r0, 0x3f	; 63
    2f32:	f8 94       	cli
    2f34:	de bf       	out	0x3e, r29	; 62
    2f36:	0f be       	out	0x3f, r0	; 63
    2f38:	cd bf       	out	0x3d, r28	; 61
	u8 value =0;
    2f3a:	fe 01       	movw	r30, r28
    2f3c:	e7 58       	subi	r30, 0x87	; 135
    2f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f40:	10 82       	st	Z, r1
	u8 Pass_string[20]={0};
    2f42:	ce 01       	movw	r24, r28
    2f44:	86 58       	subi	r24, 0x86	; 134
    2f46:	9f 4f       	sbci	r25, 0xFF	; 255
    2f48:	24 e1       	ldi	r18, 0x14	; 20
    2f4a:	fc 01       	movw	r30, r24
    2f4c:	df 01       	movw	r26, r30
    2f4e:	32 2f       	mov	r19, r18
    2f50:	1d 92       	st	X+, r1
    2f52:	3a 95       	dec	r19
    2f54:	e9 f7       	brne	.-6      	; 0x2f50 <main+0x30>
	u32 pass=0;
    2f56:	fe 01       	movw	r30, r28
    2f58:	e9 58       	subi	r30, 0x89	; 137
    2f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5c:	11 82       	std	Z+1, r1	; 0x01
    2f5e:	10 82       	st	Z, r1
	u8 i=0;
    2f60:	fe 01       	movw	r30, r28
    2f62:	ea 58       	subi	r30, 0x8A	; 138
    2f64:	ff 4f       	sbci	r31, 0xFF	; 255
    2f66:	10 82       	st	Z, r1
	s8 tries =3;
    2f68:	fe 01       	movw	r30, r28
    2f6a:	eb 58       	subi	r30, 0x8B	; 139
    2f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6e:	83 e0       	ldi	r24, 0x03	; 3
    2f70:	80 83       	st	Z, r24
	u8 flag=0;
    2f72:	fe 01       	movw	r30, r28
    2f74:	e2 57       	subi	r30, 0x72	; 114
    2f76:	ff 4f       	sbci	r31, 0xFF	; 255
    2f78:	10 82       	st	Z, r1
	u8 chose=0;
    2f7a:	fe 01       	movw	r30, r28
    2f7c:	e1 57       	subi	r30, 0x71	; 113
    2f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f80:	10 82       	st	Z, r1
	u8  Air_cound_Degree = 23;
    2f82:	fe 01       	movw	r30, r28
    2f84:	e0 57       	subi	r30, 0x70	; 112
    2f86:	ff 4f       	sbci	r31, 0xFF	; 255
    2f88:	87 e1       	ldi	r24, 0x17	; 23
    2f8a:	80 83       	st	Z, r24
	u8  Heater_Degree= 5;
    2f8c:	fe 01       	movw	r30, r28
    2f8e:	ef 56       	subi	r30, 0x6F	; 111
    2f90:	ff 4f       	sbci	r31, 0xFF	; 255
    2f92:	85 e0       	ldi	r24, 0x05	; 5
    2f94:	80 83       	st	Z, r24
	u16 digital_value=0;
    2f96:	fe 01       	movw	r30, r28
    2f98:	ed 58       	subi	r30, 0x8D	; 141
    2f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9c:	11 82       	std	Z+1, r1	; 0x01
    2f9e:	10 82       	st	Z, r1
	u16 analog_value=0;
    2fa0:	fe 01       	movw	r30, r28
    2fa2:	ef 58       	subi	r30, 0x8F	; 143
    2fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa6:	11 82       	std	Z+1, r1	; 0x01
    2fa8:	10 82       	st	Z, r1
	u16 true_value=0;
    2faa:	fe 01       	movw	r30, r28
    2fac:	ee 56       	subi	r30, 0x6E	; 110
    2fae:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb0:	11 82       	std	Z+1, r1	; 0x01
    2fb2:	10 82       	st	Z, r1

	DIO_voidSetPinDirection(DIO_PORTC,DIO_PIN7,DIO_OUTPUT);
    2fb4:	82 e0       	ldi	r24, 0x02	; 2
    2fb6:	67 e0       	ldi	r22, 0x07	; 7
    2fb8:	41 e0       	ldi	r20, 0x01	; 1
    2fba:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <DIO_voidSetPinDirection>
	LCD_8BitvoidInit();
    2fbe:	0e 94 4c 0c 	call	0x1898	; 0x1898 <LCD_8BitvoidInit>
	KPD_voidInit();
    2fc2:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <KPD_voidInit>
	ADC_voidInit();
    2fc6:	0e 94 8d 0b 	call	0x171a	; 0x171a <ADC_voidInit>
	SPI_voidInit();
    2fca:	0e 94 4f 06 	call	0xc9e	; 0xc9e <SPI_voidInit>
	I2C_voidMasterInit();
    2fce:	0e 94 b8 06 	call	0xd70	; 0xd70 <I2C_voidMasterInit>


	while(1)
	{
		digital_value = ADC_u16GetDigitalValue(ADC_CHANNEL7);
    2fd2:	87 e0       	ldi	r24, 0x07	; 7
    2fd4:	0e 94 cc 0b 	call	0x1798	; 0x1798 <ADC_u16GetDigitalValue>
    2fd8:	fe 01       	movw	r30, r28
    2fda:	ed 58       	subi	r30, 0x8D	; 141
    2fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fde:	91 83       	std	Z+1, r25	; 0x01
    2fe0:	80 83       	st	Z, r24
		analog_value = (digital_value * 5000UL)/255;
    2fe2:	fe 01       	movw	r30, r28
    2fe4:	ed 58       	subi	r30, 0x8D	; 141
    2fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe8:	80 81       	ld	r24, Z
    2fea:	91 81       	ldd	r25, Z+1	; 0x01
    2fec:	cc 01       	movw	r24, r24
    2fee:	a0 e0       	ldi	r26, 0x00	; 0
    2ff0:	b0 e0       	ldi	r27, 0x00	; 0
    2ff2:	28 e8       	ldi	r18, 0x88	; 136
    2ff4:	33 e1       	ldi	r19, 0x13	; 19
    2ff6:	40 e0       	ldi	r20, 0x00	; 0
    2ff8:	50 e0       	ldi	r21, 0x00	; 0
    2ffa:	bc 01       	movw	r22, r24
    2ffc:	cd 01       	movw	r24, r26
    2ffe:	0e 94 58 24 	call	0x48b0	; 0x48b0 <__mulsi3>
    3002:	dc 01       	movw	r26, r24
    3004:	cb 01       	movw	r24, r22
    3006:	2f ef       	ldi	r18, 0xFF	; 255
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	40 e0       	ldi	r20, 0x00	; 0
    300c:	50 e0       	ldi	r21, 0x00	; 0
    300e:	bc 01       	movw	r22, r24
    3010:	cd 01       	movw	r24, r26
    3012:	0e 94 8b 24 	call	0x4916	; 0x4916 <__udivmodsi4>
    3016:	da 01       	movw	r26, r20
    3018:	c9 01       	movw	r24, r18
    301a:	fe 01       	movw	r30, r28
    301c:	ef 58       	subi	r30, 0x8F	; 143
    301e:	ff 4f       	sbci	r31, 0xFF	; 255
    3020:	91 83       	std	Z+1, r25	; 0x01
    3022:	80 83       	st	Z, r24
		true_value = (analog_value/40);
    3024:	fe 01       	movw	r30, r28
    3026:	ef 58       	subi	r30, 0x8F	; 143
    3028:	ff 4f       	sbci	r31, 0xFF	; 255
    302a:	80 81       	ld	r24, Z
    302c:	91 81       	ldd	r25, Z+1	; 0x01
    302e:	28 e2       	ldi	r18, 0x28	; 40
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	b9 01       	movw	r22, r18
    3034:	0e 94 77 24 	call	0x48ee	; 0x48ee <__udivmodhi4>
    3038:	cb 01       	movw	r24, r22
    303a:	fe 01       	movw	r30, r28
    303c:	ee 56       	subi	r30, 0x6E	; 110
    303e:	ff 4f       	sbci	r31, 0xFF	; 255
    3040:	91 83       	std	Z+1, r25	; 0x01
    3042:	80 83       	st	Z, r24
		if(EEPROM_voidReadData(0)!=0xFF)//Check if the pass is set
    3044:	80 e0       	ldi	r24, 0x00	; 0
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <EEPROM_voidReadData>
    304c:	8f 3f       	cpi	r24, 0xFF	; 255
    304e:	09 f4       	brne	.+2      	; 0x3052 <main+0x132>
    3050:	c2 c5       	rjmp	.+2948   	; 0x3bd6 <main+0xcb6>
		{
			if(flag==0)
    3052:	fe 01       	movw	r30, r28
    3054:	e2 57       	subi	r30, 0x72	; 114
    3056:	ff 4f       	sbci	r31, 0xFF	; 255
    3058:	80 81       	ld	r24, Z
    305a:	88 23       	and	r24, r24
    305c:	61 f4       	brne	.+24     	; 0x3076 <main+0x156>
			{
				LCD_voidSendStringPos("Enter Password :",1,1);
    305e:	83 e6       	ldi	r24, 0x63	; 99
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	61 e0       	ldi	r22, 0x01	; 1
    3064:	41 e0       	ldi	r20, 0x01	; 1
    3066:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
				value = KPD_u8GetPressKey();
    306a:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <KPD_u8GetPressKey>
    306e:	fe 01       	movw	r30, r28
    3070:	e7 58       	subi	r30, 0x87	; 135
    3072:	ff 4f       	sbci	r31, 0xFF	; 255
    3074:	80 83       	st	Z, r24
			}
			if((value == '=')||(flag>0))
    3076:	fe 01       	movw	r30, r28
    3078:	e7 58       	subi	r30, 0x87	; 135
    307a:	ff 4f       	sbci	r31, 0xFF	; 255
    307c:	80 81       	ld	r24, Z
    307e:	8d 33       	cpi	r24, 0x3D	; 61
    3080:	39 f0       	breq	.+14     	; 0x3090 <main+0x170>
    3082:	fe 01       	movw	r30, r28
    3084:	e2 57       	subi	r30, 0x72	; 114
    3086:	ff 4f       	sbci	r31, 0xFF	; 255
    3088:	80 81       	ld	r24, Z
    308a:	88 23       	and	r24, r24
    308c:	09 f4       	brne	.+2      	; 0x3090 <main+0x170>
    308e:	df c4       	rjmp	.+2494   	; 0x3a4e <main+0xb2e>
			{
				pass = atoi(Pass_string);
    3090:	ce 01       	movw	r24, r28
    3092:	86 58       	subi	r24, 0x86	; 134
    3094:	9f 4f       	sbci	r25, 0xFF	; 255
    3096:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <atoi>
    309a:	fe 01       	movw	r30, r28
    309c:	e9 58       	subi	r30, 0x89	; 137
    309e:	ff 4f       	sbci	r31, 0xFF	; 255
    30a0:	91 83       	std	Z+1, r25	; 0x01
    30a2:	80 83       	st	Z, r24
				if((pass == EEPROM_voidReadData(0))||(flag>0))//Check if the pass is true
    30a4:	80 e0       	ldi	r24, 0x00	; 0
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <EEPROM_voidReadData>
    30ac:	28 2f       	mov	r18, r24
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	fe 01       	movw	r30, r28
    30b2:	e9 58       	subi	r30, 0x89	; 137
    30b4:	ff 4f       	sbci	r31, 0xFF	; 255
    30b6:	80 81       	ld	r24, Z
    30b8:	91 81       	ldd	r25, Z+1	; 0x01
    30ba:	28 17       	cp	r18, r24
    30bc:	39 07       	cpc	r19, r25
    30be:	39 f0       	breq	.+14     	; 0x30ce <main+0x1ae>
    30c0:	fe 01       	movw	r30, r28
    30c2:	e2 57       	subi	r30, 0x72	; 114
    30c4:	ff 4f       	sbci	r31, 0xFF	; 255
    30c6:	80 81       	ld	r24, Z
    30c8:	88 23       	and	r24, r24
    30ca:	09 f4       	brne	.+2      	; 0x30ce <main+0x1ae>
    30cc:	0c c3       	rjmp	.+1560   	; 0x36e6 <main+0x7c6>
				{
					if(flag==0)
    30ce:	fe 01       	movw	r30, r28
    30d0:	e2 57       	subi	r30, 0x72	; 114
    30d2:	ff 4f       	sbci	r31, 0xFF	; 255
    30d4:	80 81       	ld	r24, Z
    30d6:	88 23       	and	r24, r24
    30d8:	09 f0       	breq	.+2      	; 0x30dc <main+0x1bc>
    30da:	7d c1       	rjmp	.+762    	; 0x33d6 <main+0x4b6>
					{
						LCD_voidSendCommand(LCD_CLEAR_DISBLAY);
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
    30e2:	fe 01       	movw	r30, r28
    30e4:	e3 59       	subi	r30, 0x93	; 147
    30e6:	ff 4f       	sbci	r31, 0xFF	; 255
    30e8:	80 e0       	ldi	r24, 0x00	; 0
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	a8 e4       	ldi	r26, 0x48	; 72
    30ee:	b2 e4       	ldi	r27, 0x42	; 66
    30f0:	80 83       	st	Z, r24
    30f2:	91 83       	std	Z+1, r25	; 0x01
    30f4:	a2 83       	std	Z+2, r26	; 0x02
    30f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30f8:	8e 01       	movw	r16, r28
    30fa:	07 59       	subi	r16, 0x97	; 151
    30fc:	1f 4f       	sbci	r17, 0xFF	; 255
    30fe:	fe 01       	movw	r30, r28
    3100:	e3 59       	subi	r30, 0x93	; 147
    3102:	ff 4f       	sbci	r31, 0xFF	; 255
    3104:	60 81       	ld	r22, Z
    3106:	71 81       	ldd	r23, Z+1	; 0x01
    3108:	82 81       	ldd	r24, Z+2	; 0x02
    310a:	93 81       	ldd	r25, Z+3	; 0x03
    310c:	20 e0       	ldi	r18, 0x00	; 0
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	4a ef       	ldi	r20, 0xFA	; 250
    3112:	54 e4       	ldi	r21, 0x44	; 68
    3114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3118:	dc 01       	movw	r26, r24
    311a:	cb 01       	movw	r24, r22
    311c:	f8 01       	movw	r30, r16
    311e:	80 83       	st	Z, r24
    3120:	91 83       	std	Z+1, r25	; 0x01
    3122:	a2 83       	std	Z+2, r26	; 0x02
    3124:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3126:	fe 01       	movw	r30, r28
    3128:	e7 59       	subi	r30, 0x97	; 151
    312a:	ff 4f       	sbci	r31, 0xFF	; 255
    312c:	60 81       	ld	r22, Z
    312e:	71 81       	ldd	r23, Z+1	; 0x01
    3130:	82 81       	ldd	r24, Z+2	; 0x02
    3132:	93 81       	ldd	r25, Z+3	; 0x03
    3134:	20 e0       	ldi	r18, 0x00	; 0
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	40 e8       	ldi	r20, 0x80	; 128
    313a:	5f e3       	ldi	r21, 0x3F	; 63
    313c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3140:	88 23       	and	r24, r24
    3142:	44 f4       	brge	.+16     	; 0x3154 <main+0x234>
		__ticks = 1;
    3144:	fe 01       	movw	r30, r28
    3146:	e9 59       	subi	r30, 0x99	; 153
    3148:	ff 4f       	sbci	r31, 0xFF	; 255
    314a:	81 e0       	ldi	r24, 0x01	; 1
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	91 83       	std	Z+1, r25	; 0x01
    3150:	80 83       	st	Z, r24
    3152:	64 c0       	rjmp	.+200    	; 0x321c <main+0x2fc>
	else if (__tmp > 65535)
    3154:	fe 01       	movw	r30, r28
    3156:	e7 59       	subi	r30, 0x97	; 151
    3158:	ff 4f       	sbci	r31, 0xFF	; 255
    315a:	60 81       	ld	r22, Z
    315c:	71 81       	ldd	r23, Z+1	; 0x01
    315e:	82 81       	ldd	r24, Z+2	; 0x02
    3160:	93 81       	ldd	r25, Z+3	; 0x03
    3162:	20 e0       	ldi	r18, 0x00	; 0
    3164:	3f ef       	ldi	r19, 0xFF	; 255
    3166:	4f e7       	ldi	r20, 0x7F	; 127
    3168:	57 e4       	ldi	r21, 0x47	; 71
    316a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    316e:	18 16       	cp	r1, r24
    3170:	0c f0       	brlt	.+2      	; 0x3174 <main+0x254>
    3172:	43 c0       	rjmp	.+134    	; 0x31fa <main+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3174:	fe 01       	movw	r30, r28
    3176:	e3 59       	subi	r30, 0x93	; 147
    3178:	ff 4f       	sbci	r31, 0xFF	; 255
    317a:	60 81       	ld	r22, Z
    317c:	71 81       	ldd	r23, Z+1	; 0x01
    317e:	82 81       	ldd	r24, Z+2	; 0x02
    3180:	93 81       	ldd	r25, Z+3	; 0x03
    3182:	20 e0       	ldi	r18, 0x00	; 0
    3184:	30 e0       	ldi	r19, 0x00	; 0
    3186:	40 e2       	ldi	r20, 0x20	; 32
    3188:	51 e4       	ldi	r21, 0x41	; 65
    318a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    318e:	dc 01       	movw	r26, r24
    3190:	cb 01       	movw	r24, r22
    3192:	8e 01       	movw	r16, r28
    3194:	09 59       	subi	r16, 0x99	; 153
    3196:	1f 4f       	sbci	r17, 0xFF	; 255
    3198:	bc 01       	movw	r22, r24
    319a:	cd 01       	movw	r24, r26
    319c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	f8 01       	movw	r30, r16
    31a6:	91 83       	std	Z+1, r25	; 0x01
    31a8:	80 83       	st	Z, r24
    31aa:	1f c0       	rjmp	.+62     	; 0x31ea <main+0x2ca>
    31ac:	fe 01       	movw	r30, r28
    31ae:	eb 59       	subi	r30, 0x9B	; 155
    31b0:	ff 4f       	sbci	r31, 0xFF	; 255
    31b2:	88 ec       	ldi	r24, 0xC8	; 200
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	91 83       	std	Z+1, r25	; 0x01
    31b8:	80 83       	st	Z, r24
    31ba:	fe 01       	movw	r30, r28
    31bc:	eb 59       	subi	r30, 0x9B	; 155
    31be:	ff 4f       	sbci	r31, 0xFF	; 255
    31c0:	80 81       	ld	r24, Z
    31c2:	91 81       	ldd	r25, Z+1	; 0x01
    31c4:	01 97       	sbiw	r24, 0x01	; 1
    31c6:	f1 f7       	brne	.-4      	; 0x31c4 <main+0x2a4>
    31c8:	fe 01       	movw	r30, r28
    31ca:	eb 59       	subi	r30, 0x9B	; 155
    31cc:	ff 4f       	sbci	r31, 0xFF	; 255
    31ce:	91 83       	std	Z+1, r25	; 0x01
    31d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31d2:	de 01       	movw	r26, r28
    31d4:	a9 59       	subi	r26, 0x99	; 153
    31d6:	bf 4f       	sbci	r27, 0xFF	; 255
    31d8:	fe 01       	movw	r30, r28
    31da:	e9 59       	subi	r30, 0x99	; 153
    31dc:	ff 4f       	sbci	r31, 0xFF	; 255
    31de:	80 81       	ld	r24, Z
    31e0:	91 81       	ldd	r25, Z+1	; 0x01
    31e2:	01 97       	sbiw	r24, 0x01	; 1
    31e4:	11 96       	adiw	r26, 0x01	; 1
    31e6:	9c 93       	st	X, r25
    31e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ea:	fe 01       	movw	r30, r28
    31ec:	e9 59       	subi	r30, 0x99	; 153
    31ee:	ff 4f       	sbci	r31, 0xFF	; 255
    31f0:	80 81       	ld	r24, Z
    31f2:	91 81       	ldd	r25, Z+1	; 0x01
    31f4:	00 97       	sbiw	r24, 0x00	; 0
    31f6:	d1 f6       	brne	.-76     	; 0x31ac <main+0x28c>
    31f8:	27 c0       	rjmp	.+78     	; 0x3248 <main+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31fa:	8e 01       	movw	r16, r28
    31fc:	09 59       	subi	r16, 0x99	; 153
    31fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3200:	fe 01       	movw	r30, r28
    3202:	e7 59       	subi	r30, 0x97	; 151
    3204:	ff 4f       	sbci	r31, 0xFF	; 255
    3206:	60 81       	ld	r22, Z
    3208:	71 81       	ldd	r23, Z+1	; 0x01
    320a:	82 81       	ldd	r24, Z+2	; 0x02
    320c:	93 81       	ldd	r25, Z+3	; 0x03
    320e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3212:	dc 01       	movw	r26, r24
    3214:	cb 01       	movw	r24, r22
    3216:	f8 01       	movw	r30, r16
    3218:	91 83       	std	Z+1, r25	; 0x01
    321a:	80 83       	st	Z, r24
    321c:	de 01       	movw	r26, r28
    321e:	ad 59       	subi	r26, 0x9D	; 157
    3220:	bf 4f       	sbci	r27, 0xFF	; 255
    3222:	fe 01       	movw	r30, r28
    3224:	e9 59       	subi	r30, 0x99	; 153
    3226:	ff 4f       	sbci	r31, 0xFF	; 255
    3228:	80 81       	ld	r24, Z
    322a:	91 81       	ldd	r25, Z+1	; 0x01
    322c:	8d 93       	st	X+, r24
    322e:	9c 93       	st	X, r25
    3230:	fe 01       	movw	r30, r28
    3232:	ed 59       	subi	r30, 0x9D	; 157
    3234:	ff 4f       	sbci	r31, 0xFF	; 255
    3236:	80 81       	ld	r24, Z
    3238:	91 81       	ldd	r25, Z+1	; 0x01
    323a:	01 97       	sbiw	r24, 0x01	; 1
    323c:	f1 f7       	brne	.-4      	; 0x323a <main+0x31a>
    323e:	fe 01       	movw	r30, r28
    3240:	ed 59       	subi	r30, 0x9D	; 157
    3242:	ff 4f       	sbci	r31, 0xFF	; 255
    3244:	91 83       	std	Z+1, r25	; 0x01
    3246:	80 83       	st	Z, r24
						_delay_ms(50);
						LCD_voidSendStringPos("Welcome",1,7);
    3248:	84 e7       	ldi	r24, 0x74	; 116
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	61 e0       	ldi	r22, 0x01	; 1
    324e:	47 e0       	ldi	r20, 0x07	; 7
    3250:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
    3254:	fe 01       	movw	r30, r28
    3256:	e1 5a       	subi	r30, 0xA1	; 161
    3258:	ff 4f       	sbci	r31, 0xFF	; 255
    325a:	80 e0       	ldi	r24, 0x00	; 0
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	aa ef       	ldi	r26, 0xFA	; 250
    3260:	b3 e4       	ldi	r27, 0x43	; 67
    3262:	80 83       	st	Z, r24
    3264:	91 83       	std	Z+1, r25	; 0x01
    3266:	a2 83       	std	Z+2, r26	; 0x02
    3268:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    326a:	8e 01       	movw	r16, r28
    326c:	05 5a       	subi	r16, 0xA5	; 165
    326e:	1f 4f       	sbci	r17, 0xFF	; 255
    3270:	fe 01       	movw	r30, r28
    3272:	e1 5a       	subi	r30, 0xA1	; 161
    3274:	ff 4f       	sbci	r31, 0xFF	; 255
    3276:	60 81       	ld	r22, Z
    3278:	71 81       	ldd	r23, Z+1	; 0x01
    327a:	82 81       	ldd	r24, Z+2	; 0x02
    327c:	93 81       	ldd	r25, Z+3	; 0x03
    327e:	20 e0       	ldi	r18, 0x00	; 0
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	4a ef       	ldi	r20, 0xFA	; 250
    3284:	54 e4       	ldi	r21, 0x44	; 68
    3286:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    328a:	dc 01       	movw	r26, r24
    328c:	cb 01       	movw	r24, r22
    328e:	f8 01       	movw	r30, r16
    3290:	80 83       	st	Z, r24
    3292:	91 83       	std	Z+1, r25	; 0x01
    3294:	a2 83       	std	Z+2, r26	; 0x02
    3296:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3298:	fe 01       	movw	r30, r28
    329a:	e5 5a       	subi	r30, 0xA5	; 165
    329c:	ff 4f       	sbci	r31, 0xFF	; 255
    329e:	60 81       	ld	r22, Z
    32a0:	71 81       	ldd	r23, Z+1	; 0x01
    32a2:	82 81       	ldd	r24, Z+2	; 0x02
    32a4:	93 81       	ldd	r25, Z+3	; 0x03
    32a6:	20 e0       	ldi	r18, 0x00	; 0
    32a8:	30 e0       	ldi	r19, 0x00	; 0
    32aa:	40 e8       	ldi	r20, 0x80	; 128
    32ac:	5f e3       	ldi	r21, 0x3F	; 63
    32ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32b2:	88 23       	and	r24, r24
    32b4:	44 f4       	brge	.+16     	; 0x32c6 <main+0x3a6>
		__ticks = 1;
    32b6:	fe 01       	movw	r30, r28
    32b8:	e7 5a       	subi	r30, 0xA7	; 167
    32ba:	ff 4f       	sbci	r31, 0xFF	; 255
    32bc:	81 e0       	ldi	r24, 0x01	; 1
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	91 83       	std	Z+1, r25	; 0x01
    32c2:	80 83       	st	Z, r24
    32c4:	64 c0       	rjmp	.+200    	; 0x338e <main+0x46e>
	else if (__tmp > 65535)
    32c6:	fe 01       	movw	r30, r28
    32c8:	e5 5a       	subi	r30, 0xA5	; 165
    32ca:	ff 4f       	sbci	r31, 0xFF	; 255
    32cc:	60 81       	ld	r22, Z
    32ce:	71 81       	ldd	r23, Z+1	; 0x01
    32d0:	82 81       	ldd	r24, Z+2	; 0x02
    32d2:	93 81       	ldd	r25, Z+3	; 0x03
    32d4:	20 e0       	ldi	r18, 0x00	; 0
    32d6:	3f ef       	ldi	r19, 0xFF	; 255
    32d8:	4f e7       	ldi	r20, 0x7F	; 127
    32da:	57 e4       	ldi	r21, 0x47	; 71
    32dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32e0:	18 16       	cp	r1, r24
    32e2:	0c f0       	brlt	.+2      	; 0x32e6 <main+0x3c6>
    32e4:	43 c0       	rjmp	.+134    	; 0x336c <main+0x44c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32e6:	fe 01       	movw	r30, r28
    32e8:	e1 5a       	subi	r30, 0xA1	; 161
    32ea:	ff 4f       	sbci	r31, 0xFF	; 255
    32ec:	60 81       	ld	r22, Z
    32ee:	71 81       	ldd	r23, Z+1	; 0x01
    32f0:	82 81       	ldd	r24, Z+2	; 0x02
    32f2:	93 81       	ldd	r25, Z+3	; 0x03
    32f4:	20 e0       	ldi	r18, 0x00	; 0
    32f6:	30 e0       	ldi	r19, 0x00	; 0
    32f8:	40 e2       	ldi	r20, 0x20	; 32
    32fa:	51 e4       	ldi	r21, 0x41	; 65
    32fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3300:	dc 01       	movw	r26, r24
    3302:	cb 01       	movw	r24, r22
    3304:	8e 01       	movw	r16, r28
    3306:	07 5a       	subi	r16, 0xA7	; 167
    3308:	1f 4f       	sbci	r17, 0xFF	; 255
    330a:	bc 01       	movw	r22, r24
    330c:	cd 01       	movw	r24, r26
    330e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3312:	dc 01       	movw	r26, r24
    3314:	cb 01       	movw	r24, r22
    3316:	f8 01       	movw	r30, r16
    3318:	91 83       	std	Z+1, r25	; 0x01
    331a:	80 83       	st	Z, r24
    331c:	1f c0       	rjmp	.+62     	; 0x335c <main+0x43c>
    331e:	fe 01       	movw	r30, r28
    3320:	e9 5a       	subi	r30, 0xA9	; 169
    3322:	ff 4f       	sbci	r31, 0xFF	; 255
    3324:	88 ec       	ldi	r24, 0xC8	; 200
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	91 83       	std	Z+1, r25	; 0x01
    332a:	80 83       	st	Z, r24
    332c:	fe 01       	movw	r30, r28
    332e:	e9 5a       	subi	r30, 0xA9	; 169
    3330:	ff 4f       	sbci	r31, 0xFF	; 255
    3332:	80 81       	ld	r24, Z
    3334:	91 81       	ldd	r25, Z+1	; 0x01
    3336:	01 97       	sbiw	r24, 0x01	; 1
    3338:	f1 f7       	brne	.-4      	; 0x3336 <main+0x416>
    333a:	fe 01       	movw	r30, r28
    333c:	e9 5a       	subi	r30, 0xA9	; 169
    333e:	ff 4f       	sbci	r31, 0xFF	; 255
    3340:	91 83       	std	Z+1, r25	; 0x01
    3342:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3344:	de 01       	movw	r26, r28
    3346:	a7 5a       	subi	r26, 0xA7	; 167
    3348:	bf 4f       	sbci	r27, 0xFF	; 255
    334a:	fe 01       	movw	r30, r28
    334c:	e7 5a       	subi	r30, 0xA7	; 167
    334e:	ff 4f       	sbci	r31, 0xFF	; 255
    3350:	80 81       	ld	r24, Z
    3352:	91 81       	ldd	r25, Z+1	; 0x01
    3354:	01 97       	sbiw	r24, 0x01	; 1
    3356:	11 96       	adiw	r26, 0x01	; 1
    3358:	9c 93       	st	X, r25
    335a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    335c:	fe 01       	movw	r30, r28
    335e:	e7 5a       	subi	r30, 0xA7	; 167
    3360:	ff 4f       	sbci	r31, 0xFF	; 255
    3362:	80 81       	ld	r24, Z
    3364:	91 81       	ldd	r25, Z+1	; 0x01
    3366:	00 97       	sbiw	r24, 0x00	; 0
    3368:	d1 f6       	brne	.-76     	; 0x331e <main+0x3fe>
    336a:	27 c0       	rjmp	.+78     	; 0x33ba <main+0x49a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    336c:	8e 01       	movw	r16, r28
    336e:	07 5a       	subi	r16, 0xA7	; 167
    3370:	1f 4f       	sbci	r17, 0xFF	; 255
    3372:	fe 01       	movw	r30, r28
    3374:	e5 5a       	subi	r30, 0xA5	; 165
    3376:	ff 4f       	sbci	r31, 0xFF	; 255
    3378:	60 81       	ld	r22, Z
    337a:	71 81       	ldd	r23, Z+1	; 0x01
    337c:	82 81       	ldd	r24, Z+2	; 0x02
    337e:	93 81       	ldd	r25, Z+3	; 0x03
    3380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3384:	dc 01       	movw	r26, r24
    3386:	cb 01       	movw	r24, r22
    3388:	f8 01       	movw	r30, r16
    338a:	91 83       	std	Z+1, r25	; 0x01
    338c:	80 83       	st	Z, r24
    338e:	de 01       	movw	r26, r28
    3390:	ab 5a       	subi	r26, 0xAB	; 171
    3392:	bf 4f       	sbci	r27, 0xFF	; 255
    3394:	fe 01       	movw	r30, r28
    3396:	e7 5a       	subi	r30, 0xA7	; 167
    3398:	ff 4f       	sbci	r31, 0xFF	; 255
    339a:	80 81       	ld	r24, Z
    339c:	91 81       	ldd	r25, Z+1	; 0x01
    339e:	8d 93       	st	X+, r24
    33a0:	9c 93       	st	X, r25
    33a2:	fe 01       	movw	r30, r28
    33a4:	eb 5a       	subi	r30, 0xAB	; 171
    33a6:	ff 4f       	sbci	r31, 0xFF	; 255
    33a8:	80 81       	ld	r24, Z
    33aa:	91 81       	ldd	r25, Z+1	; 0x01
    33ac:	01 97       	sbiw	r24, 0x01	; 1
    33ae:	f1 f7       	brne	.-4      	; 0x33ac <main+0x48c>
    33b0:	fe 01       	movw	r30, r28
    33b2:	eb 5a       	subi	r30, 0xAB	; 171
    33b4:	ff 4f       	sbci	r31, 0xFF	; 255
    33b6:	91 83       	std	Z+1, r25	; 0x01
    33b8:	80 83       	st	Z, r24
						_delay_ms(500);
						tries = 3;
    33ba:	fe 01       	movw	r30, r28
    33bc:	eb 58       	subi	r30, 0x8B	; 139
    33be:	ff 4f       	sbci	r31, 0xFF	; 255
    33c0:	83 e0       	ldi	r24, 0x03	; 3
    33c2:	80 83       	st	Z, r24
						flag=1;
    33c4:	fe 01       	movw	r30, r28
    33c6:	e2 57       	subi	r30, 0x72	; 114
    33c8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ca:	81 e0       	ldi	r24, 0x01	; 1
    33cc:	80 83       	st	Z, r24
						LCD_voidSendCommand(LCD_CLEAR_DISBLAY);
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
    33d4:	2e c3       	rjmp	.+1628   	; 0x3a32 <main+0xb12>
					}
					else
					{
						if(flag==1)
    33d6:	fe 01       	movw	r30, r28
    33d8:	e2 57       	subi	r30, 0x72	; 114
    33da:	ff 4f       	sbci	r31, 0xFF	; 255
    33dc:	80 81       	ld	r24, Z
    33de:	81 30       	cpi	r24, 0x01	; 1
    33e0:	21 f5       	brne	.+72     	; 0x342a <main+0x50a>
						{

							LCD_voidSendStringPos("1-Air Conditioner",1,1);
    33e2:	8c e7       	ldi	r24, 0x7C	; 124
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	61 e0       	ldi	r22, 0x01	; 1
    33e8:	41 e0       	ldi	r20, 0x01	; 1
    33ea:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
							LCD_voidSendStringPos("2-Heater",2,1);
    33ee:	8e e8       	ldi	r24, 0x8E	; 142
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	62 e0       	ldi	r22, 0x02	; 2
    33f4:	41 e0       	ldi	r20, 0x01	; 1
    33f6:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
							LCD_voidSendStringPos("3-Auto Use",3,1);
    33fa:	87 e9       	ldi	r24, 0x97	; 151
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	63 e0       	ldi	r22, 0x03	; 3
    3400:	41 e0       	ldi	r20, 0x01	; 1
    3402:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
							LCD_voidSendStringPos("4-Rooms",4,1);
    3406:	82 ea       	ldi	r24, 0xA2	; 162
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	64 e0       	ldi	r22, 0x04	; 4
    340c:	41 e0       	ldi	r20, 0x01	; 1
    340e:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
							LCD_voidSendStringPos("5-Exit",4,13);
    3412:	8a ea       	ldi	r24, 0xAA	; 170
    3414:	90 e0       	ldi	r25, 0x00	; 0
    3416:	64 e0       	ldi	r22, 0x04	; 4
    3418:	4d e0       	ldi	r20, 0x0D	; 13
    341a:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
							chose = KPD_u8GetPressKey();
    341e:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <KPD_u8GetPressKey>
    3422:	fe 01       	movw	r30, r28
    3424:	e1 57       	subi	r30, 0x71	; 113
    3426:	ff 4f       	sbci	r31, 0xFF	; 255
    3428:	80 83       	st	Z, r24
						}
						SPI_u8Tranceive(chose);
    342a:	fe 01       	movw	r30, r28
    342c:	e1 57       	subi	r30, 0x71	; 113
    342e:	ff 4f       	sbci	r31, 0xFF	; 255
    3430:	80 81       	ld	r24, Z
    3432:	0e 94 a2 06 	call	0xd44	; 0xd44 <SPI_u8Tranceive>
						switch(chose)
    3436:	fe 01       	movw	r30, r28
    3438:	e1 57       	subi	r30, 0x71	; 113
    343a:	ff 4f       	sbci	r31, 0xFF	; 255
    343c:	80 81       	ld	r24, Z
    343e:	28 2f       	mov	r18, r24
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	cc 56       	subi	r28, 0x6C	; 108
    3444:	df 4f       	sbci	r29, 0xFF	; 255
    3446:	39 83       	std	Y+1, r19	; 0x01
    3448:	28 83       	st	Y, r18
    344a:	c4 59       	subi	r28, 0x94	; 148
    344c:	d0 40       	sbci	r29, 0x00	; 0
    344e:	cc 56       	subi	r28, 0x6C	; 108
    3450:	df 4f       	sbci	r29, 0xFF	; 255
    3452:	88 81       	ld	r24, Y
    3454:	99 81       	ldd	r25, Y+1	; 0x01
    3456:	c4 59       	subi	r28, 0x94	; 148
    3458:	d0 40       	sbci	r29, 0x00	; 0
    345a:	83 33       	cpi	r24, 0x33	; 51
    345c:	91 05       	cpc	r25, r1
    345e:	09 f4       	brne	.+2      	; 0x3462 <main+0x542>
    3460:	49 c0       	rjmp	.+146    	; 0x34f4 <main+0x5d4>
    3462:	cc 56       	subi	r28, 0x6C	; 108
    3464:	df 4f       	sbci	r29, 0xFF	; 255
    3466:	a8 81       	ld	r26, Y
    3468:	b9 81       	ldd	r27, Y+1	; 0x01
    346a:	c4 59       	subi	r28, 0x94	; 148
    346c:	d0 40       	sbci	r29, 0x00	; 0
    346e:	a4 33       	cpi	r26, 0x34	; 52
    3470:	b1 05       	cpc	r27, r1
    3472:	9c f4       	brge	.+38     	; 0x349a <main+0x57a>
    3474:	cc 56       	subi	r28, 0x6C	; 108
    3476:	df 4f       	sbci	r29, 0xFF	; 255
    3478:	e8 81       	ld	r30, Y
    347a:	f9 81       	ldd	r31, Y+1	; 0x01
    347c:	c4 59       	subi	r28, 0x94	; 148
    347e:	d0 40       	sbci	r29, 0x00	; 0
    3480:	e1 33       	cpi	r30, 0x31	; 49
    3482:	f1 05       	cpc	r31, r1
    3484:	e9 f0       	breq	.+58     	; 0x34c0 <main+0x5a0>
    3486:	cc 56       	subi	r28, 0x6C	; 108
    3488:	df 4f       	sbci	r29, 0xFF	; 255
    348a:	28 81       	ld	r18, Y
    348c:	39 81       	ldd	r19, Y+1	; 0x01
    348e:	c4 59       	subi	r28, 0x94	; 148
    3490:	d0 40       	sbci	r29, 0x00	; 0
    3492:	22 33       	cpi	r18, 0x32	; 50
    3494:	31 05       	cpc	r19, r1
    3496:	09 f1       	breq	.+66     	; 0x34da <main+0x5ba>
    3498:	61 c0       	rjmp	.+194    	; 0x355c <main+0x63c>
    349a:	cc 56       	subi	r28, 0x6C	; 108
    349c:	df 4f       	sbci	r29, 0xFF	; 255
    349e:	88 81       	ld	r24, Y
    34a0:	99 81       	ldd	r25, Y+1	; 0x01
    34a2:	c4 59       	subi	r28, 0x94	; 148
    34a4:	d0 40       	sbci	r29, 0x00	; 0
    34a6:	84 33       	cpi	r24, 0x34	; 52
    34a8:	91 05       	cpc	r25, r1
    34aa:	c9 f1       	breq	.+114    	; 0x351e <main+0x5fe>
    34ac:	cc 56       	subi	r28, 0x6C	; 108
    34ae:	df 4f       	sbci	r29, 0xFF	; 255
    34b0:	a8 81       	ld	r26, Y
    34b2:	b9 81       	ldd	r27, Y+1	; 0x01
    34b4:	c4 59       	subi	r28, 0x94	; 148
    34b6:	d0 40       	sbci	r29, 0x00	; 0
    34b8:	a5 33       	cpi	r26, 0x35	; 53
    34ba:	b1 05       	cpc	r27, r1
    34bc:	d1 f1       	breq	.+116    	; 0x3532 <main+0x612>
    34be:	4e c0       	rjmp	.+156    	; 0x355c <main+0x63c>
						{
							case '1':
								Mode_1(&Air_cound_Degree,&flag,&chose);
    34c0:	ce 01       	movw	r24, r28
    34c2:	80 57       	subi	r24, 0x70	; 112
    34c4:	9f 4f       	sbci	r25, 0xFF	; 255
    34c6:	9e 01       	movw	r18, r28
    34c8:	22 57       	subi	r18, 0x72	; 114
    34ca:	3f 4f       	sbci	r19, 0xFF	; 255
    34cc:	ae 01       	movw	r20, r28
    34ce:	41 57       	subi	r20, 0x71	; 113
    34d0:	5f 4f       	sbci	r21, 0xFF	; 255
    34d2:	b9 01       	movw	r22, r18
    34d4:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <Mode_1>
    34d8:	ac c2       	rjmp	.+1368   	; 0x3a32 <main+0xb12>
								break;
							case '2':
								Mode_2(&Heater_Degree,&flag,&chose);
    34da:	ce 01       	movw	r24, r28
    34dc:	8f 56       	subi	r24, 0x6F	; 111
    34de:	9f 4f       	sbci	r25, 0xFF	; 255
    34e0:	9e 01       	movw	r18, r28
    34e2:	22 57       	subi	r18, 0x72	; 114
    34e4:	3f 4f       	sbci	r19, 0xFF	; 255
    34e6:	ae 01       	movw	r20, r28
    34e8:	41 57       	subi	r20, 0x71	; 113
    34ea:	5f 4f       	sbci	r21, 0xFF	; 255
    34ec:	b9 01       	movw	r22, r18
    34ee:	0e 94 f9 1f 	call	0x3ff2	; 0x3ff2 <Mode_2>
    34f2:	9f c2       	rjmp	.+1342   	; 0x3a32 <main+0xb12>
								break;
							case '3':
								Mode_3(&flag,&chose,&Heater_Degree,&Air_cound_Degree,&true_value);
    34f4:	ce 01       	movw	r24, r28
    34f6:	82 57       	subi	r24, 0x72	; 114
    34f8:	9f 4f       	sbci	r25, 0xFF	; 255
    34fa:	9e 01       	movw	r18, r28
    34fc:	21 57       	subi	r18, 0x71	; 113
    34fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3500:	ae 01       	movw	r20, r28
    3502:	4f 56       	subi	r20, 0x6F	; 111
    3504:	5f 4f       	sbci	r21, 0xFF	; 255
    3506:	fe 01       	movw	r30, r28
    3508:	e0 57       	subi	r30, 0x70	; 112
    350a:	ff 4f       	sbci	r31, 0xFF	; 255
    350c:	de 01       	movw	r26, r28
    350e:	ae 56       	subi	r26, 0x6E	; 110
    3510:	bf 4f       	sbci	r27, 0xFF	; 255
    3512:	b9 01       	movw	r22, r18
    3514:	9f 01       	movw	r18, r30
    3516:	8d 01       	movw	r16, r26
    3518:	0e 94 20 21 	call	0x4240	; 0x4240 <Mode_3>
    351c:	8a c2       	rjmp	.+1300   	; 0x3a32 <main+0xb12>
								break;
							case '4':
								Mode_4(&flag,&chose);
    351e:	ce 01       	movw	r24, r28
    3520:	82 57       	subi	r24, 0x72	; 114
    3522:	9f 4f       	sbci	r25, 0xFF	; 255
    3524:	9e 01       	movw	r18, r28
    3526:	21 57       	subi	r18, 0x71	; 113
    3528:	3f 4f       	sbci	r19, 0xFF	; 255
    352a:	b9 01       	movw	r22, r18
    352c:	0e 94 90 22 	call	0x4520	; 0x4520 <Mode_4>
    3530:	80 c2       	rjmp	.+1280   	; 0x3a32 <main+0xb12>
								break;
							case '5':
								LCD_voidSendCommand(LCD_CLEAR_DISBLAY);
    3532:	81 e0       	ldi	r24, 0x01	; 1
    3534:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
								i=0;
    3538:	fe 01       	movw	r30, r28
    353a:	ea 58       	subi	r30, 0x8A	; 138
    353c:	ff 4f       	sbci	r31, 0xFF	; 255
    353e:	10 82       	st	Z, r1
								memset(Pass_string,'\0',20);
    3540:	ce 01       	movw	r24, r28
    3542:	86 58       	subi	r24, 0x86	; 134
    3544:	9f 4f       	sbci	r25, 0xFF	; 255
    3546:	60 e0       	ldi	r22, 0x00	; 0
    3548:	70 e0       	ldi	r23, 0x00	; 0
    354a:	44 e1       	ldi	r20, 0x14	; 20
    354c:	50 e0       	ldi	r21, 0x00	; 0
    354e:	0e 94 02 25 	call	0x4a04	; 0x4a04 <memset>
								flag=0;
    3552:	fe 01       	movw	r30, r28
    3554:	e2 57       	subi	r30, 0x72	; 114
    3556:	ff 4f       	sbci	r31, 0xFF	; 255
    3558:	10 82       	st	Z, r1
    355a:	6b c2       	rjmp	.+1238   	; 0x3a32 <main+0xb12>
								break;
							default :
								if(chose != KPD_CHECK_KEY)
    355c:	fe 01       	movw	r30, r28
    355e:	e1 57       	subi	r30, 0x71	; 113
    3560:	ff 4f       	sbci	r31, 0xFF	; 255
    3562:	80 81       	ld	r24, Z
    3564:	8f 3f       	cpi	r24, 0xFF	; 255
    3566:	09 f4       	brne	.+2      	; 0x356a <main+0x64a>
    3568:	64 c2       	rjmp	.+1224   	; 0x3a32 <main+0xb12>
								{
									LCD_voidSendCommand(LCD_CLEAR_DISBLAY);
    356a:	81 e0       	ldi	r24, 0x01	; 1
    356c:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
									LCD_voidSendStringPos("Invalid Chose ",1,1);
    3570:	81 eb       	ldi	r24, 0xB1	; 177
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	61 e0       	ldi	r22, 0x01	; 1
    3576:	41 e0       	ldi	r20, 0x01	; 1
    3578:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
    357c:	fe 01       	movw	r30, r28
    357e:	ef 5a       	subi	r30, 0xAF	; 175
    3580:	ff 4f       	sbci	r31, 0xFF	; 255
    3582:	80 e0       	ldi	r24, 0x00	; 0
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	af e2       	ldi	r26, 0x2F	; 47
    3588:	b4 e4       	ldi	r27, 0x44	; 68
    358a:	80 83       	st	Z, r24
    358c:	91 83       	std	Z+1, r25	; 0x01
    358e:	a2 83       	std	Z+2, r26	; 0x02
    3590:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3592:	8e 01       	movw	r16, r28
    3594:	03 5b       	subi	r16, 0xB3	; 179
    3596:	1f 4f       	sbci	r17, 0xFF	; 255
    3598:	fe 01       	movw	r30, r28
    359a:	ef 5a       	subi	r30, 0xAF	; 175
    359c:	ff 4f       	sbci	r31, 0xFF	; 255
    359e:	60 81       	ld	r22, Z
    35a0:	71 81       	ldd	r23, Z+1	; 0x01
    35a2:	82 81       	ldd	r24, Z+2	; 0x02
    35a4:	93 81       	ldd	r25, Z+3	; 0x03
    35a6:	20 e0       	ldi	r18, 0x00	; 0
    35a8:	30 e0       	ldi	r19, 0x00	; 0
    35aa:	4a ef       	ldi	r20, 0xFA	; 250
    35ac:	54 e4       	ldi	r21, 0x44	; 68
    35ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b2:	dc 01       	movw	r26, r24
    35b4:	cb 01       	movw	r24, r22
    35b6:	f8 01       	movw	r30, r16
    35b8:	80 83       	st	Z, r24
    35ba:	91 83       	std	Z+1, r25	; 0x01
    35bc:	a2 83       	std	Z+2, r26	; 0x02
    35be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35c0:	fe 01       	movw	r30, r28
    35c2:	e3 5b       	subi	r30, 0xB3	; 179
    35c4:	ff 4f       	sbci	r31, 0xFF	; 255
    35c6:	60 81       	ld	r22, Z
    35c8:	71 81       	ldd	r23, Z+1	; 0x01
    35ca:	82 81       	ldd	r24, Z+2	; 0x02
    35cc:	93 81       	ldd	r25, Z+3	; 0x03
    35ce:	20 e0       	ldi	r18, 0x00	; 0
    35d0:	30 e0       	ldi	r19, 0x00	; 0
    35d2:	40 e8       	ldi	r20, 0x80	; 128
    35d4:	5f e3       	ldi	r21, 0x3F	; 63
    35d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35da:	88 23       	and	r24, r24
    35dc:	44 f4       	brge	.+16     	; 0x35ee <main+0x6ce>
		__ticks = 1;
    35de:	fe 01       	movw	r30, r28
    35e0:	e5 5b       	subi	r30, 0xB5	; 181
    35e2:	ff 4f       	sbci	r31, 0xFF	; 255
    35e4:	81 e0       	ldi	r24, 0x01	; 1
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	91 83       	std	Z+1, r25	; 0x01
    35ea:	80 83       	st	Z, r24
    35ec:	64 c0       	rjmp	.+200    	; 0x36b6 <main+0x796>
	else if (__tmp > 65535)
    35ee:	fe 01       	movw	r30, r28
    35f0:	e3 5b       	subi	r30, 0xB3	; 179
    35f2:	ff 4f       	sbci	r31, 0xFF	; 255
    35f4:	60 81       	ld	r22, Z
    35f6:	71 81       	ldd	r23, Z+1	; 0x01
    35f8:	82 81       	ldd	r24, Z+2	; 0x02
    35fa:	93 81       	ldd	r25, Z+3	; 0x03
    35fc:	20 e0       	ldi	r18, 0x00	; 0
    35fe:	3f ef       	ldi	r19, 0xFF	; 255
    3600:	4f e7       	ldi	r20, 0x7F	; 127
    3602:	57 e4       	ldi	r21, 0x47	; 71
    3604:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3608:	18 16       	cp	r1, r24
    360a:	0c f0       	brlt	.+2      	; 0x360e <main+0x6ee>
    360c:	43 c0       	rjmp	.+134    	; 0x3694 <main+0x774>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    360e:	fe 01       	movw	r30, r28
    3610:	ef 5a       	subi	r30, 0xAF	; 175
    3612:	ff 4f       	sbci	r31, 0xFF	; 255
    3614:	60 81       	ld	r22, Z
    3616:	71 81       	ldd	r23, Z+1	; 0x01
    3618:	82 81       	ldd	r24, Z+2	; 0x02
    361a:	93 81       	ldd	r25, Z+3	; 0x03
    361c:	20 e0       	ldi	r18, 0x00	; 0
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	40 e2       	ldi	r20, 0x20	; 32
    3622:	51 e4       	ldi	r21, 0x41	; 65
    3624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3628:	dc 01       	movw	r26, r24
    362a:	cb 01       	movw	r24, r22
    362c:	8e 01       	movw	r16, r28
    362e:	05 5b       	subi	r16, 0xB5	; 181
    3630:	1f 4f       	sbci	r17, 0xFF	; 255
    3632:	bc 01       	movw	r22, r24
    3634:	cd 01       	movw	r24, r26
    3636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    363a:	dc 01       	movw	r26, r24
    363c:	cb 01       	movw	r24, r22
    363e:	f8 01       	movw	r30, r16
    3640:	91 83       	std	Z+1, r25	; 0x01
    3642:	80 83       	st	Z, r24
    3644:	1f c0       	rjmp	.+62     	; 0x3684 <main+0x764>
    3646:	fe 01       	movw	r30, r28
    3648:	e7 5b       	subi	r30, 0xB7	; 183
    364a:	ff 4f       	sbci	r31, 0xFF	; 255
    364c:	88 ec       	ldi	r24, 0xC8	; 200
    364e:	90 e0       	ldi	r25, 0x00	; 0
    3650:	91 83       	std	Z+1, r25	; 0x01
    3652:	80 83       	st	Z, r24
    3654:	fe 01       	movw	r30, r28
    3656:	e7 5b       	subi	r30, 0xB7	; 183
    3658:	ff 4f       	sbci	r31, 0xFF	; 255
    365a:	80 81       	ld	r24, Z
    365c:	91 81       	ldd	r25, Z+1	; 0x01
    365e:	01 97       	sbiw	r24, 0x01	; 1
    3660:	f1 f7       	brne	.-4      	; 0x365e <main+0x73e>
    3662:	fe 01       	movw	r30, r28
    3664:	e7 5b       	subi	r30, 0xB7	; 183
    3666:	ff 4f       	sbci	r31, 0xFF	; 255
    3668:	91 83       	std	Z+1, r25	; 0x01
    366a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    366c:	de 01       	movw	r26, r28
    366e:	a5 5b       	subi	r26, 0xB5	; 181
    3670:	bf 4f       	sbci	r27, 0xFF	; 255
    3672:	fe 01       	movw	r30, r28
    3674:	e5 5b       	subi	r30, 0xB5	; 181
    3676:	ff 4f       	sbci	r31, 0xFF	; 255
    3678:	80 81       	ld	r24, Z
    367a:	91 81       	ldd	r25, Z+1	; 0x01
    367c:	01 97       	sbiw	r24, 0x01	; 1
    367e:	11 96       	adiw	r26, 0x01	; 1
    3680:	9c 93       	st	X, r25
    3682:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3684:	fe 01       	movw	r30, r28
    3686:	e5 5b       	subi	r30, 0xB5	; 181
    3688:	ff 4f       	sbci	r31, 0xFF	; 255
    368a:	80 81       	ld	r24, Z
    368c:	91 81       	ldd	r25, Z+1	; 0x01
    368e:	00 97       	sbiw	r24, 0x00	; 0
    3690:	d1 f6       	brne	.-76     	; 0x3646 <main+0x726>
    3692:	cf c1       	rjmp	.+926    	; 0x3a32 <main+0xb12>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3694:	8e 01       	movw	r16, r28
    3696:	05 5b       	subi	r16, 0xB5	; 181
    3698:	1f 4f       	sbci	r17, 0xFF	; 255
    369a:	fe 01       	movw	r30, r28
    369c:	e3 5b       	subi	r30, 0xB3	; 179
    369e:	ff 4f       	sbci	r31, 0xFF	; 255
    36a0:	60 81       	ld	r22, Z
    36a2:	71 81       	ldd	r23, Z+1	; 0x01
    36a4:	82 81       	ldd	r24, Z+2	; 0x02
    36a6:	93 81       	ldd	r25, Z+3	; 0x03
    36a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ac:	dc 01       	movw	r26, r24
    36ae:	cb 01       	movw	r24, r22
    36b0:	f8 01       	movw	r30, r16
    36b2:	91 83       	std	Z+1, r25	; 0x01
    36b4:	80 83       	st	Z, r24
    36b6:	de 01       	movw	r26, r28
    36b8:	a9 5b       	subi	r26, 0xB9	; 185
    36ba:	bf 4f       	sbci	r27, 0xFF	; 255
    36bc:	fe 01       	movw	r30, r28
    36be:	e5 5b       	subi	r30, 0xB5	; 181
    36c0:	ff 4f       	sbci	r31, 0xFF	; 255
    36c2:	80 81       	ld	r24, Z
    36c4:	91 81       	ldd	r25, Z+1	; 0x01
    36c6:	11 96       	adiw	r26, 0x01	; 1
    36c8:	9c 93       	st	X, r25
    36ca:	8e 93       	st	-X, r24
    36cc:	fe 01       	movw	r30, r28
    36ce:	e9 5b       	subi	r30, 0xB9	; 185
    36d0:	ff 4f       	sbci	r31, 0xFF	; 255
    36d2:	80 81       	ld	r24, Z
    36d4:	91 81       	ldd	r25, Z+1	; 0x01
    36d6:	01 97       	sbiw	r24, 0x01	; 1
    36d8:	f1 f7       	brne	.-4      	; 0x36d6 <main+0x7b6>
    36da:	fe 01       	movw	r30, r28
    36dc:	e9 5b       	subi	r30, 0xB9	; 185
    36de:	ff 4f       	sbci	r31, 0xFF	; 255
    36e0:	91 83       	std	Z+1, r25	; 0x01
    36e2:	80 83       	st	Z, r24
    36e4:	a6 c1       	rjmp	.+844    	; 0x3a32 <main+0xb12>
					}

			}
			else
			{
				tries--;
    36e6:	de 01       	movw	r26, r28
    36e8:	ab 58       	subi	r26, 0x8B	; 139
    36ea:	bf 4f       	sbci	r27, 0xFF	; 255
    36ec:	fe 01       	movw	r30, r28
    36ee:	eb 58       	subi	r30, 0x8B	; 139
    36f0:	ff 4f       	sbci	r31, 0xFF	; 255
    36f2:	80 81       	ld	r24, Z
    36f4:	81 50       	subi	r24, 0x01	; 1
    36f6:	8c 93       	st	X, r24
				LCD_voidSendCommand(LCD_CLEAR_DISBLAY);
    36f8:	81 e0       	ldi	r24, 0x01	; 1
    36fa:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
    36fe:	fe 01       	movw	r30, r28
    3700:	ed 5b       	subi	r30, 0xBD	; 189
    3702:	ff 4f       	sbci	r31, 0xFF	; 255
    3704:	80 e0       	ldi	r24, 0x00	; 0
    3706:	90 e0       	ldi	r25, 0x00	; 0
    3708:	a8 e4       	ldi	r26, 0x48	; 72
    370a:	b2 e4       	ldi	r27, 0x42	; 66
    370c:	80 83       	st	Z, r24
    370e:	91 83       	std	Z+1, r25	; 0x01
    3710:	a2 83       	std	Z+2, r26	; 0x02
    3712:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3714:	8e 01       	movw	r16, r28
    3716:	01 5c       	subi	r16, 0xC1	; 193
    3718:	1f 4f       	sbci	r17, 0xFF	; 255
    371a:	fe 01       	movw	r30, r28
    371c:	ed 5b       	subi	r30, 0xBD	; 189
    371e:	ff 4f       	sbci	r31, 0xFF	; 255
    3720:	60 81       	ld	r22, Z
    3722:	71 81       	ldd	r23, Z+1	; 0x01
    3724:	82 81       	ldd	r24, Z+2	; 0x02
    3726:	93 81       	ldd	r25, Z+3	; 0x03
    3728:	20 e0       	ldi	r18, 0x00	; 0
    372a:	30 e0       	ldi	r19, 0x00	; 0
    372c:	4a ef       	ldi	r20, 0xFA	; 250
    372e:	54 e4       	ldi	r21, 0x44	; 68
    3730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3734:	dc 01       	movw	r26, r24
    3736:	cb 01       	movw	r24, r22
    3738:	f8 01       	movw	r30, r16
    373a:	80 83       	st	Z, r24
    373c:	91 83       	std	Z+1, r25	; 0x01
    373e:	a2 83       	std	Z+2, r26	; 0x02
    3740:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3742:	fe 01       	movw	r30, r28
    3744:	ff 96       	adiw	r30, 0x3f	; 63
    3746:	60 81       	ld	r22, Z
    3748:	71 81       	ldd	r23, Z+1	; 0x01
    374a:	82 81       	ldd	r24, Z+2	; 0x02
    374c:	93 81       	ldd	r25, Z+3	; 0x03
    374e:	20 e0       	ldi	r18, 0x00	; 0
    3750:	30 e0       	ldi	r19, 0x00	; 0
    3752:	40 e8       	ldi	r20, 0x80	; 128
    3754:	5f e3       	ldi	r21, 0x3F	; 63
    3756:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    375a:	88 23       	and	r24, r24
    375c:	2c f4       	brge	.+10     	; 0x3768 <main+0x848>
		__ticks = 1;
    375e:	81 e0       	ldi	r24, 0x01	; 1
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	9e af       	std	Y+62, r25	; 0x3e
    3764:	8d af       	std	Y+61, r24	; 0x3d
    3766:	46 c0       	rjmp	.+140    	; 0x37f4 <main+0x8d4>
	else if (__tmp > 65535)
    3768:	fe 01       	movw	r30, r28
    376a:	ff 96       	adiw	r30, 0x3f	; 63
    376c:	60 81       	ld	r22, Z
    376e:	71 81       	ldd	r23, Z+1	; 0x01
    3770:	82 81       	ldd	r24, Z+2	; 0x02
    3772:	93 81       	ldd	r25, Z+3	; 0x03
    3774:	20 e0       	ldi	r18, 0x00	; 0
    3776:	3f ef       	ldi	r19, 0xFF	; 255
    3778:	4f e7       	ldi	r20, 0x7F	; 127
    377a:	57 e4       	ldi	r21, 0x47	; 71
    377c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3780:	18 16       	cp	r1, r24
    3782:	64 f5       	brge	.+88     	; 0x37dc <main+0x8bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3784:	fe 01       	movw	r30, r28
    3786:	ed 5b       	subi	r30, 0xBD	; 189
    3788:	ff 4f       	sbci	r31, 0xFF	; 255
    378a:	60 81       	ld	r22, Z
    378c:	71 81       	ldd	r23, Z+1	; 0x01
    378e:	82 81       	ldd	r24, Z+2	; 0x02
    3790:	93 81       	ldd	r25, Z+3	; 0x03
    3792:	20 e0       	ldi	r18, 0x00	; 0
    3794:	30 e0       	ldi	r19, 0x00	; 0
    3796:	40 e2       	ldi	r20, 0x20	; 32
    3798:	51 e4       	ldi	r21, 0x41	; 65
    379a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    379e:	dc 01       	movw	r26, r24
    37a0:	cb 01       	movw	r24, r22
    37a2:	bc 01       	movw	r22, r24
    37a4:	cd 01       	movw	r24, r26
    37a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37aa:	dc 01       	movw	r26, r24
    37ac:	cb 01       	movw	r24, r22
    37ae:	9e af       	std	Y+62, r25	; 0x3e
    37b0:	8d af       	std	Y+61, r24	; 0x3d
    37b2:	0f c0       	rjmp	.+30     	; 0x37d2 <main+0x8b2>
    37b4:	88 ec       	ldi	r24, 0xC8	; 200
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	9c af       	std	Y+60, r25	; 0x3c
    37ba:	8b af       	std	Y+59, r24	; 0x3b
    37bc:	8b ad       	ldd	r24, Y+59	; 0x3b
    37be:	9c ad       	ldd	r25, Y+60	; 0x3c
    37c0:	01 97       	sbiw	r24, 0x01	; 1
    37c2:	f1 f7       	brne	.-4      	; 0x37c0 <main+0x8a0>
    37c4:	9c af       	std	Y+60, r25	; 0x3c
    37c6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    37ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    37cc:	01 97       	sbiw	r24, 0x01	; 1
    37ce:	9e af       	std	Y+62, r25	; 0x3e
    37d0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    37d4:	9e ad       	ldd	r25, Y+62	; 0x3e
    37d6:	00 97       	sbiw	r24, 0x00	; 0
    37d8:	69 f7       	brne	.-38     	; 0x37b4 <main+0x894>
    37da:	16 c0       	rjmp	.+44     	; 0x3808 <main+0x8e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37dc:	fe 01       	movw	r30, r28
    37de:	ff 96       	adiw	r30, 0x3f	; 63
    37e0:	60 81       	ld	r22, Z
    37e2:	71 81       	ldd	r23, Z+1	; 0x01
    37e4:	82 81       	ldd	r24, Z+2	; 0x02
    37e6:	93 81       	ldd	r25, Z+3	; 0x03
    37e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ec:	dc 01       	movw	r26, r24
    37ee:	cb 01       	movw	r24, r22
    37f0:	9e af       	std	Y+62, r25	; 0x3e
    37f2:	8d af       	std	Y+61, r24	; 0x3d
    37f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    37f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    37f8:	9a af       	std	Y+58, r25	; 0x3a
    37fa:	89 af       	std	Y+57, r24	; 0x39
    37fc:	89 ad       	ldd	r24, Y+57	; 0x39
    37fe:	9a ad       	ldd	r25, Y+58	; 0x3a
    3800:	01 97       	sbiw	r24, 0x01	; 1
    3802:	f1 f7       	brne	.-4      	; 0x3800 <main+0x8e0>
    3804:	9a af       	std	Y+58, r25	; 0x3a
    3806:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(50);
				if(tries < 0)
    3808:	fe 01       	movw	r30, r28
    380a:	eb 58       	subi	r30, 0x8B	; 139
    380c:	ff 4f       	sbci	r31, 0xFF	; 255
    380e:	80 81       	ld	r24, Z
    3810:	88 23       	and	r24, r24
    3812:	0c f0       	brlt	.+2      	; 0x3816 <main+0x8f6>
    3814:	82 c0       	rjmp	.+260    	; 0x391a <main+0x9fa>
				{
					LCD_voidSendCommand(LCD_CLEAR_DISBLAY);
    3816:	81 e0       	ldi	r24, 0x01	; 1
    3818:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
					LCD_voidSendStringPos("No More Tries",1,1);
    381c:	80 ec       	ldi	r24, 0xC0	; 192
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	61 e0       	ldi	r22, 0x01	; 1
    3822:	41 e0       	ldi	r20, 0x01	; 1
    3824:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
					LCD_voidSendStringPos("Wait 20 Second",2,1);
    3828:	8e ec       	ldi	r24, 0xCE	; 206
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	62 e0       	ldi	r22, 0x02	; 2
    382e:	41 e0       	ldi	r20, 0x01	; 1
    3830:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
    3834:	80 e0       	ldi	r24, 0x00	; 0
    3836:	90 e4       	ldi	r25, 0x40	; 64
    3838:	ac e9       	ldi	r26, 0x9C	; 156
    383a:	b6 e4       	ldi	r27, 0x46	; 70
    383c:	8d ab       	std	Y+53, r24	; 0x35
    383e:	9e ab       	std	Y+54, r25	; 0x36
    3840:	af ab       	std	Y+55, r26	; 0x37
    3842:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3844:	6d a9       	ldd	r22, Y+53	; 0x35
    3846:	7e a9       	ldd	r23, Y+54	; 0x36
    3848:	8f a9       	ldd	r24, Y+55	; 0x37
    384a:	98 ad       	ldd	r25, Y+56	; 0x38
    384c:	20 e0       	ldi	r18, 0x00	; 0
    384e:	30 e0       	ldi	r19, 0x00	; 0
    3850:	4a ef       	ldi	r20, 0xFA	; 250
    3852:	54 e4       	ldi	r21, 0x44	; 68
    3854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3858:	dc 01       	movw	r26, r24
    385a:	cb 01       	movw	r24, r22
    385c:	89 ab       	std	Y+49, r24	; 0x31
    385e:	9a ab       	std	Y+50, r25	; 0x32
    3860:	ab ab       	std	Y+51, r26	; 0x33
    3862:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3864:	69 a9       	ldd	r22, Y+49	; 0x31
    3866:	7a a9       	ldd	r23, Y+50	; 0x32
    3868:	8b a9       	ldd	r24, Y+51	; 0x33
    386a:	9c a9       	ldd	r25, Y+52	; 0x34
    386c:	20 e0       	ldi	r18, 0x00	; 0
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	40 e8       	ldi	r20, 0x80	; 128
    3872:	5f e3       	ldi	r21, 0x3F	; 63
    3874:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3878:	88 23       	and	r24, r24
    387a:	2c f4       	brge	.+10     	; 0x3886 <main+0x966>
		__ticks = 1;
    387c:	81 e0       	ldi	r24, 0x01	; 1
    387e:	90 e0       	ldi	r25, 0x00	; 0
    3880:	98 ab       	std	Y+48, r25	; 0x30
    3882:	8f a7       	std	Y+47, r24	; 0x2f
    3884:	3f c0       	rjmp	.+126    	; 0x3904 <main+0x9e4>
	else if (__tmp > 65535)
    3886:	69 a9       	ldd	r22, Y+49	; 0x31
    3888:	7a a9       	ldd	r23, Y+50	; 0x32
    388a:	8b a9       	ldd	r24, Y+51	; 0x33
    388c:	9c a9       	ldd	r25, Y+52	; 0x34
    388e:	20 e0       	ldi	r18, 0x00	; 0
    3890:	3f ef       	ldi	r19, 0xFF	; 255
    3892:	4f e7       	ldi	r20, 0x7F	; 127
    3894:	57 e4       	ldi	r21, 0x47	; 71
    3896:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    389a:	18 16       	cp	r1, r24
    389c:	4c f5       	brge	.+82     	; 0x38f0 <main+0x9d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    389e:	6d a9       	ldd	r22, Y+53	; 0x35
    38a0:	7e a9       	ldd	r23, Y+54	; 0x36
    38a2:	8f a9       	ldd	r24, Y+55	; 0x37
    38a4:	98 ad       	ldd	r25, Y+56	; 0x38
    38a6:	20 e0       	ldi	r18, 0x00	; 0
    38a8:	30 e0       	ldi	r19, 0x00	; 0
    38aa:	40 e2       	ldi	r20, 0x20	; 32
    38ac:	51 e4       	ldi	r21, 0x41	; 65
    38ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b2:	dc 01       	movw	r26, r24
    38b4:	cb 01       	movw	r24, r22
    38b6:	bc 01       	movw	r22, r24
    38b8:	cd 01       	movw	r24, r26
    38ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38be:	dc 01       	movw	r26, r24
    38c0:	cb 01       	movw	r24, r22
    38c2:	98 ab       	std	Y+48, r25	; 0x30
    38c4:	8f a7       	std	Y+47, r24	; 0x2f
    38c6:	0f c0       	rjmp	.+30     	; 0x38e6 <main+0x9c6>
    38c8:	88 ec       	ldi	r24, 0xC8	; 200
    38ca:	90 e0       	ldi	r25, 0x00	; 0
    38cc:	9e a7       	std	Y+46, r25	; 0x2e
    38ce:	8d a7       	std	Y+45, r24	; 0x2d
    38d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    38d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    38d4:	01 97       	sbiw	r24, 0x01	; 1
    38d6:	f1 f7       	brne	.-4      	; 0x38d4 <main+0x9b4>
    38d8:	9e a7       	std	Y+46, r25	; 0x2e
    38da:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    38de:	98 a9       	ldd	r25, Y+48	; 0x30
    38e0:	01 97       	sbiw	r24, 0x01	; 1
    38e2:	98 ab       	std	Y+48, r25	; 0x30
    38e4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    38e8:	98 a9       	ldd	r25, Y+48	; 0x30
    38ea:	00 97       	sbiw	r24, 0x00	; 0
    38ec:	69 f7       	brne	.-38     	; 0x38c8 <main+0x9a8>
    38ee:	a1 c0       	rjmp	.+322    	; 0x3a32 <main+0xb12>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38f0:	69 a9       	ldd	r22, Y+49	; 0x31
    38f2:	7a a9       	ldd	r23, Y+50	; 0x32
    38f4:	8b a9       	ldd	r24, Y+51	; 0x33
    38f6:	9c a9       	ldd	r25, Y+52	; 0x34
    38f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38fc:	dc 01       	movw	r26, r24
    38fe:	cb 01       	movw	r24, r22
    3900:	98 ab       	std	Y+48, r25	; 0x30
    3902:	8f a7       	std	Y+47, r24	; 0x2f
    3904:	8f a5       	ldd	r24, Y+47	; 0x2f
    3906:	98 a9       	ldd	r25, Y+48	; 0x30
    3908:	9c a7       	std	Y+44, r25	; 0x2c
    390a:	8b a7       	std	Y+43, r24	; 0x2b
    390c:	8b a5       	ldd	r24, Y+43	; 0x2b
    390e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3910:	01 97       	sbiw	r24, 0x01	; 1
    3912:	f1 f7       	brne	.-4      	; 0x3910 <main+0x9f0>
    3914:	9c a7       	std	Y+44, r25	; 0x2c
    3916:	8b a7       	std	Y+43, r24	; 0x2b
    3918:	8c c0       	rjmp	.+280    	; 0x3a32 <main+0xb12>
					_delay_ms(20000);
				}
				else
				{
					LCD_voidSendStringPos("Wrong pass",1,6);
    391a:	8d ed       	ldi	r24, 0xDD	; 221
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	61 e0       	ldi	r22, 0x01	; 1
    3920:	46 e0       	ldi	r20, 0x06	; 6
    3922:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
					LCD_voidSendNumberPos(tries,2,3);
    3926:	fe 01       	movw	r30, r28
    3928:	eb 58       	subi	r30, 0x8B	; 139
    392a:	ff 4f       	sbci	r31, 0xFF	; 255
    392c:	80 81       	ld	r24, Z
    392e:	99 27       	eor	r25, r25
    3930:	87 fd       	sbrc	r24, 7
    3932:	90 95       	com	r25
    3934:	62 e0       	ldi	r22, 0x02	; 2
    3936:	43 e0       	ldi	r20, 0x03	; 3
    3938:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_voidSendNumberPos>
					LCD_voidSendStringPos(" Tries Left",2,6);
    393c:	88 ee       	ldi	r24, 0xE8	; 232
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	62 e0       	ldi	r22, 0x02	; 2
    3942:	46 e0       	ldi	r20, 0x06	; 6
    3944:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
    3948:	80 e0       	ldi	r24, 0x00	; 0
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	a8 e4       	ldi	r26, 0x48	; 72
    394e:	b4 e4       	ldi	r27, 0x44	; 68
    3950:	8f a3       	std	Y+39, r24	; 0x27
    3952:	98 a7       	std	Y+40, r25	; 0x28
    3954:	a9 a7       	std	Y+41, r26	; 0x29
    3956:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3958:	6f a1       	ldd	r22, Y+39	; 0x27
    395a:	78 a5       	ldd	r23, Y+40	; 0x28
    395c:	89 a5       	ldd	r24, Y+41	; 0x29
    395e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3960:	20 e0       	ldi	r18, 0x00	; 0
    3962:	30 e0       	ldi	r19, 0x00	; 0
    3964:	4a ef       	ldi	r20, 0xFA	; 250
    3966:	54 e4       	ldi	r21, 0x44	; 68
    3968:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    396c:	dc 01       	movw	r26, r24
    396e:	cb 01       	movw	r24, r22
    3970:	8b a3       	std	Y+35, r24	; 0x23
    3972:	9c a3       	std	Y+36, r25	; 0x24
    3974:	ad a3       	std	Y+37, r26	; 0x25
    3976:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3978:	6b a1       	ldd	r22, Y+35	; 0x23
    397a:	7c a1       	ldd	r23, Y+36	; 0x24
    397c:	8d a1       	ldd	r24, Y+37	; 0x25
    397e:	9e a1       	ldd	r25, Y+38	; 0x26
    3980:	20 e0       	ldi	r18, 0x00	; 0
    3982:	30 e0       	ldi	r19, 0x00	; 0
    3984:	40 e8       	ldi	r20, 0x80	; 128
    3986:	5f e3       	ldi	r21, 0x3F	; 63
    3988:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    398c:	88 23       	and	r24, r24
    398e:	2c f4       	brge	.+10     	; 0x399a <main+0xa7a>
		__ticks = 1;
    3990:	81 e0       	ldi	r24, 0x01	; 1
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	9a a3       	std	Y+34, r25	; 0x22
    3996:	89 a3       	std	Y+33, r24	; 0x21
    3998:	3f c0       	rjmp	.+126    	; 0x3a18 <main+0xaf8>
	else if (__tmp > 65535)
    399a:	6b a1       	ldd	r22, Y+35	; 0x23
    399c:	7c a1       	ldd	r23, Y+36	; 0x24
    399e:	8d a1       	ldd	r24, Y+37	; 0x25
    39a0:	9e a1       	ldd	r25, Y+38	; 0x26
    39a2:	20 e0       	ldi	r18, 0x00	; 0
    39a4:	3f ef       	ldi	r19, 0xFF	; 255
    39a6:	4f e7       	ldi	r20, 0x7F	; 127
    39a8:	57 e4       	ldi	r21, 0x47	; 71
    39aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39ae:	18 16       	cp	r1, r24
    39b0:	4c f5       	brge	.+82     	; 0x3a04 <main+0xae4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39b2:	6f a1       	ldd	r22, Y+39	; 0x27
    39b4:	78 a5       	ldd	r23, Y+40	; 0x28
    39b6:	89 a5       	ldd	r24, Y+41	; 0x29
    39b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    39ba:	20 e0       	ldi	r18, 0x00	; 0
    39bc:	30 e0       	ldi	r19, 0x00	; 0
    39be:	40 e2       	ldi	r20, 0x20	; 32
    39c0:	51 e4       	ldi	r21, 0x41	; 65
    39c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c6:	dc 01       	movw	r26, r24
    39c8:	cb 01       	movw	r24, r22
    39ca:	bc 01       	movw	r22, r24
    39cc:	cd 01       	movw	r24, r26
    39ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39d2:	dc 01       	movw	r26, r24
    39d4:	cb 01       	movw	r24, r22
    39d6:	9a a3       	std	Y+34, r25	; 0x22
    39d8:	89 a3       	std	Y+33, r24	; 0x21
    39da:	0f c0       	rjmp	.+30     	; 0x39fa <main+0xada>
    39dc:	88 ec       	ldi	r24, 0xC8	; 200
    39de:	90 e0       	ldi	r25, 0x00	; 0
    39e0:	98 a3       	std	Y+32, r25	; 0x20
    39e2:	8f 8f       	std	Y+31, r24	; 0x1f
    39e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    39e6:	98 a1       	ldd	r25, Y+32	; 0x20
    39e8:	01 97       	sbiw	r24, 0x01	; 1
    39ea:	f1 f7       	brne	.-4      	; 0x39e8 <main+0xac8>
    39ec:	98 a3       	std	Y+32, r25	; 0x20
    39ee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39f0:	89 a1       	ldd	r24, Y+33	; 0x21
    39f2:	9a a1       	ldd	r25, Y+34	; 0x22
    39f4:	01 97       	sbiw	r24, 0x01	; 1
    39f6:	9a a3       	std	Y+34, r25	; 0x22
    39f8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39fa:	89 a1       	ldd	r24, Y+33	; 0x21
    39fc:	9a a1       	ldd	r25, Y+34	; 0x22
    39fe:	00 97       	sbiw	r24, 0x00	; 0
    3a00:	69 f7       	brne	.-38     	; 0x39dc <main+0xabc>
    3a02:	14 c0       	rjmp	.+40     	; 0x3a2c <main+0xb0c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a04:	6b a1       	ldd	r22, Y+35	; 0x23
    3a06:	7c a1       	ldd	r23, Y+36	; 0x24
    3a08:	8d a1       	ldd	r24, Y+37	; 0x25
    3a0a:	9e a1       	ldd	r25, Y+38	; 0x26
    3a0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a10:	dc 01       	movw	r26, r24
    3a12:	cb 01       	movw	r24, r22
    3a14:	9a a3       	std	Y+34, r25	; 0x22
    3a16:	89 a3       	std	Y+33, r24	; 0x21
    3a18:	89 a1       	ldd	r24, Y+33	; 0x21
    3a1a:	9a a1       	ldd	r25, Y+34	; 0x22
    3a1c:	9e 8f       	std	Y+30, r25	; 0x1e
    3a1e:	8d 8f       	std	Y+29, r24	; 0x1d
    3a20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a22:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a24:	01 97       	sbiw	r24, 0x01	; 1
    3a26:	f1 f7       	brne	.-4      	; 0x3a24 <main+0xb04>
    3a28:	9e 8f       	std	Y+30, r25	; 0x1e
    3a2a:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(800);
					LCD_voidSendCommand(LCD_CLEAR_DISBLAY);
    3a2c:	81 e0       	ldi	r24, 0x01	; 1
    3a2e:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
				}

			}
			i=0;
    3a32:	fe 01       	movw	r30, r28
    3a34:	ea 58       	subi	r30, 0x8A	; 138
    3a36:	ff 4f       	sbci	r31, 0xFF	; 255
    3a38:	10 82       	st	Z, r1
			memset(Pass_string,'\0',20);
    3a3a:	ce 01       	movw	r24, r28
    3a3c:	86 58       	subi	r24, 0x86	; 134
    3a3e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a40:	60 e0       	ldi	r22, 0x00	; 0
    3a42:	70 e0       	ldi	r23, 0x00	; 0
    3a44:	44 e1       	ldi	r20, 0x14	; 20
    3a46:	50 e0       	ldi	r21, 0x00	; 0
    3a48:	0e 94 02 25 	call	0x4a04	; 0x4a04 <memset>
    3a4c:	a5 c1       	rjmp	.+842    	; 0x3d98 <main+0xe78>
			}
			else if(value == 'c')
    3a4e:	fe 01       	movw	r30, r28
    3a50:	e7 58       	subi	r30, 0x87	; 135
    3a52:	ff 4f       	sbci	r31, 0xFF	; 255
    3a54:	80 81       	ld	r24, Z
    3a56:	83 36       	cpi	r24, 0x63	; 99
    3a58:	89 f4       	brne	.+34     	; 0x3a7c <main+0xb5c>
			{
				LCD_voidSendCommand(LCD_CLEAR_DISBLAY);
    3a5a:	81 e0       	ldi	r24, 0x01	; 1
    3a5c:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
				i=0;
    3a60:	fe 01       	movw	r30, r28
    3a62:	ea 58       	subi	r30, 0x8A	; 138
    3a64:	ff 4f       	sbci	r31, 0xFF	; 255
    3a66:	10 82       	st	Z, r1
				memset(Pass_string,'\0',20);
    3a68:	ce 01       	movw	r24, r28
    3a6a:	86 58       	subi	r24, 0x86	; 134
    3a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    3a6e:	60 e0       	ldi	r22, 0x00	; 0
    3a70:	70 e0       	ldi	r23, 0x00	; 0
    3a72:	44 e1       	ldi	r20, 0x14	; 20
    3a74:	50 e0       	ldi	r21, 0x00	; 0
    3a76:	0e 94 02 25 	call	0x4a04	; 0x4a04 <memset>
    3a7a:	8e c1       	rjmp	.+796    	; 0x3d98 <main+0xe78>
			}
			else if(value != KPD_CHECK_KEY)
    3a7c:	fe 01       	movw	r30, r28
    3a7e:	e7 58       	subi	r30, 0x87	; 135
    3a80:	ff 4f       	sbci	r31, 0xFF	; 255
    3a82:	80 81       	ld	r24, Z
    3a84:	8f 3f       	cpi	r24, 0xFF	; 255
    3a86:	09 f4       	brne	.+2      	; 0x3a8a <main+0xb6a>
    3a88:	87 c1       	rjmp	.+782    	; 0x3d98 <main+0xe78>
			{
				LCD_voidSendDataPos(value,2,(i+1));
    3a8a:	fe 01       	movw	r30, r28
    3a8c:	ea 58       	subi	r30, 0x8A	; 138
    3a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a90:	80 81       	ld	r24, Z
    3a92:	98 2f       	mov	r25, r24
    3a94:	9f 5f       	subi	r25, 0xFF	; 255
    3a96:	fe 01       	movw	r30, r28
    3a98:	e7 58       	subi	r30, 0x87	; 135
    3a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9c:	80 81       	ld	r24, Z
    3a9e:	62 e0       	ldi	r22, 0x02	; 2
    3aa0:	49 2f       	mov	r20, r25
    3aa2:	0e 94 36 0c 	call	0x186c	; 0x186c <LCD_voidSendDataPos>
				Pass_string[i] = value;
    3aa6:	fe 01       	movw	r30, r28
    3aa8:	ea 58       	subi	r30, 0x8A	; 138
    3aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    3aac:	80 81       	ld	r24, Z
    3aae:	28 2f       	mov	r18, r24
    3ab0:	30 e0       	ldi	r19, 0x00	; 0
    3ab2:	ce 01       	movw	r24, r28
    3ab4:	86 58       	subi	r24, 0x86	; 134
    3ab6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ab8:	dc 01       	movw	r26, r24
    3aba:	a2 0f       	add	r26, r18
    3abc:	b3 1f       	adc	r27, r19
    3abe:	fe 01       	movw	r30, r28
    3ac0:	e7 58       	subi	r30, 0x87	; 135
    3ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac4:	80 81       	ld	r24, Z
    3ac6:	8c 93       	st	X, r24
    3ac8:	80 e0       	ldi	r24, 0x00	; 0
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	a8 e4       	ldi	r26, 0x48	; 72
    3ace:	b3 e4       	ldi	r27, 0x43	; 67
    3ad0:	89 8f       	std	Y+25, r24	; 0x19
    3ad2:	9a 8f       	std	Y+26, r25	; 0x1a
    3ad4:	ab 8f       	std	Y+27, r26	; 0x1b
    3ad6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ad8:	69 8d       	ldd	r22, Y+25	; 0x19
    3ada:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3adc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ade:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ae0:	20 e0       	ldi	r18, 0x00	; 0
    3ae2:	30 e0       	ldi	r19, 0x00	; 0
    3ae4:	4a ef       	ldi	r20, 0xFA	; 250
    3ae6:	54 e4       	ldi	r21, 0x44	; 68
    3ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aec:	dc 01       	movw	r26, r24
    3aee:	cb 01       	movw	r24, r22
    3af0:	8d 8b       	std	Y+21, r24	; 0x15
    3af2:	9e 8b       	std	Y+22, r25	; 0x16
    3af4:	af 8b       	std	Y+23, r26	; 0x17
    3af6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3af8:	6d 89       	ldd	r22, Y+21	; 0x15
    3afa:	7e 89       	ldd	r23, Y+22	; 0x16
    3afc:	8f 89       	ldd	r24, Y+23	; 0x17
    3afe:	98 8d       	ldd	r25, Y+24	; 0x18
    3b00:	20 e0       	ldi	r18, 0x00	; 0
    3b02:	30 e0       	ldi	r19, 0x00	; 0
    3b04:	40 e8       	ldi	r20, 0x80	; 128
    3b06:	5f e3       	ldi	r21, 0x3F	; 63
    3b08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b0c:	88 23       	and	r24, r24
    3b0e:	2c f4       	brge	.+10     	; 0x3b1a <main+0xbfa>
		__ticks = 1;
    3b10:	81 e0       	ldi	r24, 0x01	; 1
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	9c 8b       	std	Y+20, r25	; 0x14
    3b16:	8b 8b       	std	Y+19, r24	; 0x13
    3b18:	3f c0       	rjmp	.+126    	; 0x3b98 <main+0xc78>
	else if (__tmp > 65535)
    3b1a:	6d 89       	ldd	r22, Y+21	; 0x15
    3b1c:	7e 89       	ldd	r23, Y+22	; 0x16
    3b1e:	8f 89       	ldd	r24, Y+23	; 0x17
    3b20:	98 8d       	ldd	r25, Y+24	; 0x18
    3b22:	20 e0       	ldi	r18, 0x00	; 0
    3b24:	3f ef       	ldi	r19, 0xFF	; 255
    3b26:	4f e7       	ldi	r20, 0x7F	; 127
    3b28:	57 e4       	ldi	r21, 0x47	; 71
    3b2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b2e:	18 16       	cp	r1, r24
    3b30:	4c f5       	brge	.+82     	; 0x3b84 <main+0xc64>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b32:	69 8d       	ldd	r22, Y+25	; 0x19
    3b34:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b3a:	20 e0       	ldi	r18, 0x00	; 0
    3b3c:	30 e0       	ldi	r19, 0x00	; 0
    3b3e:	40 e2       	ldi	r20, 0x20	; 32
    3b40:	51 e4       	ldi	r21, 0x41	; 65
    3b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b46:	dc 01       	movw	r26, r24
    3b48:	cb 01       	movw	r24, r22
    3b4a:	bc 01       	movw	r22, r24
    3b4c:	cd 01       	movw	r24, r26
    3b4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b52:	dc 01       	movw	r26, r24
    3b54:	cb 01       	movw	r24, r22
    3b56:	9c 8b       	std	Y+20, r25	; 0x14
    3b58:	8b 8b       	std	Y+19, r24	; 0x13
    3b5a:	0f c0       	rjmp	.+30     	; 0x3b7a <main+0xc5a>
    3b5c:	88 ec       	ldi	r24, 0xC8	; 200
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	9a 8b       	std	Y+18, r25	; 0x12
    3b62:	89 8b       	std	Y+17, r24	; 0x11
    3b64:	89 89       	ldd	r24, Y+17	; 0x11
    3b66:	9a 89       	ldd	r25, Y+18	; 0x12
    3b68:	01 97       	sbiw	r24, 0x01	; 1
    3b6a:	f1 f7       	brne	.-4      	; 0x3b68 <main+0xc48>
    3b6c:	9a 8b       	std	Y+18, r25	; 0x12
    3b6e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b70:	8b 89       	ldd	r24, Y+19	; 0x13
    3b72:	9c 89       	ldd	r25, Y+20	; 0x14
    3b74:	01 97       	sbiw	r24, 0x01	; 1
    3b76:	9c 8b       	std	Y+20, r25	; 0x14
    3b78:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b7a:	8b 89       	ldd	r24, Y+19	; 0x13
    3b7c:	9c 89       	ldd	r25, Y+20	; 0x14
    3b7e:	00 97       	sbiw	r24, 0x00	; 0
    3b80:	69 f7       	brne	.-38     	; 0x3b5c <main+0xc3c>
    3b82:	14 c0       	rjmp	.+40     	; 0x3bac <main+0xc8c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b84:	6d 89       	ldd	r22, Y+21	; 0x15
    3b86:	7e 89       	ldd	r23, Y+22	; 0x16
    3b88:	8f 89       	ldd	r24, Y+23	; 0x17
    3b8a:	98 8d       	ldd	r25, Y+24	; 0x18
    3b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b90:	dc 01       	movw	r26, r24
    3b92:	cb 01       	movw	r24, r22
    3b94:	9c 8b       	std	Y+20, r25	; 0x14
    3b96:	8b 8b       	std	Y+19, r24	; 0x13
    3b98:	8b 89       	ldd	r24, Y+19	; 0x13
    3b9a:	9c 89       	ldd	r25, Y+20	; 0x14
    3b9c:	98 8b       	std	Y+16, r25	; 0x10
    3b9e:	8f 87       	std	Y+15, r24	; 0x0f
    3ba0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ba2:	98 89       	ldd	r25, Y+16	; 0x10
    3ba4:	01 97       	sbiw	r24, 0x01	; 1
    3ba6:	f1 f7       	brne	.-4      	; 0x3ba4 <main+0xc84>
    3ba8:	98 8b       	std	Y+16, r25	; 0x10
    3baa:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(200);
				LCD_voidSendDataPos('*',2,(i+1));
    3bac:	fe 01       	movw	r30, r28
    3bae:	ea 58       	subi	r30, 0x8A	; 138
    3bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb2:	80 81       	ld	r24, Z
    3bb4:	98 2f       	mov	r25, r24
    3bb6:	9f 5f       	subi	r25, 0xFF	; 255
    3bb8:	8a e2       	ldi	r24, 0x2A	; 42
    3bba:	62 e0       	ldi	r22, 0x02	; 2
    3bbc:	49 2f       	mov	r20, r25
    3bbe:	0e 94 36 0c 	call	0x186c	; 0x186c <LCD_voidSendDataPos>
				i++;
    3bc2:	de 01       	movw	r26, r28
    3bc4:	aa 58       	subi	r26, 0x8A	; 138
    3bc6:	bf 4f       	sbci	r27, 0xFF	; 255
    3bc8:	fe 01       	movw	r30, r28
    3bca:	ea 58       	subi	r30, 0x8A	; 138
    3bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bce:	80 81       	ld	r24, Z
    3bd0:	8f 5f       	subi	r24, 0xFF	; 255
    3bd2:	8c 93       	st	X, r24
    3bd4:	e1 c0       	rjmp	.+450    	; 0x3d98 <main+0xe78>
			}
		}
		else
		{
			LCD_voidSendStringPos("SET Password :",1,1);//set pass
    3bd6:	84 ef       	ldi	r24, 0xF4	; 244
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	61 e0       	ldi	r22, 0x01	; 1
    3bdc:	41 e0       	ldi	r20, 0x01	; 1
    3bde:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
			value = KPD_u8GetPressKey();
    3be2:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <KPD_u8GetPressKey>
    3be6:	fe 01       	movw	r30, r28
    3be8:	e7 58       	subi	r30, 0x87	; 135
    3bea:	ff 4f       	sbci	r31, 0xFF	; 255
    3bec:	80 83       	st	Z, r24
			if(value == '=')
    3bee:	fe 01       	movw	r30, r28
    3bf0:	e7 58       	subi	r30, 0x87	; 135
    3bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf4:	80 81       	ld	r24, Z
    3bf6:	8d 33       	cpi	r24, 0x3D	; 61
    3bf8:	19 f5       	brne	.+70     	; 0x3c40 <main+0xd20>
			{
				i=0;
    3bfa:	fe 01       	movw	r30, r28
    3bfc:	ea 58       	subi	r30, 0x8A	; 138
    3bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3c00:	10 82       	st	Z, r1
				pass = atoi (Pass_string);
    3c02:	ce 01       	movw	r24, r28
    3c04:	86 58       	subi	r24, 0x86	; 134
    3c06:	9f 4f       	sbci	r25, 0xFF	; 255
    3c08:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <atoi>
    3c0c:	fe 01       	movw	r30, r28
    3c0e:	e9 58       	subi	r30, 0x89	; 137
    3c10:	ff 4f       	sbci	r31, 0xFF	; 255
    3c12:	91 83       	std	Z+1, r25	; 0x01
    3c14:	80 83       	st	Z, r24
				EEPROM_voidWriteData(pass,0);
    3c16:	fe 01       	movw	r30, r28
    3c18:	e9 58       	subi	r30, 0x89	; 137
    3c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1c:	80 81       	ld	r24, Z
    3c1e:	60 e0       	ldi	r22, 0x00	; 0
    3c20:	70 e0       	ldi	r23, 0x00	; 0
    3c22:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <EEPROM_voidWriteData>
				LCD_voidSendCommand(LCD_CLEAR_DISBLAY);
    3c26:	81 e0       	ldi	r24, 0x01	; 1
    3c28:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
				memset(Pass_string,'\0',20);
    3c2c:	ce 01       	movw	r24, r28
    3c2e:	86 58       	subi	r24, 0x86	; 134
    3c30:	9f 4f       	sbci	r25, 0xFF	; 255
    3c32:	60 e0       	ldi	r22, 0x00	; 0
    3c34:	70 e0       	ldi	r23, 0x00	; 0
    3c36:	44 e1       	ldi	r20, 0x14	; 20
    3c38:	50 e0       	ldi	r21, 0x00	; 0
    3c3a:	0e 94 02 25 	call	0x4a04	; 0x4a04 <memset>
    3c3e:	ac c0       	rjmp	.+344    	; 0x3d98 <main+0xe78>
			}
			else if(value != KPD_CHECK_KEY)
    3c40:	fe 01       	movw	r30, r28
    3c42:	e7 58       	subi	r30, 0x87	; 135
    3c44:	ff 4f       	sbci	r31, 0xFF	; 255
    3c46:	80 81       	ld	r24, Z
    3c48:	8f 3f       	cpi	r24, 0xFF	; 255
    3c4a:	09 f4       	brne	.+2      	; 0x3c4e <main+0xd2e>
    3c4c:	a5 c0       	rjmp	.+330    	; 0x3d98 <main+0xe78>
			{
				LCD_voidSendDataPos(value,2,(i+1));
    3c4e:	fe 01       	movw	r30, r28
    3c50:	ea 58       	subi	r30, 0x8A	; 138
    3c52:	ff 4f       	sbci	r31, 0xFF	; 255
    3c54:	80 81       	ld	r24, Z
    3c56:	98 2f       	mov	r25, r24
    3c58:	9f 5f       	subi	r25, 0xFF	; 255
    3c5a:	fe 01       	movw	r30, r28
    3c5c:	e7 58       	subi	r30, 0x87	; 135
    3c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c60:	80 81       	ld	r24, Z
    3c62:	62 e0       	ldi	r22, 0x02	; 2
    3c64:	49 2f       	mov	r20, r25
    3c66:	0e 94 36 0c 	call	0x186c	; 0x186c <LCD_voidSendDataPos>
				Pass_string[i] = value;
    3c6a:	fe 01       	movw	r30, r28
    3c6c:	ea 58       	subi	r30, 0x8A	; 138
    3c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c70:	80 81       	ld	r24, Z
    3c72:	28 2f       	mov	r18, r24
    3c74:	30 e0       	ldi	r19, 0x00	; 0
    3c76:	ce 01       	movw	r24, r28
    3c78:	86 58       	subi	r24, 0x86	; 134
    3c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c7c:	dc 01       	movw	r26, r24
    3c7e:	a2 0f       	add	r26, r18
    3c80:	b3 1f       	adc	r27, r19
    3c82:	fe 01       	movw	r30, r28
    3c84:	e7 58       	subi	r30, 0x87	; 135
    3c86:	ff 4f       	sbci	r31, 0xFF	; 255
    3c88:	80 81       	ld	r24, Z
    3c8a:	8c 93       	st	X, r24
    3c8c:	80 e0       	ldi	r24, 0x00	; 0
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	a8 e4       	ldi	r26, 0x48	; 72
    3c92:	b3 e4       	ldi	r27, 0x43	; 67
    3c94:	8b 87       	std	Y+11, r24	; 0x0b
    3c96:	9c 87       	std	Y+12, r25	; 0x0c
    3c98:	ad 87       	std	Y+13, r26	; 0x0d
    3c9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ca0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ca2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ca4:	20 e0       	ldi	r18, 0x00	; 0
    3ca6:	30 e0       	ldi	r19, 0x00	; 0
    3ca8:	4a ef       	ldi	r20, 0xFA	; 250
    3caa:	54 e4       	ldi	r21, 0x44	; 68
    3cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cb0:	dc 01       	movw	r26, r24
    3cb2:	cb 01       	movw	r24, r22
    3cb4:	8f 83       	std	Y+7, r24	; 0x07
    3cb6:	98 87       	std	Y+8, r25	; 0x08
    3cb8:	a9 87       	std	Y+9, r26	; 0x09
    3cba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3cbc:	6f 81       	ldd	r22, Y+7	; 0x07
    3cbe:	78 85       	ldd	r23, Y+8	; 0x08
    3cc0:	89 85       	ldd	r24, Y+9	; 0x09
    3cc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cc4:	20 e0       	ldi	r18, 0x00	; 0
    3cc6:	30 e0       	ldi	r19, 0x00	; 0
    3cc8:	40 e8       	ldi	r20, 0x80	; 128
    3cca:	5f e3       	ldi	r21, 0x3F	; 63
    3ccc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cd0:	88 23       	and	r24, r24
    3cd2:	2c f4       	brge	.+10     	; 0x3cde <main+0xdbe>
		__ticks = 1;
    3cd4:	81 e0       	ldi	r24, 0x01	; 1
    3cd6:	90 e0       	ldi	r25, 0x00	; 0
    3cd8:	9e 83       	std	Y+6, r25	; 0x06
    3cda:	8d 83       	std	Y+5, r24	; 0x05
    3cdc:	3f c0       	rjmp	.+126    	; 0x3d5c <main+0xe3c>
	else if (__tmp > 65535)
    3cde:	6f 81       	ldd	r22, Y+7	; 0x07
    3ce0:	78 85       	ldd	r23, Y+8	; 0x08
    3ce2:	89 85       	ldd	r24, Y+9	; 0x09
    3ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ce6:	20 e0       	ldi	r18, 0x00	; 0
    3ce8:	3f ef       	ldi	r19, 0xFF	; 255
    3cea:	4f e7       	ldi	r20, 0x7F	; 127
    3cec:	57 e4       	ldi	r21, 0x47	; 71
    3cee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cf2:	18 16       	cp	r1, r24
    3cf4:	4c f5       	brge	.+82     	; 0x3d48 <main+0xe28>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cf6:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cf8:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cfe:	20 e0       	ldi	r18, 0x00	; 0
    3d00:	30 e0       	ldi	r19, 0x00	; 0
    3d02:	40 e2       	ldi	r20, 0x20	; 32
    3d04:	51 e4       	ldi	r21, 0x41	; 65
    3d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d0a:	dc 01       	movw	r26, r24
    3d0c:	cb 01       	movw	r24, r22
    3d0e:	bc 01       	movw	r22, r24
    3d10:	cd 01       	movw	r24, r26
    3d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d16:	dc 01       	movw	r26, r24
    3d18:	cb 01       	movw	r24, r22
    3d1a:	9e 83       	std	Y+6, r25	; 0x06
    3d1c:	8d 83       	std	Y+5, r24	; 0x05
    3d1e:	0f c0       	rjmp	.+30     	; 0x3d3e <main+0xe1e>
    3d20:	88 ec       	ldi	r24, 0xC8	; 200
    3d22:	90 e0       	ldi	r25, 0x00	; 0
    3d24:	9c 83       	std	Y+4, r25	; 0x04
    3d26:	8b 83       	std	Y+3, r24	; 0x03
    3d28:	8b 81       	ldd	r24, Y+3	; 0x03
    3d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d2c:	01 97       	sbiw	r24, 0x01	; 1
    3d2e:	f1 f7       	brne	.-4      	; 0x3d2c <main+0xe0c>
    3d30:	9c 83       	std	Y+4, r25	; 0x04
    3d32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d34:	8d 81       	ldd	r24, Y+5	; 0x05
    3d36:	9e 81       	ldd	r25, Y+6	; 0x06
    3d38:	01 97       	sbiw	r24, 0x01	; 1
    3d3a:	9e 83       	std	Y+6, r25	; 0x06
    3d3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d40:	9e 81       	ldd	r25, Y+6	; 0x06
    3d42:	00 97       	sbiw	r24, 0x00	; 0
    3d44:	69 f7       	brne	.-38     	; 0x3d20 <main+0xe00>
    3d46:	14 c0       	rjmp	.+40     	; 0x3d70 <main+0xe50>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d48:	6f 81       	ldd	r22, Y+7	; 0x07
    3d4a:	78 85       	ldd	r23, Y+8	; 0x08
    3d4c:	89 85       	ldd	r24, Y+9	; 0x09
    3d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d54:	dc 01       	movw	r26, r24
    3d56:	cb 01       	movw	r24, r22
    3d58:	9e 83       	std	Y+6, r25	; 0x06
    3d5a:	8d 83       	std	Y+5, r24	; 0x05
    3d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d60:	9a 83       	std	Y+2, r25	; 0x02
    3d62:	89 83       	std	Y+1, r24	; 0x01
    3d64:	89 81       	ldd	r24, Y+1	; 0x01
    3d66:	9a 81       	ldd	r25, Y+2	; 0x02
    3d68:	01 97       	sbiw	r24, 0x01	; 1
    3d6a:	f1 f7       	brne	.-4      	; 0x3d68 <main+0xe48>
    3d6c:	9a 83       	std	Y+2, r25	; 0x02
    3d6e:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(200);
				LCD_voidSendDataPos('*',2,(i+1));
    3d70:	fe 01       	movw	r30, r28
    3d72:	ea 58       	subi	r30, 0x8A	; 138
    3d74:	ff 4f       	sbci	r31, 0xFF	; 255
    3d76:	80 81       	ld	r24, Z
    3d78:	98 2f       	mov	r25, r24
    3d7a:	9f 5f       	subi	r25, 0xFF	; 255
    3d7c:	8a e2       	ldi	r24, 0x2A	; 42
    3d7e:	62 e0       	ldi	r22, 0x02	; 2
    3d80:	49 2f       	mov	r20, r25
    3d82:	0e 94 36 0c 	call	0x186c	; 0x186c <LCD_voidSendDataPos>
				i++;
    3d86:	de 01       	movw	r26, r28
    3d88:	aa 58       	subi	r26, 0x8A	; 138
    3d8a:	bf 4f       	sbci	r27, 0xFF	; 255
    3d8c:	fe 01       	movw	r30, r28
    3d8e:	ea 58       	subi	r30, 0x8A	; 138
    3d90:	ff 4f       	sbci	r31, 0xFF	; 255
    3d92:	80 81       	ld	r24, Z
    3d94:	8f 5f       	subi	r24, 0xFF	; 255
    3d96:	8c 93       	st	X, r24
			}
		}
		if(true_value >55)
    3d98:	fe 01       	movw	r30, r28
    3d9a:	ee 56       	subi	r30, 0x6E	; 110
    3d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9e:	80 81       	ld	r24, Z
    3da0:	91 81       	ldd	r25, Z+1	; 0x01
    3da2:	88 33       	cpi	r24, 0x38	; 56
    3da4:	91 05       	cpc	r25, r1
    3da6:	30 f0       	brcs	.+12     	; 0x3db4 <main+0xe94>
		{
			DIO_voidSetPinvalue(DIO_PORTC,DIO_PIN7,DIO_HIGH);
    3da8:	82 e0       	ldi	r24, 0x02	; 2
    3daa:	67 e0       	ldi	r22, 0x07	; 7
    3dac:	41 e0       	ldi	r20, 0x01	; 1
    3dae:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_voidSetPinvalue>
    3db2:	0f c9       	rjmp	.-3554   	; 0x2fd2 <main+0xb2>
		}
		else
		{
			DIO_voidSetPinvalue(DIO_PORTC,DIO_PIN7,DIO_LOW);
    3db4:	82 e0       	ldi	r24, 0x02	; 2
    3db6:	67 e0       	ldi	r22, 0x07	; 7
    3db8:	40 e0       	ldi	r20, 0x00	; 0
    3dba:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_voidSetPinvalue>
    3dbe:	09 c9       	rjmp	.-3566   	; 0x2fd2 <main+0xb2>

00003dc0 <Mode_1>:




void Mode_1(u8 *Air_cound_Degree,u8 *flag,u8 *chose)
{
    3dc0:	df 93       	push	r29
    3dc2:	cf 93       	push	r28
    3dc4:	cd b7       	in	r28, 0x3d	; 61
    3dc6:	de b7       	in	r29, 0x3e	; 62
    3dc8:	67 97       	sbiw	r28, 0x17	; 23
    3dca:	0f b6       	in	r0, 0x3f	; 63
    3dcc:	f8 94       	cli
    3dce:	de bf       	out	0x3e, r29	; 62
    3dd0:	0f be       	out	0x3f, r0	; 63
    3dd2:	cd bf       	out	0x3d, r28	; 61
    3dd4:	99 8b       	std	Y+17, r25	; 0x11
    3dd6:	88 8b       	std	Y+16, r24	; 0x10
    3dd8:	7b 8b       	std	Y+19, r23	; 0x13
    3dda:	6a 8b       	std	Y+18, r22	; 0x12
    3ddc:	5d 8b       	std	Y+21, r21	; 0x15
    3dde:	4c 8b       	std	Y+20, r20	; 0x14
	u8 v=0;
    3de0:	1f 86       	std	Y+15, r1	; 0x0f
	if(*flag==1)
    3de2:	ea 89       	ldd	r30, Y+18	; 0x12
    3de4:	fb 89       	ldd	r31, Y+19	; 0x13
    3de6:	80 81       	ld	r24, Z
    3de8:	81 30       	cpi	r24, 0x01	; 1
    3dea:	19 f4       	brne	.+6      	; 0x3df2 <Mode_1+0x32>
	{
		LCD_voidSendCommand(LCD_CLEAR_DISBLAY);
    3dec:	81 e0       	ldi	r24, 0x01	; 1
    3dee:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
	}
	*flag=2;
    3df2:	ea 89       	ldd	r30, Y+18	; 0x12
    3df4:	fb 89       	ldd	r31, Y+19	; 0x13
    3df6:	82 e0       	ldi	r24, 0x02	; 2
    3df8:	80 83       	st	Z, r24
	LCD_voidSendStringPos("1-Lower the temp",1,1);
    3dfa:	83 e0       	ldi	r24, 0x03	; 3
    3dfc:	91 e0       	ldi	r25, 0x01	; 1
    3dfe:	61 e0       	ldi	r22, 0x01	; 1
    3e00:	41 e0       	ldi	r20, 0x01	; 1
    3e02:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
	LCD_voidSendStringPos("2-Raise the temp",2,1);
    3e06:	84 e1       	ldi	r24, 0x14	; 20
    3e08:	91 e0       	ldi	r25, 0x01	; 1
    3e0a:	62 e0       	ldi	r22, 0x02	; 2
    3e0c:	41 e0       	ldi	r20, 0x01	; 1
    3e0e:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
	LCD_voidSendStringPos("3-STOP ",3,1);
    3e12:	85 e2       	ldi	r24, 0x25	; 37
    3e14:	91 e0       	ldi	r25, 0x01	; 1
    3e16:	63 e0       	ldi	r22, 0x03	; 3
    3e18:	41 e0       	ldi	r20, 0x01	; 1
    3e1a:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
	LCD_voidSendStringPos("4-Back",4,1);
    3e1e:	8d e2       	ldi	r24, 0x2D	; 45
    3e20:	91 e0       	ldi	r25, 0x01	; 1
    3e22:	64 e0       	ldi	r22, 0x04	; 4
    3e24:	41 e0       	ldi	r20, 0x01	; 1
    3e26:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
	LCD_voidSendNumberPos(*Air_cound_Degree,4,18);
    3e2a:	e8 89       	ldd	r30, Y+16	; 0x10
    3e2c:	f9 89       	ldd	r31, Y+17	; 0x11
    3e2e:	80 81       	ld	r24, Z
    3e30:	88 2f       	mov	r24, r24
    3e32:	90 e0       	ldi	r25, 0x00	; 0
    3e34:	64 e0       	ldi	r22, 0x04	; 4
    3e36:	42 e1       	ldi	r20, 0x12	; 18
    3e38:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_voidSendNumberPos>
	v = KPD_u8GetPressKey();
    3e3c:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <KPD_u8GetPressKey>
    3e40:	8f 87       	std	Y+15, r24	; 0x0f
	SPI_u8Tranceive(v);
    3e42:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e44:	0e 94 a2 06 	call	0xd44	; 0xd44 <SPI_u8Tranceive>
	switch(v)
    3e48:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e4a:	28 2f       	mov	r18, r24
    3e4c:	30 e0       	ldi	r19, 0x00	; 0
    3e4e:	3f 8b       	std	Y+23, r19	; 0x17
    3e50:	2e 8b       	std	Y+22, r18	; 0x16
    3e52:	8e 89       	ldd	r24, Y+22	; 0x16
    3e54:	9f 89       	ldd	r25, Y+23	; 0x17
    3e56:	82 33       	cpi	r24, 0x32	; 50
    3e58:	91 05       	cpc	r25, r1
    3e5a:	21 f1       	breq	.+72     	; 0x3ea4 <Mode_1+0xe4>
    3e5c:	2e 89       	ldd	r18, Y+22	; 0x16
    3e5e:	3f 89       	ldd	r19, Y+23	; 0x17
    3e60:	23 33       	cpi	r18, 0x33	; 51
    3e62:	31 05       	cpc	r19, r1
    3e64:	34 f4       	brge	.+12     	; 0x3e72 <Mode_1+0xb2>
    3e66:	8e 89       	ldd	r24, Y+22	; 0x16
    3e68:	9f 89       	ldd	r25, Y+23	; 0x17
    3e6a:	81 33       	cpi	r24, 0x31	; 49
    3e6c:	91 05       	cpc	r25, r1
    3e6e:	61 f0       	breq	.+24     	; 0x3e88 <Mode_1+0xc8>
    3e70:	38 c0       	rjmp	.+112    	; 0x3ee2 <Mode_1+0x122>
    3e72:	2e 89       	ldd	r18, Y+22	; 0x16
    3e74:	3f 89       	ldd	r19, Y+23	; 0x17
    3e76:	23 33       	cpi	r18, 0x33	; 51
    3e78:	31 05       	cpc	r19, r1
    3e7a:	11 f1       	breq	.+68     	; 0x3ec0 <Mode_1+0x100>
    3e7c:	8e 89       	ldd	r24, Y+22	; 0x16
    3e7e:	9f 89       	ldd	r25, Y+23	; 0x17
    3e80:	84 33       	cpi	r24, 0x34	; 52
    3e82:	91 05       	cpc	r25, r1
    3e84:	11 f1       	breq	.+68     	; 0x3eca <Mode_1+0x10a>
    3e86:	2d c0       	rjmp	.+90     	; 0x3ee2 <Mode_1+0x122>
	{
		case '1':
			if(*Air_cound_Degree<30)
    3e88:	e8 89       	ldd	r30, Y+16	; 0x10
    3e8a:	f9 89       	ldd	r31, Y+17	; 0x11
    3e8c:	80 81       	ld	r24, Z
    3e8e:	8e 31       	cpi	r24, 0x1E	; 30
    3e90:	08 f0       	brcs	.+2      	; 0x3e94 <Mode_1+0xd4>
    3e92:	a6 c0       	rjmp	.+332    	; 0x3fe0 <Mode_1+0x220>
			{
				(*Air_cound_Degree)++;
    3e94:	e8 89       	ldd	r30, Y+16	; 0x10
    3e96:	f9 89       	ldd	r31, Y+17	; 0x11
    3e98:	80 81       	ld	r24, Z
    3e9a:	8f 5f       	subi	r24, 0xFF	; 255
    3e9c:	e8 89       	ldd	r30, Y+16	; 0x10
    3e9e:	f9 89       	ldd	r31, Y+17	; 0x11
    3ea0:	80 83       	st	Z, r24
    3ea2:	9e c0       	rjmp	.+316    	; 0x3fe0 <Mode_1+0x220>
			}
			break;
		case '2':
			if(*Air_cound_Degree > 18)
    3ea4:	e8 89       	ldd	r30, Y+16	; 0x10
    3ea6:	f9 89       	ldd	r31, Y+17	; 0x11
    3ea8:	80 81       	ld	r24, Z
    3eaa:	83 31       	cpi	r24, 0x13	; 19
    3eac:	08 f4       	brcc	.+2      	; 0x3eb0 <Mode_1+0xf0>
    3eae:	98 c0       	rjmp	.+304    	; 0x3fe0 <Mode_1+0x220>
			{
				(*Air_cound_Degree)--;
    3eb0:	e8 89       	ldd	r30, Y+16	; 0x10
    3eb2:	f9 89       	ldd	r31, Y+17	; 0x11
    3eb4:	80 81       	ld	r24, Z
    3eb6:	81 50       	subi	r24, 0x01	; 1
    3eb8:	e8 89       	ldd	r30, Y+16	; 0x10
    3eba:	f9 89       	ldd	r31, Y+17	; 0x11
    3ebc:	80 83       	st	Z, r24
    3ebe:	90 c0       	rjmp	.+288    	; 0x3fe0 <Mode_1+0x220>
			}
			break;
		case '3':
			*Air_cound_Degree=30;
    3ec0:	e8 89       	ldd	r30, Y+16	; 0x10
    3ec2:	f9 89       	ldd	r31, Y+17	; 0x11
    3ec4:	8e e1       	ldi	r24, 0x1E	; 30
    3ec6:	80 83       	st	Z, r24
    3ec8:	8b c0       	rjmp	.+278    	; 0x3fe0 <Mode_1+0x220>
			break;
		case '4':
			LCD_voidSendCommand(LCD_CLEAR_DISBLAY);
    3eca:	81 e0       	ldi	r24, 0x01	; 1
    3ecc:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
			*flag=1;
    3ed0:	ea 89       	ldd	r30, Y+18	; 0x12
    3ed2:	fb 89       	ldd	r31, Y+19	; 0x13
    3ed4:	81 e0       	ldi	r24, 0x01	; 1
    3ed6:	80 83       	st	Z, r24
			*chose=KPD_CHECK_KEY;
    3ed8:	ec 89       	ldd	r30, Y+20	; 0x14
    3eda:	fd 89       	ldd	r31, Y+21	; 0x15
    3edc:	8f ef       	ldi	r24, 0xFF	; 255
    3ede:	80 83       	st	Z, r24
    3ee0:	7f c0       	rjmp	.+254    	; 0x3fe0 <Mode_1+0x220>
			break;
		default :

			if(v != KPD_CHECK_KEY)
    3ee2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ee4:	8f 3f       	cpi	r24, 0xFF	; 255
    3ee6:	09 f4       	brne	.+2      	; 0x3eea <Mode_1+0x12a>
    3ee8:	7b c0       	rjmp	.+246    	; 0x3fe0 <Mode_1+0x220>
			{
				LCD_voidSendCommand(LCD_CLEAR_DISBLAY);
    3eea:	81 e0       	ldi	r24, 0x01	; 1
    3eec:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
				LCD_voidSendStringPos("Invalid Chose ",4,1);
    3ef0:	81 eb       	ldi	r24, 0xB1	; 177
    3ef2:	90 e0       	ldi	r25, 0x00	; 0
    3ef4:	64 e0       	ldi	r22, 0x04	; 4
    3ef6:	41 e0       	ldi	r20, 0x01	; 1
    3ef8:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
    3efc:	80 e0       	ldi	r24, 0x00	; 0
    3efe:	90 e0       	ldi	r25, 0x00	; 0
    3f00:	af e2       	ldi	r26, 0x2F	; 47
    3f02:	b4 e4       	ldi	r27, 0x44	; 68
    3f04:	8b 87       	std	Y+11, r24	; 0x0b
    3f06:	9c 87       	std	Y+12, r25	; 0x0c
    3f08:	ad 87       	std	Y+13, r26	; 0x0d
    3f0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f10:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f12:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f14:	20 e0       	ldi	r18, 0x00	; 0
    3f16:	30 e0       	ldi	r19, 0x00	; 0
    3f18:	4a ef       	ldi	r20, 0xFA	; 250
    3f1a:	54 e4       	ldi	r21, 0x44	; 68
    3f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f20:	dc 01       	movw	r26, r24
    3f22:	cb 01       	movw	r24, r22
    3f24:	8f 83       	std	Y+7, r24	; 0x07
    3f26:	98 87       	std	Y+8, r25	; 0x08
    3f28:	a9 87       	std	Y+9, r26	; 0x09
    3f2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f2c:	6f 81       	ldd	r22, Y+7	; 0x07
    3f2e:	78 85       	ldd	r23, Y+8	; 0x08
    3f30:	89 85       	ldd	r24, Y+9	; 0x09
    3f32:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f34:	20 e0       	ldi	r18, 0x00	; 0
    3f36:	30 e0       	ldi	r19, 0x00	; 0
    3f38:	40 e8       	ldi	r20, 0x80	; 128
    3f3a:	5f e3       	ldi	r21, 0x3F	; 63
    3f3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f40:	88 23       	and	r24, r24
    3f42:	2c f4       	brge	.+10     	; 0x3f4e <Mode_1+0x18e>
		__ticks = 1;
    3f44:	81 e0       	ldi	r24, 0x01	; 1
    3f46:	90 e0       	ldi	r25, 0x00	; 0
    3f48:	9e 83       	std	Y+6, r25	; 0x06
    3f4a:	8d 83       	std	Y+5, r24	; 0x05
    3f4c:	3f c0       	rjmp	.+126    	; 0x3fcc <Mode_1+0x20c>
	else if (__tmp > 65535)
    3f4e:	6f 81       	ldd	r22, Y+7	; 0x07
    3f50:	78 85       	ldd	r23, Y+8	; 0x08
    3f52:	89 85       	ldd	r24, Y+9	; 0x09
    3f54:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f56:	20 e0       	ldi	r18, 0x00	; 0
    3f58:	3f ef       	ldi	r19, 0xFF	; 255
    3f5a:	4f e7       	ldi	r20, 0x7F	; 127
    3f5c:	57 e4       	ldi	r21, 0x47	; 71
    3f5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f62:	18 16       	cp	r1, r24
    3f64:	4c f5       	brge	.+82     	; 0x3fb8 <Mode_1+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f66:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f68:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f6e:	20 e0       	ldi	r18, 0x00	; 0
    3f70:	30 e0       	ldi	r19, 0x00	; 0
    3f72:	40 e2       	ldi	r20, 0x20	; 32
    3f74:	51 e4       	ldi	r21, 0x41	; 65
    3f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f7a:	dc 01       	movw	r26, r24
    3f7c:	cb 01       	movw	r24, r22
    3f7e:	bc 01       	movw	r22, r24
    3f80:	cd 01       	movw	r24, r26
    3f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f86:	dc 01       	movw	r26, r24
    3f88:	cb 01       	movw	r24, r22
    3f8a:	9e 83       	std	Y+6, r25	; 0x06
    3f8c:	8d 83       	std	Y+5, r24	; 0x05
    3f8e:	0f c0       	rjmp	.+30     	; 0x3fae <Mode_1+0x1ee>
    3f90:	88 ec       	ldi	r24, 0xC8	; 200
    3f92:	90 e0       	ldi	r25, 0x00	; 0
    3f94:	9c 83       	std	Y+4, r25	; 0x04
    3f96:	8b 83       	std	Y+3, r24	; 0x03
    3f98:	8b 81       	ldd	r24, Y+3	; 0x03
    3f9a:	9c 81       	ldd	r25, Y+4	; 0x04
    3f9c:	01 97       	sbiw	r24, 0x01	; 1
    3f9e:	f1 f7       	brne	.-4      	; 0x3f9c <Mode_1+0x1dc>
    3fa0:	9c 83       	std	Y+4, r25	; 0x04
    3fa2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fa4:	8d 81       	ldd	r24, Y+5	; 0x05
    3fa6:	9e 81       	ldd	r25, Y+6	; 0x06
    3fa8:	01 97       	sbiw	r24, 0x01	; 1
    3faa:	9e 83       	std	Y+6, r25	; 0x06
    3fac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fae:	8d 81       	ldd	r24, Y+5	; 0x05
    3fb0:	9e 81       	ldd	r25, Y+6	; 0x06
    3fb2:	00 97       	sbiw	r24, 0x00	; 0
    3fb4:	69 f7       	brne	.-38     	; 0x3f90 <Mode_1+0x1d0>
    3fb6:	14 c0       	rjmp	.+40     	; 0x3fe0 <Mode_1+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fb8:	6f 81       	ldd	r22, Y+7	; 0x07
    3fba:	78 85       	ldd	r23, Y+8	; 0x08
    3fbc:	89 85       	ldd	r24, Y+9	; 0x09
    3fbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fc4:	dc 01       	movw	r26, r24
    3fc6:	cb 01       	movw	r24, r22
    3fc8:	9e 83       	std	Y+6, r25	; 0x06
    3fca:	8d 83       	std	Y+5, r24	; 0x05
    3fcc:	8d 81       	ldd	r24, Y+5	; 0x05
    3fce:	9e 81       	ldd	r25, Y+6	; 0x06
    3fd0:	9a 83       	std	Y+2, r25	; 0x02
    3fd2:	89 83       	std	Y+1, r24	; 0x01
    3fd4:	89 81       	ldd	r24, Y+1	; 0x01
    3fd6:	9a 81       	ldd	r25, Y+2	; 0x02
    3fd8:	01 97       	sbiw	r24, 0x01	; 1
    3fda:	f1 f7       	brne	.-4      	; 0x3fd8 <Mode_1+0x218>
    3fdc:	9a 83       	std	Y+2, r25	; 0x02
    3fde:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(700);
			}
			break;

	}
}
    3fe0:	67 96       	adiw	r28, 0x17	; 23
    3fe2:	0f b6       	in	r0, 0x3f	; 63
    3fe4:	f8 94       	cli
    3fe6:	de bf       	out	0x3e, r29	; 62
    3fe8:	0f be       	out	0x3f, r0	; 63
    3fea:	cd bf       	out	0x3d, r28	; 61
    3fec:	cf 91       	pop	r28
    3fee:	df 91       	pop	r29
    3ff0:	08 95       	ret

00003ff2 <Mode_2>:

void Mode_2(u8 *Heater_Degree,u8 *flag,u8 *chose)
{
    3ff2:	df 93       	push	r29
    3ff4:	cf 93       	push	r28
    3ff6:	cd b7       	in	r28, 0x3d	; 61
    3ff8:	de b7       	in	r29, 0x3e	; 62
    3ffa:	67 97       	sbiw	r28, 0x17	; 23
    3ffc:	0f b6       	in	r0, 0x3f	; 63
    3ffe:	f8 94       	cli
    4000:	de bf       	out	0x3e, r29	; 62
    4002:	0f be       	out	0x3f, r0	; 63
    4004:	cd bf       	out	0x3d, r28	; 61
    4006:	99 8b       	std	Y+17, r25	; 0x11
    4008:	88 8b       	std	Y+16, r24	; 0x10
    400a:	7b 8b       	std	Y+19, r23	; 0x13
    400c:	6a 8b       	std	Y+18, r22	; 0x12
    400e:	5d 8b       	std	Y+21, r21	; 0x15
    4010:	4c 8b       	std	Y+20, r20	; 0x14
	u8 v=0;
    4012:	1f 86       	std	Y+15, r1	; 0x0f
	if(*flag==1)
    4014:	ea 89       	ldd	r30, Y+18	; 0x12
    4016:	fb 89       	ldd	r31, Y+19	; 0x13
    4018:	80 81       	ld	r24, Z
    401a:	81 30       	cpi	r24, 0x01	; 1
    401c:	19 f4       	brne	.+6      	; 0x4024 <Mode_2+0x32>
	{
		LCD_voidSendCommand(LCD_CLEAR_DISBLAY);
    401e:	81 e0       	ldi	r24, 0x01	; 1
    4020:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
	}
	if(*Heater_Degree<10)
    4024:	e8 89       	ldd	r30, Y+16	; 0x10
    4026:	f9 89       	ldd	r31, Y+17	; 0x11
    4028:	80 81       	ld	r24, Z
    402a:	8a 30       	cpi	r24, 0x0A	; 10
    402c:	28 f4       	brcc	.+10     	; 0x4038 <Mode_2+0x46>
	{
		LCD_voidSendDataPos(' ',4,19);
    402e:	80 e2       	ldi	r24, 0x20	; 32
    4030:	64 e0       	ldi	r22, 0x04	; 4
    4032:	43 e1       	ldi	r20, 0x13	; 19
    4034:	0e 94 36 0c 	call	0x186c	; 0x186c <LCD_voidSendDataPos>
	}
	*flag=2;
    4038:	ea 89       	ldd	r30, Y+18	; 0x12
    403a:	fb 89       	ldd	r31, Y+19	; 0x13
    403c:	82 e0       	ldi	r24, 0x02	; 2
    403e:	80 83       	st	Z, r24
	LCD_voidSendStringPos("1-Raise the temp",1,1);
    4040:	84 e3       	ldi	r24, 0x34	; 52
    4042:	91 e0       	ldi	r25, 0x01	; 1
    4044:	61 e0       	ldi	r22, 0x01	; 1
    4046:	41 e0       	ldi	r20, 0x01	; 1
    4048:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
	LCD_voidSendStringPos("2-Lower the temp",2,1);
    404c:	85 e4       	ldi	r24, 0x45	; 69
    404e:	91 e0       	ldi	r25, 0x01	; 1
    4050:	62 e0       	ldi	r22, 0x02	; 2
    4052:	41 e0       	ldi	r20, 0x01	; 1
    4054:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
	LCD_voidSendStringPos("3-STOP ",3,1);
    4058:	85 e2       	ldi	r24, 0x25	; 37
    405a:	91 e0       	ldi	r25, 0x01	; 1
    405c:	63 e0       	ldi	r22, 0x03	; 3
    405e:	41 e0       	ldi	r20, 0x01	; 1
    4060:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
	LCD_voidSendStringPos("4-Back",4,1);
    4064:	8d e2       	ldi	r24, 0x2D	; 45
    4066:	91 e0       	ldi	r25, 0x01	; 1
    4068:	64 e0       	ldi	r22, 0x04	; 4
    406a:	41 e0       	ldi	r20, 0x01	; 1
    406c:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
	LCD_voidSendNumberPos(*Heater_Degree,4,18);
    4070:	e8 89       	ldd	r30, Y+16	; 0x10
    4072:	f9 89       	ldd	r31, Y+17	; 0x11
    4074:	80 81       	ld	r24, Z
    4076:	88 2f       	mov	r24, r24
    4078:	90 e0       	ldi	r25, 0x00	; 0
    407a:	64 e0       	ldi	r22, 0x04	; 4
    407c:	42 e1       	ldi	r20, 0x12	; 18
    407e:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_voidSendNumberPos>
	v = KPD_u8GetPressKey();
    4082:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <KPD_u8GetPressKey>
    4086:	8f 87       	std	Y+15, r24	; 0x0f
	SPI_u8Tranceive(v);
    4088:	8f 85       	ldd	r24, Y+15	; 0x0f
    408a:	0e 94 a2 06 	call	0xd44	; 0xd44 <SPI_u8Tranceive>
	switch(v)
    408e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4090:	28 2f       	mov	r18, r24
    4092:	30 e0       	ldi	r19, 0x00	; 0
    4094:	3f 8b       	std	Y+23, r19	; 0x17
    4096:	2e 8b       	std	Y+22, r18	; 0x16
    4098:	8e 89       	ldd	r24, Y+22	; 0x16
    409a:	9f 89       	ldd	r25, Y+23	; 0x17
    409c:	82 33       	cpi	r24, 0x32	; 50
    409e:	91 05       	cpc	r25, r1
    40a0:	21 f1       	breq	.+72     	; 0x40ea <Mode_2+0xf8>
    40a2:	2e 89       	ldd	r18, Y+22	; 0x16
    40a4:	3f 89       	ldd	r19, Y+23	; 0x17
    40a6:	23 33       	cpi	r18, 0x33	; 51
    40a8:	31 05       	cpc	r19, r1
    40aa:	34 f4       	brge	.+12     	; 0x40b8 <Mode_2+0xc6>
    40ac:	8e 89       	ldd	r24, Y+22	; 0x16
    40ae:	9f 89       	ldd	r25, Y+23	; 0x17
    40b0:	81 33       	cpi	r24, 0x31	; 49
    40b2:	91 05       	cpc	r25, r1
    40b4:	61 f0       	breq	.+24     	; 0x40ce <Mode_2+0xdc>
    40b6:	3c c0       	rjmp	.+120    	; 0x4130 <Mode_2+0x13e>
    40b8:	2e 89       	ldd	r18, Y+22	; 0x16
    40ba:	3f 89       	ldd	r19, Y+23	; 0x17
    40bc:	23 33       	cpi	r18, 0x33	; 51
    40be:	31 05       	cpc	r19, r1
    40c0:	11 f1       	breq	.+68     	; 0x4106 <Mode_2+0x114>
    40c2:	8e 89       	ldd	r24, Y+22	; 0x16
    40c4:	9f 89       	ldd	r25, Y+23	; 0x17
    40c6:	84 33       	cpi	r24, 0x34	; 52
    40c8:	91 05       	cpc	r25, r1
    40ca:	31 f1       	breq	.+76     	; 0x4118 <Mode_2+0x126>
    40cc:	31 c0       	rjmp	.+98     	; 0x4130 <Mode_2+0x13e>
	{
		case '1':
			if(*Heater_Degree < 10)
    40ce:	e8 89       	ldd	r30, Y+16	; 0x10
    40d0:	f9 89       	ldd	r31, Y+17	; 0x11
    40d2:	80 81       	ld	r24, Z
    40d4:	8a 30       	cpi	r24, 0x0A	; 10
    40d6:	08 f0       	brcs	.+2      	; 0x40da <Mode_2+0xe8>
    40d8:	aa c0       	rjmp	.+340    	; 0x422e <Mode_2+0x23c>
			{
				(*Heater_Degree)++;
    40da:	e8 89       	ldd	r30, Y+16	; 0x10
    40dc:	f9 89       	ldd	r31, Y+17	; 0x11
    40de:	80 81       	ld	r24, Z
    40e0:	8f 5f       	subi	r24, 0xFF	; 255
    40e2:	e8 89       	ldd	r30, Y+16	; 0x10
    40e4:	f9 89       	ldd	r31, Y+17	; 0x11
    40e6:	80 83       	st	Z, r24
    40e8:	a2 c0       	rjmp	.+324    	; 0x422e <Mode_2+0x23c>
			}
			break;
			case '2':
			if(*Heater_Degree > 0)
    40ea:	e8 89       	ldd	r30, Y+16	; 0x10
    40ec:	f9 89       	ldd	r31, Y+17	; 0x11
    40ee:	80 81       	ld	r24, Z
    40f0:	88 23       	and	r24, r24
    40f2:	09 f4       	brne	.+2      	; 0x40f6 <Mode_2+0x104>
    40f4:	9c c0       	rjmp	.+312    	; 0x422e <Mode_2+0x23c>
			{
				(*Heater_Degree)--;
    40f6:	e8 89       	ldd	r30, Y+16	; 0x10
    40f8:	f9 89       	ldd	r31, Y+17	; 0x11
    40fa:	80 81       	ld	r24, Z
    40fc:	81 50       	subi	r24, 0x01	; 1
    40fe:	e8 89       	ldd	r30, Y+16	; 0x10
    4100:	f9 89       	ldd	r31, Y+17	; 0x11
    4102:	80 83       	st	Z, r24
    4104:	94 c0       	rjmp	.+296    	; 0x422e <Mode_2+0x23c>
			}
			break;
		case '3':
			*Heater_Degree = 0;
    4106:	e8 89       	ldd	r30, Y+16	; 0x10
    4108:	f9 89       	ldd	r31, Y+17	; 0x11
    410a:	10 82       	st	Z, r1
			LCD_voidSendDataPos(' ',4,19);
    410c:	80 e2       	ldi	r24, 0x20	; 32
    410e:	64 e0       	ldi	r22, 0x04	; 4
    4110:	43 e1       	ldi	r20, 0x13	; 19
    4112:	0e 94 36 0c 	call	0x186c	; 0x186c <LCD_voidSendDataPos>
    4116:	8b c0       	rjmp	.+278    	; 0x422e <Mode_2+0x23c>
			break;
		case '4':
			LCD_voidSendCommand(LCD_CLEAR_DISBLAY);
    4118:	81 e0       	ldi	r24, 0x01	; 1
    411a:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
			*flag=1;
    411e:	ea 89       	ldd	r30, Y+18	; 0x12
    4120:	fb 89       	ldd	r31, Y+19	; 0x13
    4122:	81 e0       	ldi	r24, 0x01	; 1
    4124:	80 83       	st	Z, r24
			*chose=KPD_CHECK_KEY;
    4126:	ec 89       	ldd	r30, Y+20	; 0x14
    4128:	fd 89       	ldd	r31, Y+21	; 0x15
    412a:	8f ef       	ldi	r24, 0xFF	; 255
    412c:	80 83       	st	Z, r24
    412e:	7f c0       	rjmp	.+254    	; 0x422e <Mode_2+0x23c>
			break;
		default :
			if(v != KPD_CHECK_KEY)
    4130:	8f 85       	ldd	r24, Y+15	; 0x0f
    4132:	8f 3f       	cpi	r24, 0xFF	; 255
    4134:	09 f4       	brne	.+2      	; 0x4138 <Mode_2+0x146>
    4136:	7b c0       	rjmp	.+246    	; 0x422e <Mode_2+0x23c>
			{
				LCD_voidSendCommand(LCD_CLEAR_DISBLAY);
    4138:	81 e0       	ldi	r24, 0x01	; 1
    413a:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
				LCD_voidSendStringPos("Invalid Chose ",4,1);
    413e:	81 eb       	ldi	r24, 0xB1	; 177
    4140:	90 e0       	ldi	r25, 0x00	; 0
    4142:	64 e0       	ldi	r22, 0x04	; 4
    4144:	41 e0       	ldi	r20, 0x01	; 1
    4146:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
    414a:	80 e0       	ldi	r24, 0x00	; 0
    414c:	90 e0       	ldi	r25, 0x00	; 0
    414e:	af e2       	ldi	r26, 0x2F	; 47
    4150:	b4 e4       	ldi	r27, 0x44	; 68
    4152:	8b 87       	std	Y+11, r24	; 0x0b
    4154:	9c 87       	std	Y+12, r25	; 0x0c
    4156:	ad 87       	std	Y+13, r26	; 0x0d
    4158:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    415a:	6b 85       	ldd	r22, Y+11	; 0x0b
    415c:	7c 85       	ldd	r23, Y+12	; 0x0c
    415e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4160:	9e 85       	ldd	r25, Y+14	; 0x0e
    4162:	20 e0       	ldi	r18, 0x00	; 0
    4164:	30 e0       	ldi	r19, 0x00	; 0
    4166:	4a ef       	ldi	r20, 0xFA	; 250
    4168:	54 e4       	ldi	r21, 0x44	; 68
    416a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    416e:	dc 01       	movw	r26, r24
    4170:	cb 01       	movw	r24, r22
    4172:	8f 83       	std	Y+7, r24	; 0x07
    4174:	98 87       	std	Y+8, r25	; 0x08
    4176:	a9 87       	std	Y+9, r26	; 0x09
    4178:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    417a:	6f 81       	ldd	r22, Y+7	; 0x07
    417c:	78 85       	ldd	r23, Y+8	; 0x08
    417e:	89 85       	ldd	r24, Y+9	; 0x09
    4180:	9a 85       	ldd	r25, Y+10	; 0x0a
    4182:	20 e0       	ldi	r18, 0x00	; 0
    4184:	30 e0       	ldi	r19, 0x00	; 0
    4186:	40 e8       	ldi	r20, 0x80	; 128
    4188:	5f e3       	ldi	r21, 0x3F	; 63
    418a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    418e:	88 23       	and	r24, r24
    4190:	2c f4       	brge	.+10     	; 0x419c <Mode_2+0x1aa>
		__ticks = 1;
    4192:	81 e0       	ldi	r24, 0x01	; 1
    4194:	90 e0       	ldi	r25, 0x00	; 0
    4196:	9e 83       	std	Y+6, r25	; 0x06
    4198:	8d 83       	std	Y+5, r24	; 0x05
    419a:	3f c0       	rjmp	.+126    	; 0x421a <Mode_2+0x228>
	else if (__tmp > 65535)
    419c:	6f 81       	ldd	r22, Y+7	; 0x07
    419e:	78 85       	ldd	r23, Y+8	; 0x08
    41a0:	89 85       	ldd	r24, Y+9	; 0x09
    41a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    41a4:	20 e0       	ldi	r18, 0x00	; 0
    41a6:	3f ef       	ldi	r19, 0xFF	; 255
    41a8:	4f e7       	ldi	r20, 0x7F	; 127
    41aa:	57 e4       	ldi	r21, 0x47	; 71
    41ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41b0:	18 16       	cp	r1, r24
    41b2:	4c f5       	brge	.+82     	; 0x4206 <Mode_2+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    41b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    41b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    41ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    41bc:	20 e0       	ldi	r18, 0x00	; 0
    41be:	30 e0       	ldi	r19, 0x00	; 0
    41c0:	40 e2       	ldi	r20, 0x20	; 32
    41c2:	51 e4       	ldi	r21, 0x41	; 65
    41c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41c8:	dc 01       	movw	r26, r24
    41ca:	cb 01       	movw	r24, r22
    41cc:	bc 01       	movw	r22, r24
    41ce:	cd 01       	movw	r24, r26
    41d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41d4:	dc 01       	movw	r26, r24
    41d6:	cb 01       	movw	r24, r22
    41d8:	9e 83       	std	Y+6, r25	; 0x06
    41da:	8d 83       	std	Y+5, r24	; 0x05
    41dc:	0f c0       	rjmp	.+30     	; 0x41fc <Mode_2+0x20a>
    41de:	88 ec       	ldi	r24, 0xC8	; 200
    41e0:	90 e0       	ldi	r25, 0x00	; 0
    41e2:	9c 83       	std	Y+4, r25	; 0x04
    41e4:	8b 83       	std	Y+3, r24	; 0x03
    41e6:	8b 81       	ldd	r24, Y+3	; 0x03
    41e8:	9c 81       	ldd	r25, Y+4	; 0x04
    41ea:	01 97       	sbiw	r24, 0x01	; 1
    41ec:	f1 f7       	brne	.-4      	; 0x41ea <Mode_2+0x1f8>
    41ee:	9c 83       	std	Y+4, r25	; 0x04
    41f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41f2:	8d 81       	ldd	r24, Y+5	; 0x05
    41f4:	9e 81       	ldd	r25, Y+6	; 0x06
    41f6:	01 97       	sbiw	r24, 0x01	; 1
    41f8:	9e 83       	std	Y+6, r25	; 0x06
    41fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41fc:	8d 81       	ldd	r24, Y+5	; 0x05
    41fe:	9e 81       	ldd	r25, Y+6	; 0x06
    4200:	00 97       	sbiw	r24, 0x00	; 0
    4202:	69 f7       	brne	.-38     	; 0x41de <Mode_2+0x1ec>
    4204:	14 c0       	rjmp	.+40     	; 0x422e <Mode_2+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4206:	6f 81       	ldd	r22, Y+7	; 0x07
    4208:	78 85       	ldd	r23, Y+8	; 0x08
    420a:	89 85       	ldd	r24, Y+9	; 0x09
    420c:	9a 85       	ldd	r25, Y+10	; 0x0a
    420e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4212:	dc 01       	movw	r26, r24
    4214:	cb 01       	movw	r24, r22
    4216:	9e 83       	std	Y+6, r25	; 0x06
    4218:	8d 83       	std	Y+5, r24	; 0x05
    421a:	8d 81       	ldd	r24, Y+5	; 0x05
    421c:	9e 81       	ldd	r25, Y+6	; 0x06
    421e:	9a 83       	std	Y+2, r25	; 0x02
    4220:	89 83       	std	Y+1, r24	; 0x01
    4222:	89 81       	ldd	r24, Y+1	; 0x01
    4224:	9a 81       	ldd	r25, Y+2	; 0x02
    4226:	01 97       	sbiw	r24, 0x01	; 1
    4228:	f1 f7       	brne	.-4      	; 0x4226 <Mode_2+0x234>
    422a:	9a 83       	std	Y+2, r25	; 0x02
    422c:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(700);
			}
	}
}
    422e:	67 96       	adiw	r28, 0x17	; 23
    4230:	0f b6       	in	r0, 0x3f	; 63
    4232:	f8 94       	cli
    4234:	de bf       	out	0x3e, r29	; 62
    4236:	0f be       	out	0x3f, r0	; 63
    4238:	cd bf       	out	0x3d, r28	; 61
    423a:	cf 91       	pop	r28
    423c:	df 91       	pop	r29
    423e:	08 95       	ret

00004240 <Mode_3>:

void Mode_3(u8 *flag,u8 *chose,u8 *Heater_Degree,u8 *Air_cound_Degree,u16 *true_value)
{
    4240:	0f 93       	push	r16
    4242:	1f 93       	push	r17
    4244:	df 93       	push	r29
    4246:	cf 93       	push	r28
    4248:	cd b7       	in	r28, 0x3d	; 61
    424a:	de b7       	in	r29, 0x3e	; 62
    424c:	69 97       	sbiw	r28, 0x19	; 25
    424e:	0f b6       	in	r0, 0x3f	; 63
    4250:	f8 94       	cli
    4252:	de bf       	out	0x3e, r29	; 62
    4254:	0f be       	out	0x3f, r0	; 63
    4256:	cd bf       	out	0x3d, r28	; 61
    4258:	99 8b       	std	Y+17, r25	; 0x11
    425a:	88 8b       	std	Y+16, r24	; 0x10
    425c:	7b 8b       	std	Y+19, r23	; 0x13
    425e:	6a 8b       	std	Y+18, r22	; 0x12
    4260:	5d 8b       	std	Y+21, r21	; 0x15
    4262:	4c 8b       	std	Y+20, r20	; 0x14
    4264:	3f 8b       	std	Y+23, r19	; 0x17
    4266:	2e 8b       	std	Y+22, r18	; 0x16
    4268:	19 8f       	std	Y+25, r17	; 0x19
    426a:	08 8f       	std	Y+24, r16	; 0x18

	u8 v=0;
    426c:	1f 86       	std	Y+15, r1	; 0x0f

	if(*flag==1)
    426e:	e8 89       	ldd	r30, Y+16	; 0x10
    4270:	f9 89       	ldd	r31, Y+17	; 0x11
    4272:	80 81       	ld	r24, Z
    4274:	81 30       	cpi	r24, 0x01	; 1
    4276:	19 f4       	brne	.+6      	; 0x427e <Mode_3+0x3e>
	{
		LCD_voidSendCommand(LCD_CLEAR_DISBLAY);
    4278:	81 e0       	ldi	r24, 0x01	; 1
    427a:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
	}
	*flag=2;
    427e:	e8 89       	ldd	r30, Y+16	; 0x10
    4280:	f9 89       	ldd	r31, Y+17	; 0x11
    4282:	82 e0       	ldi	r24, 0x02	; 2
    4284:	80 83       	st	Z, r24
	if(*true_value <10)
    4286:	e8 8d       	ldd	r30, Y+24	; 0x18
    4288:	f9 8d       	ldd	r31, Y+25	; 0x19
    428a:	80 81       	ld	r24, Z
    428c:	91 81       	ldd	r25, Z+1	; 0x01
    428e:	8a 30       	cpi	r24, 0x0A	; 10
    4290:	91 05       	cpc	r25, r1
    4292:	28 f4       	brcc	.+10     	; 0x429e <Mode_3+0x5e>
	{
		LCD_voidSendDataPos(' ',1,16);
    4294:	80 e2       	ldi	r24, 0x20	; 32
    4296:	61 e0       	ldi	r22, 0x01	; 1
    4298:	40 e1       	ldi	r20, 0x10	; 16
    429a:	0e 94 36 0c 	call	0x186c	; 0x186c <LCD_voidSendDataPos>
	}

	LCD_voidSendStringPos("Temperature : ",1,1);
    429e:	86 e5       	ldi	r24, 0x56	; 86
    42a0:	91 e0       	ldi	r25, 0x01	; 1
    42a2:	61 e0       	ldi	r22, 0x01	; 1
    42a4:	41 e0       	ldi	r20, 0x01	; 1
    42a6:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
	LCD_voidSendNumberPos(*true_value,1,15);
    42aa:	e8 8d       	ldd	r30, Y+24	; 0x18
    42ac:	f9 8d       	ldd	r31, Y+25	; 0x19
    42ae:	80 81       	ld	r24, Z
    42b0:	91 81       	ldd	r25, Z+1	; 0x01
    42b2:	61 e0       	ldi	r22, 0x01	; 1
    42b4:	4f e0       	ldi	r20, 0x0F	; 15
    42b6:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <LCD_voidSendNumberPos>
	LCD_voidSendStringPos("2-Back",4,1);
    42ba:	85 e6       	ldi	r24, 0x65	; 101
    42bc:	91 e0       	ldi	r25, 0x01	; 1
    42be:	64 e0       	ldi	r22, 0x04	; 4
    42c0:	41 e0       	ldi	r20, 0x01	; 1
    42c2:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
	v = KPD_u8GetPressKey();
    42c6:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <KPD_u8GetPressKey>
    42ca:	8f 87       	std	Y+15, r24	; 0x0f
	SPI_u8Tranceive(*true_value);
    42cc:	e8 8d       	ldd	r30, Y+24	; 0x18
    42ce:	f9 8d       	ldd	r31, Y+25	; 0x19
    42d0:	80 81       	ld	r24, Z
    42d2:	91 81       	ldd	r25, Z+1	; 0x01
    42d4:	0e 94 a2 06 	call	0xd44	; 0xd44 <SPI_u8Tranceive>
	if(*true_value <=5)
    42d8:	e8 8d       	ldd	r30, Y+24	; 0x18
    42da:	f9 8d       	ldd	r31, Y+25	; 0x19
    42dc:	80 81       	ld	r24, Z
    42de:	91 81       	ldd	r25, Z+1	; 0x01
    42e0:	86 30       	cpi	r24, 0x06	; 6
    42e2:	91 05       	cpc	r25, r1
    42e4:	28 f4       	brcc	.+10     	; 0x42f0 <Mode_3+0xb0>
	{
		*Heater_Degree = 10;
    42e6:	ec 89       	ldd	r30, Y+20	; 0x14
    42e8:	fd 89       	ldd	r31, Y+21	; 0x15
    42ea:	8a e0       	ldi	r24, 0x0A	; 10
    42ec:	80 83       	st	Z, r24
    42ee:	7f c0       	rjmp	.+254    	; 0x43ee <Mode_3+0x1ae>
	}
	else if(*true_value <10)
    42f0:	e8 8d       	ldd	r30, Y+24	; 0x18
    42f2:	f9 8d       	ldd	r31, Y+25	; 0x19
    42f4:	80 81       	ld	r24, Z
    42f6:	91 81       	ldd	r25, Z+1	; 0x01
    42f8:	8a 30       	cpi	r24, 0x0A	; 10
    42fa:	91 05       	cpc	r25, r1
    42fc:	28 f4       	brcc	.+10     	; 0x4308 <Mode_3+0xc8>
	{
		*Heater_Degree = 8;
    42fe:	ec 89       	ldd	r30, Y+20	; 0x14
    4300:	fd 89       	ldd	r31, Y+21	; 0x15
    4302:	88 e0       	ldi	r24, 0x08	; 8
    4304:	80 83       	st	Z, r24
    4306:	73 c0       	rjmp	.+230    	; 0x43ee <Mode_3+0x1ae>
	}
	else if(*true_value <16)
    4308:	e8 8d       	ldd	r30, Y+24	; 0x18
    430a:	f9 8d       	ldd	r31, Y+25	; 0x19
    430c:	80 81       	ld	r24, Z
    430e:	91 81       	ldd	r25, Z+1	; 0x01
    4310:	80 31       	cpi	r24, 0x10	; 16
    4312:	91 05       	cpc	r25, r1
    4314:	28 f4       	brcc	.+10     	; 0x4320 <Mode_3+0xe0>
	{
		*Heater_Degree = 6;
    4316:	ec 89       	ldd	r30, Y+20	; 0x14
    4318:	fd 89       	ldd	r31, Y+21	; 0x15
    431a:	86 e0       	ldi	r24, 0x06	; 6
    431c:	80 83       	st	Z, r24
    431e:	67 c0       	rjmp	.+206    	; 0x43ee <Mode_3+0x1ae>
	}
	else if(*true_value <=20)
    4320:	e8 8d       	ldd	r30, Y+24	; 0x18
    4322:	f9 8d       	ldd	r31, Y+25	; 0x19
    4324:	80 81       	ld	r24, Z
    4326:	91 81       	ldd	r25, Z+1	; 0x01
    4328:	85 31       	cpi	r24, 0x15	; 21
    432a:	91 05       	cpc	r25, r1
    432c:	48 f4       	brcc	.+18     	; 0x4340 <Mode_3+0x100>
	{
		*Heater_Degree = 3;
    432e:	ec 89       	ldd	r30, Y+20	; 0x14
    4330:	fd 89       	ldd	r31, Y+21	; 0x15
    4332:	83 e0       	ldi	r24, 0x03	; 3
    4334:	80 83       	st	Z, r24
		*Air_cound_Degree = 29;
    4336:	ee 89       	ldd	r30, Y+22	; 0x16
    4338:	ff 89       	ldd	r31, Y+23	; 0x17
    433a:	8d e1       	ldi	r24, 0x1D	; 29
    433c:	80 83       	st	Z, r24
    433e:	57 c0       	rjmp	.+174    	; 0x43ee <Mode_3+0x1ae>
	}
	else if(*true_value <=23)
    4340:	e8 8d       	ldd	r30, Y+24	; 0x18
    4342:	f9 8d       	ldd	r31, Y+25	; 0x19
    4344:	80 81       	ld	r24, Z
    4346:	91 81       	ldd	r25, Z+1	; 0x01
    4348:	88 31       	cpi	r24, 0x18	; 24
    434a:	91 05       	cpc	r25, r1
    434c:	40 f4       	brcc	.+16     	; 0x435e <Mode_3+0x11e>
	{
		*Heater_Degree = 0;
    434e:	ec 89       	ldd	r30, Y+20	; 0x14
    4350:	fd 89       	ldd	r31, Y+21	; 0x15
    4352:	10 82       	st	Z, r1
		*Air_cound_Degree = 29;
    4354:	ee 89       	ldd	r30, Y+22	; 0x16
    4356:	ff 89       	ldd	r31, Y+23	; 0x17
    4358:	8d e1       	ldi	r24, 0x1D	; 29
    435a:	80 83       	st	Z, r24
    435c:	48 c0       	rjmp	.+144    	; 0x43ee <Mode_3+0x1ae>
	}
	else if((*true_value >23)&&(*true_value <30))
    435e:	e8 8d       	ldd	r30, Y+24	; 0x18
    4360:	f9 8d       	ldd	r31, Y+25	; 0x19
    4362:	80 81       	ld	r24, Z
    4364:	91 81       	ldd	r25, Z+1	; 0x01
    4366:	88 31       	cpi	r24, 0x18	; 24
    4368:	91 05       	cpc	r25, r1
    436a:	80 f0       	brcs	.+32     	; 0x438c <Mode_3+0x14c>
    436c:	e8 8d       	ldd	r30, Y+24	; 0x18
    436e:	f9 8d       	ldd	r31, Y+25	; 0x19
    4370:	80 81       	ld	r24, Z
    4372:	91 81       	ldd	r25, Z+1	; 0x01
    4374:	8e 31       	cpi	r24, 0x1E	; 30
    4376:	91 05       	cpc	r25, r1
    4378:	48 f4       	brcc	.+18     	; 0x438c <Mode_3+0x14c>
	{
		*Air_cound_Degree = 26;
    437a:	ee 89       	ldd	r30, Y+22	; 0x16
    437c:	ff 89       	ldd	r31, Y+23	; 0x17
    437e:	8a e1       	ldi	r24, 0x1A	; 26
    4380:	80 83       	st	Z, r24
		*Heater_Degree = 18;
    4382:	ec 89       	ldd	r30, Y+20	; 0x14
    4384:	fd 89       	ldd	r31, Y+21	; 0x15
    4386:	82 e1       	ldi	r24, 0x12	; 18
    4388:	80 83       	st	Z, r24
    438a:	31 c0       	rjmp	.+98     	; 0x43ee <Mode_3+0x1ae>
	}
	else if ((*true_value <35)&&(*true_value >=30))
    438c:	e8 8d       	ldd	r30, Y+24	; 0x18
    438e:	f9 8d       	ldd	r31, Y+25	; 0x19
    4390:	80 81       	ld	r24, Z
    4392:	91 81       	ldd	r25, Z+1	; 0x01
    4394:	83 32       	cpi	r24, 0x23	; 35
    4396:	91 05       	cpc	r25, r1
    4398:	60 f4       	brcc	.+24     	; 0x43b2 <Mode_3+0x172>
    439a:	e8 8d       	ldd	r30, Y+24	; 0x18
    439c:	f9 8d       	ldd	r31, Y+25	; 0x19
    439e:	80 81       	ld	r24, Z
    43a0:	91 81       	ldd	r25, Z+1	; 0x01
    43a2:	8e 31       	cpi	r24, 0x1E	; 30
    43a4:	91 05       	cpc	r25, r1
    43a6:	28 f0       	brcs	.+10     	; 0x43b2 <Mode_3+0x172>
	{
		*Air_cound_Degree = 24;
    43a8:	ee 89       	ldd	r30, Y+22	; 0x16
    43aa:	ff 89       	ldd	r31, Y+23	; 0x17
    43ac:	88 e1       	ldi	r24, 0x18	; 24
    43ae:	80 83       	st	Z, r24
    43b0:	1e c0       	rjmp	.+60     	; 0x43ee <Mode_3+0x1ae>
	}
	else if((*true_value <40)&&(*true_value >=35))
    43b2:	e8 8d       	ldd	r30, Y+24	; 0x18
    43b4:	f9 8d       	ldd	r31, Y+25	; 0x19
    43b6:	80 81       	ld	r24, Z
    43b8:	91 81       	ldd	r25, Z+1	; 0x01
    43ba:	88 32       	cpi	r24, 0x28	; 40
    43bc:	91 05       	cpc	r25, r1
    43be:	60 f4       	brcc	.+24     	; 0x43d8 <Mode_3+0x198>
    43c0:	e8 8d       	ldd	r30, Y+24	; 0x18
    43c2:	f9 8d       	ldd	r31, Y+25	; 0x19
    43c4:	80 81       	ld	r24, Z
    43c6:	91 81       	ldd	r25, Z+1	; 0x01
    43c8:	83 32       	cpi	r24, 0x23	; 35
    43ca:	91 05       	cpc	r25, r1
    43cc:	28 f0       	brcs	.+10     	; 0x43d8 <Mode_3+0x198>
	{
		*Air_cound_Degree = 22;
    43ce:	ee 89       	ldd	r30, Y+22	; 0x16
    43d0:	ff 89       	ldd	r31, Y+23	; 0x17
    43d2:	86 e1       	ldi	r24, 0x16	; 22
    43d4:	80 83       	st	Z, r24
    43d6:	0b c0       	rjmp	.+22     	; 0x43ee <Mode_3+0x1ae>
	}
	else if(*true_value >=40)
    43d8:	e8 8d       	ldd	r30, Y+24	; 0x18
    43da:	f9 8d       	ldd	r31, Y+25	; 0x19
    43dc:	80 81       	ld	r24, Z
    43de:	91 81       	ldd	r25, Z+1	; 0x01
    43e0:	88 32       	cpi	r24, 0x28	; 40
    43e2:	91 05       	cpc	r25, r1
    43e4:	20 f0       	brcs	.+8      	; 0x43ee <Mode_3+0x1ae>
	{
		*Air_cound_Degree = 18;
    43e6:	ee 89       	ldd	r30, Y+22	; 0x16
    43e8:	ff 89       	ldd	r31, Y+23	; 0x17
    43ea:	82 e1       	ldi	r24, 0x12	; 18
    43ec:	80 83       	st	Z, r24
	}
	if(v == '2')
    43ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    43f0:	82 33       	cpi	r24, 0x32	; 50
    43f2:	61 f4       	brne	.+24     	; 0x440c <Mode_3+0x1cc>
	{
		LCD_voidSendCommand(LCD_CLEAR_DISBLAY);
    43f4:	81 e0       	ldi	r24, 0x01	; 1
    43f6:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
		*flag=1;
    43fa:	e8 89       	ldd	r30, Y+16	; 0x10
    43fc:	f9 89       	ldd	r31, Y+17	; 0x11
    43fe:	81 e0       	ldi	r24, 0x01	; 1
    4400:	80 83       	st	Z, r24
		*chose=KPD_CHECK_KEY;
    4402:	ea 89       	ldd	r30, Y+18	; 0x12
    4404:	fb 89       	ldd	r31, Y+19	; 0x13
    4406:	8f ef       	ldi	r24, 0xFF	; 255
    4408:	80 83       	st	Z, r24
    440a:	7f c0       	rjmp	.+254    	; 0x450a <Mode_3+0x2ca>
	}
	else if(v != KPD_CHECK_KEY)
    440c:	8f 85       	ldd	r24, Y+15	; 0x0f
    440e:	8f 3f       	cpi	r24, 0xFF	; 255
    4410:	09 f4       	brne	.+2      	; 0x4414 <Mode_3+0x1d4>
    4412:	7b c0       	rjmp	.+246    	; 0x450a <Mode_3+0x2ca>
	{
		LCD_voidSendStringPos("Invalid Chose",3,4);
    4414:	8c e6       	ldi	r24, 0x6C	; 108
    4416:	91 e0       	ldi	r25, 0x01	; 1
    4418:	63 e0       	ldi	r22, 0x03	; 3
    441a:	44 e0       	ldi	r20, 0x04	; 4
    441c:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
    4420:	80 e0       	ldi	r24, 0x00	; 0
    4422:	90 e0       	ldi	r25, 0x00	; 0
    4424:	a8 e4       	ldi	r26, 0x48	; 72
    4426:	b4 e4       	ldi	r27, 0x44	; 68
    4428:	8b 87       	std	Y+11, r24	; 0x0b
    442a:	9c 87       	std	Y+12, r25	; 0x0c
    442c:	ad 87       	std	Y+13, r26	; 0x0d
    442e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4430:	6b 85       	ldd	r22, Y+11	; 0x0b
    4432:	7c 85       	ldd	r23, Y+12	; 0x0c
    4434:	8d 85       	ldd	r24, Y+13	; 0x0d
    4436:	9e 85       	ldd	r25, Y+14	; 0x0e
    4438:	20 e0       	ldi	r18, 0x00	; 0
    443a:	30 e0       	ldi	r19, 0x00	; 0
    443c:	4a ef       	ldi	r20, 0xFA	; 250
    443e:	54 e4       	ldi	r21, 0x44	; 68
    4440:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4444:	dc 01       	movw	r26, r24
    4446:	cb 01       	movw	r24, r22
    4448:	8f 83       	std	Y+7, r24	; 0x07
    444a:	98 87       	std	Y+8, r25	; 0x08
    444c:	a9 87       	std	Y+9, r26	; 0x09
    444e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4450:	6f 81       	ldd	r22, Y+7	; 0x07
    4452:	78 85       	ldd	r23, Y+8	; 0x08
    4454:	89 85       	ldd	r24, Y+9	; 0x09
    4456:	9a 85       	ldd	r25, Y+10	; 0x0a
    4458:	20 e0       	ldi	r18, 0x00	; 0
    445a:	30 e0       	ldi	r19, 0x00	; 0
    445c:	40 e8       	ldi	r20, 0x80	; 128
    445e:	5f e3       	ldi	r21, 0x3F	; 63
    4460:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4464:	88 23       	and	r24, r24
    4466:	2c f4       	brge	.+10     	; 0x4472 <Mode_3+0x232>
		__ticks = 1;
    4468:	81 e0       	ldi	r24, 0x01	; 1
    446a:	90 e0       	ldi	r25, 0x00	; 0
    446c:	9e 83       	std	Y+6, r25	; 0x06
    446e:	8d 83       	std	Y+5, r24	; 0x05
    4470:	3f c0       	rjmp	.+126    	; 0x44f0 <Mode_3+0x2b0>
	else if (__tmp > 65535)
    4472:	6f 81       	ldd	r22, Y+7	; 0x07
    4474:	78 85       	ldd	r23, Y+8	; 0x08
    4476:	89 85       	ldd	r24, Y+9	; 0x09
    4478:	9a 85       	ldd	r25, Y+10	; 0x0a
    447a:	20 e0       	ldi	r18, 0x00	; 0
    447c:	3f ef       	ldi	r19, 0xFF	; 255
    447e:	4f e7       	ldi	r20, 0x7F	; 127
    4480:	57 e4       	ldi	r21, 0x47	; 71
    4482:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4486:	18 16       	cp	r1, r24
    4488:	4c f5       	brge	.+82     	; 0x44dc <Mode_3+0x29c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    448a:	6b 85       	ldd	r22, Y+11	; 0x0b
    448c:	7c 85       	ldd	r23, Y+12	; 0x0c
    448e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4490:	9e 85       	ldd	r25, Y+14	; 0x0e
    4492:	20 e0       	ldi	r18, 0x00	; 0
    4494:	30 e0       	ldi	r19, 0x00	; 0
    4496:	40 e2       	ldi	r20, 0x20	; 32
    4498:	51 e4       	ldi	r21, 0x41	; 65
    449a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    449e:	dc 01       	movw	r26, r24
    44a0:	cb 01       	movw	r24, r22
    44a2:	bc 01       	movw	r22, r24
    44a4:	cd 01       	movw	r24, r26
    44a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44aa:	dc 01       	movw	r26, r24
    44ac:	cb 01       	movw	r24, r22
    44ae:	9e 83       	std	Y+6, r25	; 0x06
    44b0:	8d 83       	std	Y+5, r24	; 0x05
    44b2:	0f c0       	rjmp	.+30     	; 0x44d2 <Mode_3+0x292>
    44b4:	88 ec       	ldi	r24, 0xC8	; 200
    44b6:	90 e0       	ldi	r25, 0x00	; 0
    44b8:	9c 83       	std	Y+4, r25	; 0x04
    44ba:	8b 83       	std	Y+3, r24	; 0x03
    44bc:	8b 81       	ldd	r24, Y+3	; 0x03
    44be:	9c 81       	ldd	r25, Y+4	; 0x04
    44c0:	01 97       	sbiw	r24, 0x01	; 1
    44c2:	f1 f7       	brne	.-4      	; 0x44c0 <Mode_3+0x280>
    44c4:	9c 83       	std	Y+4, r25	; 0x04
    44c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44c8:	8d 81       	ldd	r24, Y+5	; 0x05
    44ca:	9e 81       	ldd	r25, Y+6	; 0x06
    44cc:	01 97       	sbiw	r24, 0x01	; 1
    44ce:	9e 83       	std	Y+6, r25	; 0x06
    44d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44d2:	8d 81       	ldd	r24, Y+5	; 0x05
    44d4:	9e 81       	ldd	r25, Y+6	; 0x06
    44d6:	00 97       	sbiw	r24, 0x00	; 0
    44d8:	69 f7       	brne	.-38     	; 0x44b4 <Mode_3+0x274>
    44da:	14 c0       	rjmp	.+40     	; 0x4504 <Mode_3+0x2c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44dc:	6f 81       	ldd	r22, Y+7	; 0x07
    44de:	78 85       	ldd	r23, Y+8	; 0x08
    44e0:	89 85       	ldd	r24, Y+9	; 0x09
    44e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    44e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44e8:	dc 01       	movw	r26, r24
    44ea:	cb 01       	movw	r24, r22
    44ec:	9e 83       	std	Y+6, r25	; 0x06
    44ee:	8d 83       	std	Y+5, r24	; 0x05
    44f0:	8d 81       	ldd	r24, Y+5	; 0x05
    44f2:	9e 81       	ldd	r25, Y+6	; 0x06
    44f4:	9a 83       	std	Y+2, r25	; 0x02
    44f6:	89 83       	std	Y+1, r24	; 0x01
    44f8:	89 81       	ldd	r24, Y+1	; 0x01
    44fa:	9a 81       	ldd	r25, Y+2	; 0x02
    44fc:	01 97       	sbiw	r24, 0x01	; 1
    44fe:	f1 f7       	brne	.-4      	; 0x44fc <Mode_3+0x2bc>
    4500:	9a 83       	std	Y+2, r25	; 0x02
    4502:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(800);
		LCD_voidSendCommand(LCD_CLEAR_DISBLAY);
    4504:	81 e0       	ldi	r24, 0x01	; 1
    4506:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
	}
}
    450a:	69 96       	adiw	r28, 0x19	; 25
    450c:	0f b6       	in	r0, 0x3f	; 63
    450e:	f8 94       	cli
    4510:	de bf       	out	0x3e, r29	; 62
    4512:	0f be       	out	0x3f, r0	; 63
    4514:	cd bf       	out	0x3d, r28	; 61
    4516:	cf 91       	pop	r28
    4518:	df 91       	pop	r29
    451a:	1f 91       	pop	r17
    451c:	0f 91       	pop	r16
    451e:	08 95       	ret

00004520 <Mode_4>:

void Mode_4(u8 *flag,u8 *chose)
{
    4520:	df 93       	push	r29
    4522:	cf 93       	push	r28
    4524:	cd b7       	in	r28, 0x3d	; 61
    4526:	de b7       	in	r29, 0x3e	; 62
    4528:	64 97       	sbiw	r28, 0x14	; 20
    452a:	0f b6       	in	r0, 0x3f	; 63
    452c:	f8 94       	cli
    452e:	de bf       	out	0x3e, r29	; 62
    4530:	0f be       	out	0x3f, r0	; 63
    4532:	cd bf       	out	0x3d, r28	; 61
    4534:	98 8b       	std	Y+16, r25	; 0x10
    4536:	8f 87       	std	Y+15, r24	; 0x0f
    4538:	7a 8b       	std	Y+18, r23	; 0x12
    453a:	69 8b       	std	Y+17, r22	; 0x11
	static u8 room =0;
	static u8 room_state=0;
	if(*flag==1)
    453c:	ef 85       	ldd	r30, Y+15	; 0x0f
    453e:	f8 89       	ldd	r31, Y+16	; 0x10
    4540:	80 81       	ld	r24, Z
    4542:	81 30       	cpi	r24, 0x01	; 1
    4544:	21 f4       	brne	.+8      	; 0x454e <Mode_4+0x2e>
	{
		*flag=2;
    4546:	ef 85       	ldd	r30, Y+15	; 0x0f
    4548:	f8 89       	ldd	r31, Y+16	; 0x10
    454a:	82 e0       	ldi	r24, 0x02	; 2
    454c:	80 83       	st	Z, r24
	}
	if(*flag==2)
    454e:	ef 85       	ldd	r30, Y+15	; 0x0f
    4550:	f8 89       	ldd	r31, Y+16	; 0x10
    4552:	80 81       	ld	r24, Z
    4554:	82 30       	cpi	r24, 0x02	; 2
    4556:	39 f4       	brne	.+14     	; 0x4566 <Mode_4+0x46>
	{
		*flag=3;
    4558:	ef 85       	ldd	r30, Y+15	; 0x0f
    455a:	f8 89       	ldd	r31, Y+16	; 0x10
    455c:	83 e0       	ldi	r24, 0x03	; 3
    455e:	80 83       	st	Z, r24
		LCD_voidSendCommand(LCD_CLEAR_DISBLAY);
    4560:	81 e0       	ldi	r24, 0x01	; 1
    4562:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
	}
	if(*flag==3)
    4566:	ef 85       	ldd	r30, Y+15	; 0x0f
    4568:	f8 89       	ldd	r31, Y+16	; 0x10
    456a:	80 81       	ld	r24, Z
    456c:	83 30       	cpi	r24, 0x03	; 3
    456e:	11 f5       	brne	.+68     	; 0x45b4 <Mode_4+0x94>
	{
		LCD_voidSendStringPos("1-Room 1",1,1);
    4570:	8a e7       	ldi	r24, 0x7A	; 122
    4572:	91 e0       	ldi	r25, 0x01	; 1
    4574:	61 e0       	ldi	r22, 0x01	; 1
    4576:	41 e0       	ldi	r20, 0x01	; 1
    4578:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
		LCD_voidSendStringPos("2-Room 2",2,1);
    457c:	83 e8       	ldi	r24, 0x83	; 131
    457e:	91 e0       	ldi	r25, 0x01	; 1
    4580:	62 e0       	ldi	r22, 0x02	; 2
    4582:	41 e0       	ldi	r20, 0x01	; 1
    4584:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
		LCD_voidSendStringPos("3-Room 3",3,1);
    4588:	8c e8       	ldi	r24, 0x8C	; 140
    458a:	91 e0       	ldi	r25, 0x01	; 1
    458c:	63 e0       	ldi	r22, 0x03	; 3
    458e:	41 e0       	ldi	r20, 0x01	; 1
    4590:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
		LCD_voidSendStringPos("4-Room 4",4,1);
    4594:	85 e9       	ldi	r24, 0x95	; 149
    4596:	91 e0       	ldi	r25, 0x01	; 1
    4598:	64 e0       	ldi	r22, 0x04	; 4
    459a:	41 e0       	ldi	r20, 0x01	; 1
    459c:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
		LCD_voidSendStringPos("5-Back",4,10);
    45a0:	8e e9       	ldi	r24, 0x9E	; 158
    45a2:	91 e0       	ldi	r25, 0x01	; 1
    45a4:	64 e0       	ldi	r22, 0x04	; 4
    45a6:	4a e0       	ldi	r20, 0x0A	; 10
    45a8:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
		room = KPD_u8GetPressKey();
    45ac:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <KPD_u8GetPressKey>
    45b0:	80 93 dd 01 	sts	0x01DD, r24
	}
	SPI_u8Tranceive(room);
    45b4:	80 91 dd 01 	lds	r24, 0x01DD
    45b8:	0e 94 a2 06 	call	0xd44	; 0xd44 <SPI_u8Tranceive>
	switch(room)
    45bc:	80 91 dd 01 	lds	r24, 0x01DD
    45c0:	28 2f       	mov	r18, r24
    45c2:	30 e0       	ldi	r19, 0x00	; 0
    45c4:	3c 8b       	std	Y+20, r19	; 0x14
    45c6:	2b 8b       	std	Y+19, r18	; 0x13
    45c8:	8b 89       	ldd	r24, Y+19	; 0x13
    45ca:	9c 89       	ldd	r25, Y+20	; 0x14
    45cc:	83 33       	cpi	r24, 0x33	; 51
    45ce:	91 05       	cpc	r25, r1
    45d0:	09 f4       	brne	.+2      	; 0x45d4 <Mode_4+0xb4>
    45d2:	7b c0       	rjmp	.+246    	; 0x46ca <Mode_4+0x1aa>
    45d4:	2b 89       	ldd	r18, Y+19	; 0x13
    45d6:	3c 89       	ldd	r19, Y+20	; 0x14
    45d8:	24 33       	cpi	r18, 0x34	; 52
    45da:	31 05       	cpc	r19, r1
    45dc:	5c f4       	brge	.+22     	; 0x45f4 <Mode_4+0xd4>
    45de:	8b 89       	ldd	r24, Y+19	; 0x13
    45e0:	9c 89       	ldd	r25, Y+20	; 0x14
    45e2:	81 33       	cpi	r24, 0x31	; 49
    45e4:	91 05       	cpc	r25, r1
    45e6:	99 f0       	breq	.+38     	; 0x460e <Mode_4+0xee>
    45e8:	2b 89       	ldd	r18, Y+19	; 0x13
    45ea:	3c 89       	ldd	r19, Y+20	; 0x14
    45ec:	22 33       	cpi	r18, 0x32	; 50
    45ee:	31 05       	cpc	r19, r1
    45f0:	e9 f1       	breq	.+122    	; 0x466c <Mode_4+0x14c>
    45f2:	d5 c0       	rjmp	.+426    	; 0x479e <Mode_4+0x27e>
    45f4:	8b 89       	ldd	r24, Y+19	; 0x13
    45f6:	9c 89       	ldd	r25, Y+20	; 0x14
    45f8:	84 33       	cpi	r24, 0x34	; 52
    45fa:	91 05       	cpc	r25, r1
    45fc:	09 f4       	brne	.+2      	; 0x4600 <Mode_4+0xe0>
    45fe:	94 c0       	rjmp	.+296    	; 0x4728 <Mode_4+0x208>
    4600:	2b 89       	ldd	r18, Y+19	; 0x13
    4602:	3c 89       	ldd	r19, Y+20	; 0x14
    4604:	25 33       	cpi	r18, 0x35	; 53
    4606:	31 05       	cpc	r19, r1
    4608:	09 f4       	brne	.+2      	; 0x460c <Mode_4+0xec>
    460a:	bd c0       	rjmp	.+378    	; 0x4786 <Mode_4+0x266>
    460c:	c8 c0       	rjmp	.+400    	; 0x479e <Mode_4+0x27e>
	{
		case '1':
			if(*flag==3)
    460e:	ef 85       	ldd	r30, Y+15	; 0x0f
    4610:	f8 89       	ldd	r31, Y+16	; 0x10
    4612:	80 81       	ld	r24, Z
    4614:	83 30       	cpi	r24, 0x03	; 3
    4616:	c9 f4       	brne	.+50     	; 0x464a <Mode_4+0x12a>
			{
				*flag=4;
    4618:	ef 85       	ldd	r30, Y+15	; 0x0f
    461a:	f8 89       	ldd	r31, Y+16	; 0x10
    461c:	84 e0       	ldi	r24, 0x04	; 4
    461e:	80 83       	st	Z, r24
				LCD_voidSendCommand(LCD_CLEAR_DISBLAY);
    4620:	81 e0       	ldi	r24, 0x01	; 1
    4622:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
				LCD_voidSendStringPos("1-Turn On",1,1);
    4626:	85 ea       	ldi	r24, 0xA5	; 165
    4628:	91 e0       	ldi	r25, 0x01	; 1
    462a:	61 e0       	ldi	r22, 0x01	; 1
    462c:	41 e0       	ldi	r20, 0x01	; 1
    462e:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
				LCD_voidSendStringPos("2-Turn Off",2,1);
    4632:	8f ea       	ldi	r24, 0xAF	; 175
    4634:	91 e0       	ldi	r25, 0x01	; 1
    4636:	62 e0       	ldi	r22, 0x02	; 2
    4638:	41 e0       	ldi	r20, 0x01	; 1
    463a:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
				LCD_voidSendStringPos("3-Back",3,1);
    463e:	8a eb       	ldi	r24, 0xBA	; 186
    4640:	91 e0       	ldi	r25, 0x01	; 1
    4642:	63 e0       	ldi	r22, 0x03	; 3
    4644:	41 e0       	ldi	r20, 0x01	; 1
    4646:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
			}
			room_state = KPD_u8GetPressKey();
    464a:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <KPD_u8GetPressKey>
    464e:	80 93 dc 01 	sts	0x01DC, r24
			if(room_state == '3')
    4652:	80 91 dc 01 	lds	r24, 0x01DC
    4656:	83 33       	cpi	r24, 0x33	; 51
    4658:	21 f4       	brne	.+8      	; 0x4662 <Mode_4+0x142>
			{
				*flag=2;
    465a:	ef 85       	ldd	r30, Y+15	; 0x0f
    465c:	f8 89       	ldd	r31, Y+16	; 0x10
    465e:	82 e0       	ldi	r24, 0x02	; 2
    4660:	80 83       	st	Z, r24

			}
			SPI_u8Tranceive(room_state);
    4662:	80 91 dc 01 	lds	r24, 0x01DC
    4666:	0e 94 a2 06 	call	0xd44	; 0xd44 <SPI_u8Tranceive>
    466a:	19 c1       	rjmp	.+562    	; 0x489e <Mode_4+0x37e>
			break;
		case '2':
			if(*flag==3)
    466c:	ef 85       	ldd	r30, Y+15	; 0x0f
    466e:	f8 89       	ldd	r31, Y+16	; 0x10
    4670:	80 81       	ld	r24, Z
    4672:	83 30       	cpi	r24, 0x03	; 3
    4674:	c9 f4       	brne	.+50     	; 0x46a8 <Mode_4+0x188>
			{
				*flag=4;
    4676:	ef 85       	ldd	r30, Y+15	; 0x0f
    4678:	f8 89       	ldd	r31, Y+16	; 0x10
    467a:	84 e0       	ldi	r24, 0x04	; 4
    467c:	80 83       	st	Z, r24
				LCD_voidSendCommand(LCD_CLEAR_DISBLAY);
    467e:	81 e0       	ldi	r24, 0x01	; 1
    4680:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
				LCD_voidSendStringPos("1-Turn On",1,1);
    4684:	85 ea       	ldi	r24, 0xA5	; 165
    4686:	91 e0       	ldi	r25, 0x01	; 1
    4688:	61 e0       	ldi	r22, 0x01	; 1
    468a:	41 e0       	ldi	r20, 0x01	; 1
    468c:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
				LCD_voidSendStringPos("2-Turn Off",2,1);
    4690:	8f ea       	ldi	r24, 0xAF	; 175
    4692:	91 e0       	ldi	r25, 0x01	; 1
    4694:	62 e0       	ldi	r22, 0x02	; 2
    4696:	41 e0       	ldi	r20, 0x01	; 1
    4698:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
				LCD_voidSendStringPos("3-Back",3,1);
    469c:	8a eb       	ldi	r24, 0xBA	; 186
    469e:	91 e0       	ldi	r25, 0x01	; 1
    46a0:	63 e0       	ldi	r22, 0x03	; 3
    46a2:	41 e0       	ldi	r20, 0x01	; 1
    46a4:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
			}
			room_state = KPD_u8GetPressKey();
    46a8:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <KPD_u8GetPressKey>
    46ac:	80 93 dc 01 	sts	0x01DC, r24
			if(room_state == '3')
    46b0:	80 91 dc 01 	lds	r24, 0x01DC
    46b4:	83 33       	cpi	r24, 0x33	; 51
    46b6:	21 f4       	brne	.+8      	; 0x46c0 <Mode_4+0x1a0>
			{
				*flag=2;
    46b8:	ef 85       	ldd	r30, Y+15	; 0x0f
    46ba:	f8 89       	ldd	r31, Y+16	; 0x10
    46bc:	82 e0       	ldi	r24, 0x02	; 2
    46be:	80 83       	st	Z, r24
			}
			SPI_u8Tranceive(room_state);
    46c0:	80 91 dc 01 	lds	r24, 0x01DC
    46c4:	0e 94 a2 06 	call	0xd44	; 0xd44 <SPI_u8Tranceive>
    46c8:	ea c0       	rjmp	.+468    	; 0x489e <Mode_4+0x37e>
			break;
		case '3':
			if(*flag==3)
    46ca:	ef 85       	ldd	r30, Y+15	; 0x0f
    46cc:	f8 89       	ldd	r31, Y+16	; 0x10
    46ce:	80 81       	ld	r24, Z
    46d0:	83 30       	cpi	r24, 0x03	; 3
    46d2:	c9 f4       	brne	.+50     	; 0x4706 <Mode_4+0x1e6>
			{
				*flag=4;
    46d4:	ef 85       	ldd	r30, Y+15	; 0x0f
    46d6:	f8 89       	ldd	r31, Y+16	; 0x10
    46d8:	84 e0       	ldi	r24, 0x04	; 4
    46da:	80 83       	st	Z, r24
				LCD_voidSendCommand(LCD_CLEAR_DISBLAY);
    46dc:	81 e0       	ldi	r24, 0x01	; 1
    46de:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
				LCD_voidSendStringPos("1-Turn On",1,1);
    46e2:	85 ea       	ldi	r24, 0xA5	; 165
    46e4:	91 e0       	ldi	r25, 0x01	; 1
    46e6:	61 e0       	ldi	r22, 0x01	; 1
    46e8:	41 e0       	ldi	r20, 0x01	; 1
    46ea:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
				LCD_voidSendStringPos("2-Turn Off",2,1);
    46ee:	8f ea       	ldi	r24, 0xAF	; 175
    46f0:	91 e0       	ldi	r25, 0x01	; 1
    46f2:	62 e0       	ldi	r22, 0x02	; 2
    46f4:	41 e0       	ldi	r20, 0x01	; 1
    46f6:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
				LCD_voidSendStringPos("3-Back",3,1);
    46fa:	8a eb       	ldi	r24, 0xBA	; 186
    46fc:	91 e0       	ldi	r25, 0x01	; 1
    46fe:	63 e0       	ldi	r22, 0x03	; 3
    4700:	41 e0       	ldi	r20, 0x01	; 1
    4702:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
			}
			room_state = KPD_u8GetPressKey();
    4706:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <KPD_u8GetPressKey>
    470a:	80 93 dc 01 	sts	0x01DC, r24
			if(room_state == '3')
    470e:	80 91 dc 01 	lds	r24, 0x01DC
    4712:	83 33       	cpi	r24, 0x33	; 51
    4714:	21 f4       	brne	.+8      	; 0x471e <Mode_4+0x1fe>
			{
				*flag=2;
    4716:	ef 85       	ldd	r30, Y+15	; 0x0f
    4718:	f8 89       	ldd	r31, Y+16	; 0x10
    471a:	82 e0       	ldi	r24, 0x02	; 2
    471c:	80 83       	st	Z, r24
			}
			SPI_u8Tranceive(room_state);
    471e:	80 91 dc 01 	lds	r24, 0x01DC
    4722:	0e 94 a2 06 	call	0xd44	; 0xd44 <SPI_u8Tranceive>
    4726:	bb c0       	rjmp	.+374    	; 0x489e <Mode_4+0x37e>
			break;
		case '4':
			if(*flag==3)
    4728:	ef 85       	ldd	r30, Y+15	; 0x0f
    472a:	f8 89       	ldd	r31, Y+16	; 0x10
    472c:	80 81       	ld	r24, Z
    472e:	83 30       	cpi	r24, 0x03	; 3
    4730:	c9 f4       	brne	.+50     	; 0x4764 <Mode_4+0x244>
			{
				*flag=4;
    4732:	ef 85       	ldd	r30, Y+15	; 0x0f
    4734:	f8 89       	ldd	r31, Y+16	; 0x10
    4736:	84 e0       	ldi	r24, 0x04	; 4
    4738:	80 83       	st	Z, r24
				LCD_voidSendCommand(LCD_CLEAR_DISBLAY);
    473a:	81 e0       	ldi	r24, 0x01	; 1
    473c:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
				LCD_voidSendStringPos("1-Turn On",1,1);
    4740:	85 ea       	ldi	r24, 0xA5	; 165
    4742:	91 e0       	ldi	r25, 0x01	; 1
    4744:	61 e0       	ldi	r22, 0x01	; 1
    4746:	41 e0       	ldi	r20, 0x01	; 1
    4748:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
				LCD_voidSendStringPos("2-Turn Off",2,1);
    474c:	8f ea       	ldi	r24, 0xAF	; 175
    474e:	91 e0       	ldi	r25, 0x01	; 1
    4750:	62 e0       	ldi	r22, 0x02	; 2
    4752:	41 e0       	ldi	r20, 0x01	; 1
    4754:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
				LCD_voidSendStringPos("3-Back",3,1);
    4758:	8a eb       	ldi	r24, 0xBA	; 186
    475a:	91 e0       	ldi	r25, 0x01	; 1
    475c:	63 e0       	ldi	r22, 0x03	; 3
    475e:	41 e0       	ldi	r20, 0x01	; 1
    4760:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
			}
			room_state = KPD_u8GetPressKey();
    4764:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <KPD_u8GetPressKey>
    4768:	80 93 dc 01 	sts	0x01DC, r24
			if(room_state == '3')
    476c:	80 91 dc 01 	lds	r24, 0x01DC
    4770:	83 33       	cpi	r24, 0x33	; 51
    4772:	21 f4       	brne	.+8      	; 0x477c <Mode_4+0x25c>
			{
			*flag=2;
    4774:	ef 85       	ldd	r30, Y+15	; 0x0f
    4776:	f8 89       	ldd	r31, Y+16	; 0x10
    4778:	82 e0       	ldi	r24, 0x02	; 2
    477a:	80 83       	st	Z, r24
			}
			SPI_u8Tranceive(room_state);
    477c:	80 91 dc 01 	lds	r24, 0x01DC
    4780:	0e 94 a2 06 	call	0xd44	; 0xd44 <SPI_u8Tranceive>
    4784:	8c c0       	rjmp	.+280    	; 0x489e <Mode_4+0x37e>
			break;
		case '5':
			*flag=1;
    4786:	ef 85       	ldd	r30, Y+15	; 0x0f
    4788:	f8 89       	ldd	r31, Y+16	; 0x10
    478a:	81 e0       	ldi	r24, 0x01	; 1
    478c:	80 83       	st	Z, r24
			*chose=KPD_CHECK_KEY;
    478e:	e9 89       	ldd	r30, Y+17	; 0x11
    4790:	fa 89       	ldd	r31, Y+18	; 0x12
    4792:	8f ef       	ldi	r24, 0xFF	; 255
    4794:	80 83       	st	Z, r24
			LCD_voidSendCommand(LCD_CLEAR_DISBLAY);
    4796:	81 e0       	ldi	r24, 0x01	; 1
    4798:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
    479c:	80 c0       	rjmp	.+256    	; 0x489e <Mode_4+0x37e>
			break;
			default :
			if(room != KPD_CHECK_KEY)
    479e:	80 91 dd 01 	lds	r24, 0x01DD
    47a2:	8f 3f       	cpi	r24, 0xFF	; 255
    47a4:	09 f4       	brne	.+2      	; 0x47a8 <Mode_4+0x288>
    47a6:	7b c0       	rjmp	.+246    	; 0x489e <Mode_4+0x37e>
			{
				LCD_voidSendCommand(LCD_CLEAR_DISBLAY);
    47a8:	81 e0       	ldi	r24, 0x01	; 1
    47aa:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_voidSendCommand>
				LCD_voidSendStringPos("Invalid Chose ",1,1);
    47ae:	81 eb       	ldi	r24, 0xB1	; 177
    47b0:	90 e0       	ldi	r25, 0x00	; 0
    47b2:	61 e0       	ldi	r22, 0x01	; 1
    47b4:	41 e0       	ldi	r20, 0x01	; 1
    47b6:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_voidSendStringPos>
    47ba:	80 e0       	ldi	r24, 0x00	; 0
    47bc:	90 e0       	ldi	r25, 0x00	; 0
    47be:	af e2       	ldi	r26, 0x2F	; 47
    47c0:	b4 e4       	ldi	r27, 0x44	; 68
    47c2:	8b 87       	std	Y+11, r24	; 0x0b
    47c4:	9c 87       	std	Y+12, r25	; 0x0c
    47c6:	ad 87       	std	Y+13, r26	; 0x0d
    47c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    47cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    47ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    47d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    47d2:	20 e0       	ldi	r18, 0x00	; 0
    47d4:	30 e0       	ldi	r19, 0x00	; 0
    47d6:	4a ef       	ldi	r20, 0xFA	; 250
    47d8:	54 e4       	ldi	r21, 0x44	; 68
    47da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47de:	dc 01       	movw	r26, r24
    47e0:	cb 01       	movw	r24, r22
    47e2:	8f 83       	std	Y+7, r24	; 0x07
    47e4:	98 87       	std	Y+8, r25	; 0x08
    47e6:	a9 87       	std	Y+9, r26	; 0x09
    47e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    47ea:	6f 81       	ldd	r22, Y+7	; 0x07
    47ec:	78 85       	ldd	r23, Y+8	; 0x08
    47ee:	89 85       	ldd	r24, Y+9	; 0x09
    47f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    47f2:	20 e0       	ldi	r18, 0x00	; 0
    47f4:	30 e0       	ldi	r19, 0x00	; 0
    47f6:	40 e8       	ldi	r20, 0x80	; 128
    47f8:	5f e3       	ldi	r21, 0x3F	; 63
    47fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47fe:	88 23       	and	r24, r24
    4800:	2c f4       	brge	.+10     	; 0x480c <Mode_4+0x2ec>
		__ticks = 1;
    4802:	81 e0       	ldi	r24, 0x01	; 1
    4804:	90 e0       	ldi	r25, 0x00	; 0
    4806:	9e 83       	std	Y+6, r25	; 0x06
    4808:	8d 83       	std	Y+5, r24	; 0x05
    480a:	3f c0       	rjmp	.+126    	; 0x488a <Mode_4+0x36a>
	else if (__tmp > 65535)
    480c:	6f 81       	ldd	r22, Y+7	; 0x07
    480e:	78 85       	ldd	r23, Y+8	; 0x08
    4810:	89 85       	ldd	r24, Y+9	; 0x09
    4812:	9a 85       	ldd	r25, Y+10	; 0x0a
    4814:	20 e0       	ldi	r18, 0x00	; 0
    4816:	3f ef       	ldi	r19, 0xFF	; 255
    4818:	4f e7       	ldi	r20, 0x7F	; 127
    481a:	57 e4       	ldi	r21, 0x47	; 71
    481c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4820:	18 16       	cp	r1, r24
    4822:	4c f5       	brge	.+82     	; 0x4876 <Mode_4+0x356>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4824:	6b 85       	ldd	r22, Y+11	; 0x0b
    4826:	7c 85       	ldd	r23, Y+12	; 0x0c
    4828:	8d 85       	ldd	r24, Y+13	; 0x0d
    482a:	9e 85       	ldd	r25, Y+14	; 0x0e
    482c:	20 e0       	ldi	r18, 0x00	; 0
    482e:	30 e0       	ldi	r19, 0x00	; 0
    4830:	40 e2       	ldi	r20, 0x20	; 32
    4832:	51 e4       	ldi	r21, 0x41	; 65
    4834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4838:	dc 01       	movw	r26, r24
    483a:	cb 01       	movw	r24, r22
    483c:	bc 01       	movw	r22, r24
    483e:	cd 01       	movw	r24, r26
    4840:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4844:	dc 01       	movw	r26, r24
    4846:	cb 01       	movw	r24, r22
    4848:	9e 83       	std	Y+6, r25	; 0x06
    484a:	8d 83       	std	Y+5, r24	; 0x05
    484c:	0f c0       	rjmp	.+30     	; 0x486c <Mode_4+0x34c>
    484e:	88 ec       	ldi	r24, 0xC8	; 200
    4850:	90 e0       	ldi	r25, 0x00	; 0
    4852:	9c 83       	std	Y+4, r25	; 0x04
    4854:	8b 83       	std	Y+3, r24	; 0x03
    4856:	8b 81       	ldd	r24, Y+3	; 0x03
    4858:	9c 81       	ldd	r25, Y+4	; 0x04
    485a:	01 97       	sbiw	r24, 0x01	; 1
    485c:	f1 f7       	brne	.-4      	; 0x485a <Mode_4+0x33a>
    485e:	9c 83       	std	Y+4, r25	; 0x04
    4860:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4862:	8d 81       	ldd	r24, Y+5	; 0x05
    4864:	9e 81       	ldd	r25, Y+6	; 0x06
    4866:	01 97       	sbiw	r24, 0x01	; 1
    4868:	9e 83       	std	Y+6, r25	; 0x06
    486a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    486c:	8d 81       	ldd	r24, Y+5	; 0x05
    486e:	9e 81       	ldd	r25, Y+6	; 0x06
    4870:	00 97       	sbiw	r24, 0x00	; 0
    4872:	69 f7       	brne	.-38     	; 0x484e <Mode_4+0x32e>
    4874:	14 c0       	rjmp	.+40     	; 0x489e <Mode_4+0x37e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4876:	6f 81       	ldd	r22, Y+7	; 0x07
    4878:	78 85       	ldd	r23, Y+8	; 0x08
    487a:	89 85       	ldd	r24, Y+9	; 0x09
    487c:	9a 85       	ldd	r25, Y+10	; 0x0a
    487e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4882:	dc 01       	movw	r26, r24
    4884:	cb 01       	movw	r24, r22
    4886:	9e 83       	std	Y+6, r25	; 0x06
    4888:	8d 83       	std	Y+5, r24	; 0x05
    488a:	8d 81       	ldd	r24, Y+5	; 0x05
    488c:	9e 81       	ldd	r25, Y+6	; 0x06
    488e:	9a 83       	std	Y+2, r25	; 0x02
    4890:	89 83       	std	Y+1, r24	; 0x01
    4892:	89 81       	ldd	r24, Y+1	; 0x01
    4894:	9a 81       	ldd	r25, Y+2	; 0x02
    4896:	01 97       	sbiw	r24, 0x01	; 1
    4898:	f1 f7       	brne	.-4      	; 0x4896 <Mode_4+0x376>
    489a:	9a 83       	std	Y+2, r25	; 0x02
    489c:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(700);
			}
			break;
	}

}
    489e:	64 96       	adiw	r28, 0x14	; 20
    48a0:	0f b6       	in	r0, 0x3f	; 63
    48a2:	f8 94       	cli
    48a4:	de bf       	out	0x3e, r29	; 62
    48a6:	0f be       	out	0x3f, r0	; 63
    48a8:	cd bf       	out	0x3d, r28	; 61
    48aa:	cf 91       	pop	r28
    48ac:	df 91       	pop	r29
    48ae:	08 95       	ret

000048b0 <__mulsi3>:
    48b0:	62 9f       	mul	r22, r18
    48b2:	d0 01       	movw	r26, r0
    48b4:	73 9f       	mul	r23, r19
    48b6:	f0 01       	movw	r30, r0
    48b8:	82 9f       	mul	r24, r18
    48ba:	e0 0d       	add	r30, r0
    48bc:	f1 1d       	adc	r31, r1
    48be:	64 9f       	mul	r22, r20
    48c0:	e0 0d       	add	r30, r0
    48c2:	f1 1d       	adc	r31, r1
    48c4:	92 9f       	mul	r25, r18
    48c6:	f0 0d       	add	r31, r0
    48c8:	83 9f       	mul	r24, r19
    48ca:	f0 0d       	add	r31, r0
    48cc:	74 9f       	mul	r23, r20
    48ce:	f0 0d       	add	r31, r0
    48d0:	65 9f       	mul	r22, r21
    48d2:	f0 0d       	add	r31, r0
    48d4:	99 27       	eor	r25, r25
    48d6:	72 9f       	mul	r23, r18
    48d8:	b0 0d       	add	r27, r0
    48da:	e1 1d       	adc	r30, r1
    48dc:	f9 1f       	adc	r31, r25
    48de:	63 9f       	mul	r22, r19
    48e0:	b0 0d       	add	r27, r0
    48e2:	e1 1d       	adc	r30, r1
    48e4:	f9 1f       	adc	r31, r25
    48e6:	bd 01       	movw	r22, r26
    48e8:	cf 01       	movw	r24, r30
    48ea:	11 24       	eor	r1, r1
    48ec:	08 95       	ret

000048ee <__udivmodhi4>:
    48ee:	aa 1b       	sub	r26, r26
    48f0:	bb 1b       	sub	r27, r27
    48f2:	51 e1       	ldi	r21, 0x11	; 17
    48f4:	07 c0       	rjmp	.+14     	; 0x4904 <__udivmodhi4_ep>

000048f6 <__udivmodhi4_loop>:
    48f6:	aa 1f       	adc	r26, r26
    48f8:	bb 1f       	adc	r27, r27
    48fa:	a6 17       	cp	r26, r22
    48fc:	b7 07       	cpc	r27, r23
    48fe:	10 f0       	brcs	.+4      	; 0x4904 <__udivmodhi4_ep>
    4900:	a6 1b       	sub	r26, r22
    4902:	b7 0b       	sbc	r27, r23

00004904 <__udivmodhi4_ep>:
    4904:	88 1f       	adc	r24, r24
    4906:	99 1f       	adc	r25, r25
    4908:	5a 95       	dec	r21
    490a:	a9 f7       	brne	.-22     	; 0x48f6 <__udivmodhi4_loop>
    490c:	80 95       	com	r24
    490e:	90 95       	com	r25
    4910:	bc 01       	movw	r22, r24
    4912:	cd 01       	movw	r24, r26
    4914:	08 95       	ret

00004916 <__udivmodsi4>:
    4916:	a1 e2       	ldi	r26, 0x21	; 33
    4918:	1a 2e       	mov	r1, r26
    491a:	aa 1b       	sub	r26, r26
    491c:	bb 1b       	sub	r27, r27
    491e:	fd 01       	movw	r30, r26
    4920:	0d c0       	rjmp	.+26     	; 0x493c <__udivmodsi4_ep>

00004922 <__udivmodsi4_loop>:
    4922:	aa 1f       	adc	r26, r26
    4924:	bb 1f       	adc	r27, r27
    4926:	ee 1f       	adc	r30, r30
    4928:	ff 1f       	adc	r31, r31
    492a:	a2 17       	cp	r26, r18
    492c:	b3 07       	cpc	r27, r19
    492e:	e4 07       	cpc	r30, r20
    4930:	f5 07       	cpc	r31, r21
    4932:	20 f0       	brcs	.+8      	; 0x493c <__udivmodsi4_ep>
    4934:	a2 1b       	sub	r26, r18
    4936:	b3 0b       	sbc	r27, r19
    4938:	e4 0b       	sbc	r30, r20
    493a:	f5 0b       	sbc	r31, r21

0000493c <__udivmodsi4_ep>:
    493c:	66 1f       	adc	r22, r22
    493e:	77 1f       	adc	r23, r23
    4940:	88 1f       	adc	r24, r24
    4942:	99 1f       	adc	r25, r25
    4944:	1a 94       	dec	r1
    4946:	69 f7       	brne	.-38     	; 0x4922 <__udivmodsi4_loop>
    4948:	60 95       	com	r22
    494a:	70 95       	com	r23
    494c:	80 95       	com	r24
    494e:	90 95       	com	r25
    4950:	9b 01       	movw	r18, r22
    4952:	ac 01       	movw	r20, r24
    4954:	bd 01       	movw	r22, r26
    4956:	cf 01       	movw	r24, r30
    4958:	08 95       	ret

0000495a <__prologue_saves__>:
    495a:	2f 92       	push	r2
    495c:	3f 92       	push	r3
    495e:	4f 92       	push	r4
    4960:	5f 92       	push	r5
    4962:	6f 92       	push	r6
    4964:	7f 92       	push	r7
    4966:	8f 92       	push	r8
    4968:	9f 92       	push	r9
    496a:	af 92       	push	r10
    496c:	bf 92       	push	r11
    496e:	cf 92       	push	r12
    4970:	df 92       	push	r13
    4972:	ef 92       	push	r14
    4974:	ff 92       	push	r15
    4976:	0f 93       	push	r16
    4978:	1f 93       	push	r17
    497a:	cf 93       	push	r28
    497c:	df 93       	push	r29
    497e:	cd b7       	in	r28, 0x3d	; 61
    4980:	de b7       	in	r29, 0x3e	; 62
    4982:	ca 1b       	sub	r28, r26
    4984:	db 0b       	sbc	r29, r27
    4986:	0f b6       	in	r0, 0x3f	; 63
    4988:	f8 94       	cli
    498a:	de bf       	out	0x3e, r29	; 62
    498c:	0f be       	out	0x3f, r0	; 63
    498e:	cd bf       	out	0x3d, r28	; 61
    4990:	09 94       	ijmp

00004992 <__epilogue_restores__>:
    4992:	2a 88       	ldd	r2, Y+18	; 0x12
    4994:	39 88       	ldd	r3, Y+17	; 0x11
    4996:	48 88       	ldd	r4, Y+16	; 0x10
    4998:	5f 84       	ldd	r5, Y+15	; 0x0f
    499a:	6e 84       	ldd	r6, Y+14	; 0x0e
    499c:	7d 84       	ldd	r7, Y+13	; 0x0d
    499e:	8c 84       	ldd	r8, Y+12	; 0x0c
    49a0:	9b 84       	ldd	r9, Y+11	; 0x0b
    49a2:	aa 84       	ldd	r10, Y+10	; 0x0a
    49a4:	b9 84       	ldd	r11, Y+9	; 0x09
    49a6:	c8 84       	ldd	r12, Y+8	; 0x08
    49a8:	df 80       	ldd	r13, Y+7	; 0x07
    49aa:	ee 80       	ldd	r14, Y+6	; 0x06
    49ac:	fd 80       	ldd	r15, Y+5	; 0x05
    49ae:	0c 81       	ldd	r16, Y+4	; 0x04
    49b0:	1b 81       	ldd	r17, Y+3	; 0x03
    49b2:	aa 81       	ldd	r26, Y+2	; 0x02
    49b4:	b9 81       	ldd	r27, Y+1	; 0x01
    49b6:	ce 0f       	add	r28, r30
    49b8:	d1 1d       	adc	r29, r1
    49ba:	0f b6       	in	r0, 0x3f	; 63
    49bc:	f8 94       	cli
    49be:	de bf       	out	0x3e, r29	; 62
    49c0:	0f be       	out	0x3f, r0	; 63
    49c2:	cd bf       	out	0x3d, r28	; 61
    49c4:	ed 01       	movw	r28, r26
    49c6:	08 95       	ret

000049c8 <atoi>:
    49c8:	fc 01       	movw	r30, r24
    49ca:	88 27       	eor	r24, r24
    49cc:	99 27       	eor	r25, r25
    49ce:	e8 94       	clt
    49d0:	21 91       	ld	r18, Z+
    49d2:	20 32       	cpi	r18, 0x20	; 32
    49d4:	e9 f3       	breq	.-6      	; 0x49d0 <atoi+0x8>
    49d6:	29 30       	cpi	r18, 0x09	; 9
    49d8:	10 f0       	brcs	.+4      	; 0x49de <atoi+0x16>
    49da:	2e 30       	cpi	r18, 0x0E	; 14
    49dc:	c8 f3       	brcs	.-14     	; 0x49d0 <atoi+0x8>
    49de:	2b 32       	cpi	r18, 0x2B	; 43
    49e0:	41 f0       	breq	.+16     	; 0x49f2 <atoi+0x2a>
    49e2:	2d 32       	cpi	r18, 0x2D	; 45
    49e4:	39 f4       	brne	.+14     	; 0x49f4 <atoi+0x2c>
    49e6:	68 94       	set
    49e8:	04 c0       	rjmp	.+8      	; 0x49f2 <atoi+0x2a>
    49ea:	0e 94 09 25 	call	0x4a12	; 0x4a12 <__mulhi_const_10>
    49ee:	82 0f       	add	r24, r18
    49f0:	91 1d       	adc	r25, r1
    49f2:	21 91       	ld	r18, Z+
    49f4:	20 53       	subi	r18, 0x30	; 48
    49f6:	2a 30       	cpi	r18, 0x0A	; 10
    49f8:	c0 f3       	brcs	.-16     	; 0x49ea <atoi+0x22>
    49fa:	1e f4       	brtc	.+6      	; 0x4a02 <atoi+0x3a>
    49fc:	90 95       	com	r25
    49fe:	81 95       	neg	r24
    4a00:	9f 4f       	sbci	r25, 0xFF	; 255
    4a02:	08 95       	ret

00004a04 <memset>:
    4a04:	dc 01       	movw	r26, r24
    4a06:	01 c0       	rjmp	.+2      	; 0x4a0a <memset+0x6>
    4a08:	6d 93       	st	X+, r22
    4a0a:	41 50       	subi	r20, 0x01	; 1
    4a0c:	50 40       	sbci	r21, 0x00	; 0
    4a0e:	e0 f7       	brcc	.-8      	; 0x4a08 <memset+0x4>
    4a10:	08 95       	ret

00004a12 <__mulhi_const_10>:
    4a12:	7a e0       	ldi	r23, 0x0A	; 10
    4a14:	97 9f       	mul	r25, r23
    4a16:	90 2d       	mov	r25, r0
    4a18:	87 9f       	mul	r24, r23
    4a1a:	80 2d       	mov	r24, r0
    4a1c:	91 0d       	add	r25, r1
    4a1e:	11 24       	eor	r1, r1
    4a20:	08 95       	ret

00004a22 <sprintf>:
    4a22:	ae e0       	ldi	r26, 0x0E	; 14
    4a24:	b0 e0       	ldi	r27, 0x00	; 0
    4a26:	e7 e1       	ldi	r30, 0x17	; 23
    4a28:	f5 e2       	ldi	r31, 0x25	; 37
    4a2a:	0c 94 bb 24 	jmp	0x4976	; 0x4976 <__prologue_saves__+0x1c>
    4a2e:	0d 89       	ldd	r16, Y+21	; 0x15
    4a30:	1e 89       	ldd	r17, Y+22	; 0x16
    4a32:	86 e0       	ldi	r24, 0x06	; 6
    4a34:	8c 83       	std	Y+4, r24	; 0x04
    4a36:	1a 83       	std	Y+2, r17	; 0x02
    4a38:	09 83       	std	Y+1, r16	; 0x01
    4a3a:	8f ef       	ldi	r24, 0xFF	; 255
    4a3c:	9f e7       	ldi	r25, 0x7F	; 127
    4a3e:	9e 83       	std	Y+6, r25	; 0x06
    4a40:	8d 83       	std	Y+5, r24	; 0x05
    4a42:	9e 01       	movw	r18, r28
    4a44:	27 5e       	subi	r18, 0xE7	; 231
    4a46:	3f 4f       	sbci	r19, 0xFF	; 255
    4a48:	ce 01       	movw	r24, r28
    4a4a:	01 96       	adiw	r24, 0x01	; 1
    4a4c:	6f 89       	ldd	r22, Y+23	; 0x17
    4a4e:	78 8d       	ldd	r23, Y+24	; 0x18
    4a50:	a9 01       	movw	r20, r18
    4a52:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <vfprintf>
    4a56:	2f 81       	ldd	r18, Y+7	; 0x07
    4a58:	38 85       	ldd	r19, Y+8	; 0x08
    4a5a:	02 0f       	add	r16, r18
    4a5c:	13 1f       	adc	r17, r19
    4a5e:	f8 01       	movw	r30, r16
    4a60:	10 82       	st	Z, r1
    4a62:	2e 96       	adiw	r28, 0x0e	; 14
    4a64:	e4 e0       	ldi	r30, 0x04	; 4
    4a66:	0c 94 d7 24 	jmp	0x49ae	; 0x49ae <__epilogue_restores__+0x1c>

00004a6a <vfprintf>:
    4a6a:	ab e0       	ldi	r26, 0x0B	; 11
    4a6c:	b0 e0       	ldi	r27, 0x00	; 0
    4a6e:	eb e3       	ldi	r30, 0x3B	; 59
    4a70:	f5 e2       	ldi	r31, 0x25	; 37
    4a72:	0c 94 ad 24 	jmp	0x495a	; 0x495a <__prologue_saves__>
    4a76:	3c 01       	movw	r6, r24
    4a78:	2b 01       	movw	r4, r22
    4a7a:	5a 01       	movw	r10, r20
    4a7c:	fc 01       	movw	r30, r24
    4a7e:	17 82       	std	Z+7, r1	; 0x07
    4a80:	16 82       	std	Z+6, r1	; 0x06
    4a82:	83 81       	ldd	r24, Z+3	; 0x03
    4a84:	81 fd       	sbrc	r24, 1
    4a86:	03 c0       	rjmp	.+6      	; 0x4a8e <vfprintf+0x24>
    4a88:	6f ef       	ldi	r22, 0xFF	; 255
    4a8a:	7f ef       	ldi	r23, 0xFF	; 255
    4a8c:	c6 c1       	rjmp	.+908    	; 0x4e1a <vfprintf+0x3b0>
    4a8e:	9a e0       	ldi	r25, 0x0A	; 10
    4a90:	89 2e       	mov	r8, r25
    4a92:	1e 01       	movw	r2, r28
    4a94:	08 94       	sec
    4a96:	21 1c       	adc	r2, r1
    4a98:	31 1c       	adc	r3, r1
    4a9a:	f3 01       	movw	r30, r6
    4a9c:	23 81       	ldd	r18, Z+3	; 0x03
    4a9e:	f2 01       	movw	r30, r4
    4aa0:	23 fd       	sbrc	r18, 3
    4aa2:	85 91       	lpm	r24, Z+
    4aa4:	23 ff       	sbrs	r18, 3
    4aa6:	81 91       	ld	r24, Z+
    4aa8:	2f 01       	movw	r4, r30
    4aaa:	88 23       	and	r24, r24
    4aac:	09 f4       	brne	.+2      	; 0x4ab0 <vfprintf+0x46>
    4aae:	b2 c1       	rjmp	.+868    	; 0x4e14 <vfprintf+0x3aa>
    4ab0:	85 32       	cpi	r24, 0x25	; 37
    4ab2:	39 f4       	brne	.+14     	; 0x4ac2 <vfprintf+0x58>
    4ab4:	23 fd       	sbrc	r18, 3
    4ab6:	85 91       	lpm	r24, Z+
    4ab8:	23 ff       	sbrs	r18, 3
    4aba:	81 91       	ld	r24, Z+
    4abc:	2f 01       	movw	r4, r30
    4abe:	85 32       	cpi	r24, 0x25	; 37
    4ac0:	29 f4       	brne	.+10     	; 0x4acc <vfprintf+0x62>
    4ac2:	90 e0       	ldi	r25, 0x00	; 0
    4ac4:	b3 01       	movw	r22, r6
    4ac6:	0e 94 28 27 	call	0x4e50	; 0x4e50 <fputc>
    4aca:	e7 cf       	rjmp	.-50     	; 0x4a9a <vfprintf+0x30>
    4acc:	98 2f       	mov	r25, r24
    4ace:	ff 24       	eor	r15, r15
    4ad0:	ee 24       	eor	r14, r14
    4ad2:	99 24       	eor	r9, r9
    4ad4:	ff e1       	ldi	r31, 0x1F	; 31
    4ad6:	ff 15       	cp	r31, r15
    4ad8:	d0 f0       	brcs	.+52     	; 0x4b0e <vfprintf+0xa4>
    4ada:	9b 32       	cpi	r25, 0x2B	; 43
    4adc:	69 f0       	breq	.+26     	; 0x4af8 <vfprintf+0x8e>
    4ade:	9c 32       	cpi	r25, 0x2C	; 44
    4ae0:	28 f4       	brcc	.+10     	; 0x4aec <vfprintf+0x82>
    4ae2:	90 32       	cpi	r25, 0x20	; 32
    4ae4:	59 f0       	breq	.+22     	; 0x4afc <vfprintf+0x92>
    4ae6:	93 32       	cpi	r25, 0x23	; 35
    4ae8:	91 f4       	brne	.+36     	; 0x4b0e <vfprintf+0xa4>
    4aea:	0e c0       	rjmp	.+28     	; 0x4b08 <vfprintf+0x9e>
    4aec:	9d 32       	cpi	r25, 0x2D	; 45
    4aee:	49 f0       	breq	.+18     	; 0x4b02 <vfprintf+0x98>
    4af0:	90 33       	cpi	r25, 0x30	; 48
    4af2:	69 f4       	brne	.+26     	; 0x4b0e <vfprintf+0xa4>
    4af4:	41 e0       	ldi	r20, 0x01	; 1
    4af6:	24 c0       	rjmp	.+72     	; 0x4b40 <vfprintf+0xd6>
    4af8:	52 e0       	ldi	r21, 0x02	; 2
    4afa:	f5 2a       	or	r15, r21
    4afc:	84 e0       	ldi	r24, 0x04	; 4
    4afe:	f8 2a       	or	r15, r24
    4b00:	28 c0       	rjmp	.+80     	; 0x4b52 <vfprintf+0xe8>
    4b02:	98 e0       	ldi	r25, 0x08	; 8
    4b04:	f9 2a       	or	r15, r25
    4b06:	25 c0       	rjmp	.+74     	; 0x4b52 <vfprintf+0xe8>
    4b08:	e0 e1       	ldi	r30, 0x10	; 16
    4b0a:	fe 2a       	or	r15, r30
    4b0c:	22 c0       	rjmp	.+68     	; 0x4b52 <vfprintf+0xe8>
    4b0e:	f7 fc       	sbrc	r15, 7
    4b10:	29 c0       	rjmp	.+82     	; 0x4b64 <vfprintf+0xfa>
    4b12:	89 2f       	mov	r24, r25
    4b14:	80 53       	subi	r24, 0x30	; 48
    4b16:	8a 30       	cpi	r24, 0x0A	; 10
    4b18:	70 f4       	brcc	.+28     	; 0x4b36 <vfprintf+0xcc>
    4b1a:	f6 fe       	sbrs	r15, 6
    4b1c:	05 c0       	rjmp	.+10     	; 0x4b28 <vfprintf+0xbe>
    4b1e:	98 9c       	mul	r9, r8
    4b20:	90 2c       	mov	r9, r0
    4b22:	11 24       	eor	r1, r1
    4b24:	98 0e       	add	r9, r24
    4b26:	15 c0       	rjmp	.+42     	; 0x4b52 <vfprintf+0xe8>
    4b28:	e8 9c       	mul	r14, r8
    4b2a:	e0 2c       	mov	r14, r0
    4b2c:	11 24       	eor	r1, r1
    4b2e:	e8 0e       	add	r14, r24
    4b30:	f0 e2       	ldi	r31, 0x20	; 32
    4b32:	ff 2a       	or	r15, r31
    4b34:	0e c0       	rjmp	.+28     	; 0x4b52 <vfprintf+0xe8>
    4b36:	9e 32       	cpi	r25, 0x2E	; 46
    4b38:	29 f4       	brne	.+10     	; 0x4b44 <vfprintf+0xda>
    4b3a:	f6 fc       	sbrc	r15, 6
    4b3c:	6b c1       	rjmp	.+726    	; 0x4e14 <vfprintf+0x3aa>
    4b3e:	40 e4       	ldi	r20, 0x40	; 64
    4b40:	f4 2a       	or	r15, r20
    4b42:	07 c0       	rjmp	.+14     	; 0x4b52 <vfprintf+0xe8>
    4b44:	9c 36       	cpi	r25, 0x6C	; 108
    4b46:	19 f4       	brne	.+6      	; 0x4b4e <vfprintf+0xe4>
    4b48:	50 e8       	ldi	r21, 0x80	; 128
    4b4a:	f5 2a       	or	r15, r21
    4b4c:	02 c0       	rjmp	.+4      	; 0x4b52 <vfprintf+0xe8>
    4b4e:	98 36       	cpi	r25, 0x68	; 104
    4b50:	49 f4       	brne	.+18     	; 0x4b64 <vfprintf+0xfa>
    4b52:	f2 01       	movw	r30, r4
    4b54:	23 fd       	sbrc	r18, 3
    4b56:	95 91       	lpm	r25, Z+
    4b58:	23 ff       	sbrs	r18, 3
    4b5a:	91 91       	ld	r25, Z+
    4b5c:	2f 01       	movw	r4, r30
    4b5e:	99 23       	and	r25, r25
    4b60:	09 f0       	breq	.+2      	; 0x4b64 <vfprintf+0xfa>
    4b62:	b8 cf       	rjmp	.-144    	; 0x4ad4 <vfprintf+0x6a>
    4b64:	89 2f       	mov	r24, r25
    4b66:	85 54       	subi	r24, 0x45	; 69
    4b68:	83 30       	cpi	r24, 0x03	; 3
    4b6a:	18 f0       	brcs	.+6      	; 0x4b72 <vfprintf+0x108>
    4b6c:	80 52       	subi	r24, 0x20	; 32
    4b6e:	83 30       	cpi	r24, 0x03	; 3
    4b70:	38 f4       	brcc	.+14     	; 0x4b80 <vfprintf+0x116>
    4b72:	44 e0       	ldi	r20, 0x04	; 4
    4b74:	50 e0       	ldi	r21, 0x00	; 0
    4b76:	a4 0e       	add	r10, r20
    4b78:	b5 1e       	adc	r11, r21
    4b7a:	5f e3       	ldi	r21, 0x3F	; 63
    4b7c:	59 83       	std	Y+1, r21	; 0x01
    4b7e:	0f c0       	rjmp	.+30     	; 0x4b9e <vfprintf+0x134>
    4b80:	93 36       	cpi	r25, 0x63	; 99
    4b82:	31 f0       	breq	.+12     	; 0x4b90 <vfprintf+0x126>
    4b84:	93 37       	cpi	r25, 0x73	; 115
    4b86:	79 f0       	breq	.+30     	; 0x4ba6 <vfprintf+0x13c>
    4b88:	93 35       	cpi	r25, 0x53	; 83
    4b8a:	09 f0       	breq	.+2      	; 0x4b8e <vfprintf+0x124>
    4b8c:	56 c0       	rjmp	.+172    	; 0x4c3a <vfprintf+0x1d0>
    4b8e:	20 c0       	rjmp	.+64     	; 0x4bd0 <vfprintf+0x166>
    4b90:	f5 01       	movw	r30, r10
    4b92:	80 81       	ld	r24, Z
    4b94:	89 83       	std	Y+1, r24	; 0x01
    4b96:	42 e0       	ldi	r20, 0x02	; 2
    4b98:	50 e0       	ldi	r21, 0x00	; 0
    4b9a:	a4 0e       	add	r10, r20
    4b9c:	b5 1e       	adc	r11, r21
    4b9e:	61 01       	movw	r12, r2
    4ba0:	01 e0       	ldi	r16, 0x01	; 1
    4ba2:	10 e0       	ldi	r17, 0x00	; 0
    4ba4:	12 c0       	rjmp	.+36     	; 0x4bca <vfprintf+0x160>
    4ba6:	f5 01       	movw	r30, r10
    4ba8:	c0 80       	ld	r12, Z
    4baa:	d1 80       	ldd	r13, Z+1	; 0x01
    4bac:	f6 fc       	sbrc	r15, 6
    4bae:	03 c0       	rjmp	.+6      	; 0x4bb6 <vfprintf+0x14c>
    4bb0:	6f ef       	ldi	r22, 0xFF	; 255
    4bb2:	7f ef       	ldi	r23, 0xFF	; 255
    4bb4:	02 c0       	rjmp	.+4      	; 0x4bba <vfprintf+0x150>
    4bb6:	69 2d       	mov	r22, r9
    4bb8:	70 e0       	ldi	r23, 0x00	; 0
    4bba:	42 e0       	ldi	r20, 0x02	; 2
    4bbc:	50 e0       	ldi	r21, 0x00	; 0
    4bbe:	a4 0e       	add	r10, r20
    4bc0:	b5 1e       	adc	r11, r21
    4bc2:	c6 01       	movw	r24, r12
    4bc4:	0e 94 1d 27 	call	0x4e3a	; 0x4e3a <strnlen>
    4bc8:	8c 01       	movw	r16, r24
    4bca:	5f e7       	ldi	r21, 0x7F	; 127
    4bcc:	f5 22       	and	r15, r21
    4bce:	14 c0       	rjmp	.+40     	; 0x4bf8 <vfprintf+0x18e>
    4bd0:	f5 01       	movw	r30, r10
    4bd2:	c0 80       	ld	r12, Z
    4bd4:	d1 80       	ldd	r13, Z+1	; 0x01
    4bd6:	f6 fc       	sbrc	r15, 6
    4bd8:	03 c0       	rjmp	.+6      	; 0x4be0 <vfprintf+0x176>
    4bda:	6f ef       	ldi	r22, 0xFF	; 255
    4bdc:	7f ef       	ldi	r23, 0xFF	; 255
    4bde:	02 c0       	rjmp	.+4      	; 0x4be4 <vfprintf+0x17a>
    4be0:	69 2d       	mov	r22, r9
    4be2:	70 e0       	ldi	r23, 0x00	; 0
    4be4:	42 e0       	ldi	r20, 0x02	; 2
    4be6:	50 e0       	ldi	r21, 0x00	; 0
    4be8:	a4 0e       	add	r10, r20
    4bea:	b5 1e       	adc	r11, r21
    4bec:	c6 01       	movw	r24, r12
    4bee:	0e 94 12 27 	call	0x4e24	; 0x4e24 <strnlen_P>
    4bf2:	8c 01       	movw	r16, r24
    4bf4:	50 e8       	ldi	r21, 0x80	; 128
    4bf6:	f5 2a       	or	r15, r21
    4bf8:	f3 fe       	sbrs	r15, 3
    4bfa:	07 c0       	rjmp	.+14     	; 0x4c0a <vfprintf+0x1a0>
    4bfc:	1a c0       	rjmp	.+52     	; 0x4c32 <vfprintf+0x1c8>
    4bfe:	80 e2       	ldi	r24, 0x20	; 32
    4c00:	90 e0       	ldi	r25, 0x00	; 0
    4c02:	b3 01       	movw	r22, r6
    4c04:	0e 94 28 27 	call	0x4e50	; 0x4e50 <fputc>
    4c08:	ea 94       	dec	r14
    4c0a:	8e 2d       	mov	r24, r14
    4c0c:	90 e0       	ldi	r25, 0x00	; 0
    4c0e:	08 17       	cp	r16, r24
    4c10:	19 07       	cpc	r17, r25
    4c12:	a8 f3       	brcs	.-22     	; 0x4bfe <vfprintf+0x194>
    4c14:	0e c0       	rjmp	.+28     	; 0x4c32 <vfprintf+0x1c8>
    4c16:	f6 01       	movw	r30, r12
    4c18:	f7 fc       	sbrc	r15, 7
    4c1a:	85 91       	lpm	r24, Z+
    4c1c:	f7 fe       	sbrs	r15, 7
    4c1e:	81 91       	ld	r24, Z+
    4c20:	6f 01       	movw	r12, r30
    4c22:	90 e0       	ldi	r25, 0x00	; 0
    4c24:	b3 01       	movw	r22, r6
    4c26:	0e 94 28 27 	call	0x4e50	; 0x4e50 <fputc>
    4c2a:	e1 10       	cpse	r14, r1
    4c2c:	ea 94       	dec	r14
    4c2e:	01 50       	subi	r16, 0x01	; 1
    4c30:	10 40       	sbci	r17, 0x00	; 0
    4c32:	01 15       	cp	r16, r1
    4c34:	11 05       	cpc	r17, r1
    4c36:	79 f7       	brne	.-34     	; 0x4c16 <vfprintf+0x1ac>
    4c38:	ea c0       	rjmp	.+468    	; 0x4e0e <vfprintf+0x3a4>
    4c3a:	94 36       	cpi	r25, 0x64	; 100
    4c3c:	11 f0       	breq	.+4      	; 0x4c42 <vfprintf+0x1d8>
    4c3e:	99 36       	cpi	r25, 0x69	; 105
    4c40:	69 f5       	brne	.+90     	; 0x4c9c <vfprintf+0x232>
    4c42:	f7 fe       	sbrs	r15, 7
    4c44:	08 c0       	rjmp	.+16     	; 0x4c56 <vfprintf+0x1ec>
    4c46:	f5 01       	movw	r30, r10
    4c48:	20 81       	ld	r18, Z
    4c4a:	31 81       	ldd	r19, Z+1	; 0x01
    4c4c:	42 81       	ldd	r20, Z+2	; 0x02
    4c4e:	53 81       	ldd	r21, Z+3	; 0x03
    4c50:	84 e0       	ldi	r24, 0x04	; 4
    4c52:	90 e0       	ldi	r25, 0x00	; 0
    4c54:	0a c0       	rjmp	.+20     	; 0x4c6a <vfprintf+0x200>
    4c56:	f5 01       	movw	r30, r10
    4c58:	80 81       	ld	r24, Z
    4c5a:	91 81       	ldd	r25, Z+1	; 0x01
    4c5c:	9c 01       	movw	r18, r24
    4c5e:	44 27       	eor	r20, r20
    4c60:	37 fd       	sbrc	r19, 7
    4c62:	40 95       	com	r20
    4c64:	54 2f       	mov	r21, r20
    4c66:	82 e0       	ldi	r24, 0x02	; 2
    4c68:	90 e0       	ldi	r25, 0x00	; 0
    4c6a:	a8 0e       	add	r10, r24
    4c6c:	b9 1e       	adc	r11, r25
    4c6e:	9f e6       	ldi	r25, 0x6F	; 111
    4c70:	f9 22       	and	r15, r25
    4c72:	57 ff       	sbrs	r21, 7
    4c74:	09 c0       	rjmp	.+18     	; 0x4c88 <vfprintf+0x21e>
    4c76:	50 95       	com	r21
    4c78:	40 95       	com	r20
    4c7a:	30 95       	com	r19
    4c7c:	21 95       	neg	r18
    4c7e:	3f 4f       	sbci	r19, 0xFF	; 255
    4c80:	4f 4f       	sbci	r20, 0xFF	; 255
    4c82:	5f 4f       	sbci	r21, 0xFF	; 255
    4c84:	e0 e8       	ldi	r30, 0x80	; 128
    4c86:	fe 2a       	or	r15, r30
    4c88:	ca 01       	movw	r24, r20
    4c8a:	b9 01       	movw	r22, r18
    4c8c:	a1 01       	movw	r20, r2
    4c8e:	2a e0       	ldi	r18, 0x0A	; 10
    4c90:	30 e0       	ldi	r19, 0x00	; 0
    4c92:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <__ultoa_invert>
    4c96:	d8 2e       	mov	r13, r24
    4c98:	d2 18       	sub	r13, r2
    4c9a:	40 c0       	rjmp	.+128    	; 0x4d1c <vfprintf+0x2b2>
    4c9c:	95 37       	cpi	r25, 0x75	; 117
    4c9e:	29 f4       	brne	.+10     	; 0x4caa <vfprintf+0x240>
    4ca0:	1f 2d       	mov	r17, r15
    4ca2:	1f 7e       	andi	r17, 0xEF	; 239
    4ca4:	2a e0       	ldi	r18, 0x0A	; 10
    4ca6:	30 e0       	ldi	r19, 0x00	; 0
    4ca8:	1d c0       	rjmp	.+58     	; 0x4ce4 <vfprintf+0x27a>
    4caa:	1f 2d       	mov	r17, r15
    4cac:	19 7f       	andi	r17, 0xF9	; 249
    4cae:	9f 36       	cpi	r25, 0x6F	; 111
    4cb0:	61 f0       	breq	.+24     	; 0x4cca <vfprintf+0x260>
    4cb2:	90 37       	cpi	r25, 0x70	; 112
    4cb4:	20 f4       	brcc	.+8      	; 0x4cbe <vfprintf+0x254>
    4cb6:	98 35       	cpi	r25, 0x58	; 88
    4cb8:	09 f0       	breq	.+2      	; 0x4cbc <vfprintf+0x252>
    4cba:	ac c0       	rjmp	.+344    	; 0x4e14 <vfprintf+0x3aa>
    4cbc:	0f c0       	rjmp	.+30     	; 0x4cdc <vfprintf+0x272>
    4cbe:	90 37       	cpi	r25, 0x70	; 112
    4cc0:	39 f0       	breq	.+14     	; 0x4cd0 <vfprintf+0x266>
    4cc2:	98 37       	cpi	r25, 0x78	; 120
    4cc4:	09 f0       	breq	.+2      	; 0x4cc8 <vfprintf+0x25e>
    4cc6:	a6 c0       	rjmp	.+332    	; 0x4e14 <vfprintf+0x3aa>
    4cc8:	04 c0       	rjmp	.+8      	; 0x4cd2 <vfprintf+0x268>
    4cca:	28 e0       	ldi	r18, 0x08	; 8
    4ccc:	30 e0       	ldi	r19, 0x00	; 0
    4cce:	0a c0       	rjmp	.+20     	; 0x4ce4 <vfprintf+0x27a>
    4cd0:	10 61       	ori	r17, 0x10	; 16
    4cd2:	14 fd       	sbrc	r17, 4
    4cd4:	14 60       	ori	r17, 0x04	; 4
    4cd6:	20 e1       	ldi	r18, 0x10	; 16
    4cd8:	30 e0       	ldi	r19, 0x00	; 0
    4cda:	04 c0       	rjmp	.+8      	; 0x4ce4 <vfprintf+0x27a>
    4cdc:	14 fd       	sbrc	r17, 4
    4cde:	16 60       	ori	r17, 0x06	; 6
    4ce0:	20 e1       	ldi	r18, 0x10	; 16
    4ce2:	32 e0       	ldi	r19, 0x02	; 2
    4ce4:	17 ff       	sbrs	r17, 7
    4ce6:	08 c0       	rjmp	.+16     	; 0x4cf8 <vfprintf+0x28e>
    4ce8:	f5 01       	movw	r30, r10
    4cea:	60 81       	ld	r22, Z
    4cec:	71 81       	ldd	r23, Z+1	; 0x01
    4cee:	82 81       	ldd	r24, Z+2	; 0x02
    4cf0:	93 81       	ldd	r25, Z+3	; 0x03
    4cf2:	44 e0       	ldi	r20, 0x04	; 4
    4cf4:	50 e0       	ldi	r21, 0x00	; 0
    4cf6:	08 c0       	rjmp	.+16     	; 0x4d08 <vfprintf+0x29e>
    4cf8:	f5 01       	movw	r30, r10
    4cfa:	80 81       	ld	r24, Z
    4cfc:	91 81       	ldd	r25, Z+1	; 0x01
    4cfe:	bc 01       	movw	r22, r24
    4d00:	80 e0       	ldi	r24, 0x00	; 0
    4d02:	90 e0       	ldi	r25, 0x00	; 0
    4d04:	42 e0       	ldi	r20, 0x02	; 2
    4d06:	50 e0       	ldi	r21, 0x00	; 0
    4d08:	a4 0e       	add	r10, r20
    4d0a:	b5 1e       	adc	r11, r21
    4d0c:	a1 01       	movw	r20, r2
    4d0e:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <__ultoa_invert>
    4d12:	d8 2e       	mov	r13, r24
    4d14:	d2 18       	sub	r13, r2
    4d16:	8f e7       	ldi	r24, 0x7F	; 127
    4d18:	f8 2e       	mov	r15, r24
    4d1a:	f1 22       	and	r15, r17
    4d1c:	f6 fe       	sbrs	r15, 6
    4d1e:	0b c0       	rjmp	.+22     	; 0x4d36 <vfprintf+0x2cc>
    4d20:	5e ef       	ldi	r21, 0xFE	; 254
    4d22:	f5 22       	and	r15, r21
    4d24:	d9 14       	cp	r13, r9
    4d26:	38 f4       	brcc	.+14     	; 0x4d36 <vfprintf+0x2cc>
    4d28:	f4 fe       	sbrs	r15, 4
    4d2a:	07 c0       	rjmp	.+14     	; 0x4d3a <vfprintf+0x2d0>
    4d2c:	f2 fc       	sbrc	r15, 2
    4d2e:	05 c0       	rjmp	.+10     	; 0x4d3a <vfprintf+0x2d0>
    4d30:	8f ee       	ldi	r24, 0xEF	; 239
    4d32:	f8 22       	and	r15, r24
    4d34:	02 c0       	rjmp	.+4      	; 0x4d3a <vfprintf+0x2d0>
    4d36:	1d 2d       	mov	r17, r13
    4d38:	01 c0       	rjmp	.+2      	; 0x4d3c <vfprintf+0x2d2>
    4d3a:	19 2d       	mov	r17, r9
    4d3c:	f4 fe       	sbrs	r15, 4
    4d3e:	0d c0       	rjmp	.+26     	; 0x4d5a <vfprintf+0x2f0>
    4d40:	fe 01       	movw	r30, r28
    4d42:	ed 0d       	add	r30, r13
    4d44:	f1 1d       	adc	r31, r1
    4d46:	80 81       	ld	r24, Z
    4d48:	80 33       	cpi	r24, 0x30	; 48
    4d4a:	19 f4       	brne	.+6      	; 0x4d52 <vfprintf+0x2e8>
    4d4c:	99 ee       	ldi	r25, 0xE9	; 233
    4d4e:	f9 22       	and	r15, r25
    4d50:	08 c0       	rjmp	.+16     	; 0x4d62 <vfprintf+0x2f8>
    4d52:	1f 5f       	subi	r17, 0xFF	; 255
    4d54:	f2 fe       	sbrs	r15, 2
    4d56:	05 c0       	rjmp	.+10     	; 0x4d62 <vfprintf+0x2f8>
    4d58:	03 c0       	rjmp	.+6      	; 0x4d60 <vfprintf+0x2f6>
    4d5a:	8f 2d       	mov	r24, r15
    4d5c:	86 78       	andi	r24, 0x86	; 134
    4d5e:	09 f0       	breq	.+2      	; 0x4d62 <vfprintf+0x2f8>
    4d60:	1f 5f       	subi	r17, 0xFF	; 255
    4d62:	0f 2d       	mov	r16, r15
    4d64:	f3 fc       	sbrc	r15, 3
    4d66:	14 c0       	rjmp	.+40     	; 0x4d90 <vfprintf+0x326>
    4d68:	f0 fe       	sbrs	r15, 0
    4d6a:	0f c0       	rjmp	.+30     	; 0x4d8a <vfprintf+0x320>
    4d6c:	1e 15       	cp	r17, r14
    4d6e:	10 f0       	brcs	.+4      	; 0x4d74 <vfprintf+0x30a>
    4d70:	9d 2c       	mov	r9, r13
    4d72:	0b c0       	rjmp	.+22     	; 0x4d8a <vfprintf+0x320>
    4d74:	9d 2c       	mov	r9, r13
    4d76:	9e 0c       	add	r9, r14
    4d78:	91 1a       	sub	r9, r17
    4d7a:	1e 2d       	mov	r17, r14
    4d7c:	06 c0       	rjmp	.+12     	; 0x4d8a <vfprintf+0x320>
    4d7e:	80 e2       	ldi	r24, 0x20	; 32
    4d80:	90 e0       	ldi	r25, 0x00	; 0
    4d82:	b3 01       	movw	r22, r6
    4d84:	0e 94 28 27 	call	0x4e50	; 0x4e50 <fputc>
    4d88:	1f 5f       	subi	r17, 0xFF	; 255
    4d8a:	1e 15       	cp	r17, r14
    4d8c:	c0 f3       	brcs	.-16     	; 0x4d7e <vfprintf+0x314>
    4d8e:	04 c0       	rjmp	.+8      	; 0x4d98 <vfprintf+0x32e>
    4d90:	1e 15       	cp	r17, r14
    4d92:	10 f4       	brcc	.+4      	; 0x4d98 <vfprintf+0x32e>
    4d94:	e1 1a       	sub	r14, r17
    4d96:	01 c0       	rjmp	.+2      	; 0x4d9a <vfprintf+0x330>
    4d98:	ee 24       	eor	r14, r14
    4d9a:	04 ff       	sbrs	r16, 4
    4d9c:	0f c0       	rjmp	.+30     	; 0x4dbc <vfprintf+0x352>
    4d9e:	80 e3       	ldi	r24, 0x30	; 48
    4da0:	90 e0       	ldi	r25, 0x00	; 0
    4da2:	b3 01       	movw	r22, r6
    4da4:	0e 94 28 27 	call	0x4e50	; 0x4e50 <fputc>
    4da8:	02 ff       	sbrs	r16, 2
    4daa:	1d c0       	rjmp	.+58     	; 0x4de6 <vfprintf+0x37c>
    4dac:	01 fd       	sbrc	r16, 1
    4dae:	03 c0       	rjmp	.+6      	; 0x4db6 <vfprintf+0x34c>
    4db0:	88 e7       	ldi	r24, 0x78	; 120
    4db2:	90 e0       	ldi	r25, 0x00	; 0
    4db4:	0e c0       	rjmp	.+28     	; 0x4dd2 <vfprintf+0x368>
    4db6:	88 e5       	ldi	r24, 0x58	; 88
    4db8:	90 e0       	ldi	r25, 0x00	; 0
    4dba:	0b c0       	rjmp	.+22     	; 0x4dd2 <vfprintf+0x368>
    4dbc:	80 2f       	mov	r24, r16
    4dbe:	86 78       	andi	r24, 0x86	; 134
    4dc0:	91 f0       	breq	.+36     	; 0x4de6 <vfprintf+0x37c>
    4dc2:	01 ff       	sbrs	r16, 1
    4dc4:	02 c0       	rjmp	.+4      	; 0x4dca <vfprintf+0x360>
    4dc6:	8b e2       	ldi	r24, 0x2B	; 43
    4dc8:	01 c0       	rjmp	.+2      	; 0x4dcc <vfprintf+0x362>
    4dca:	80 e2       	ldi	r24, 0x20	; 32
    4dcc:	f7 fc       	sbrc	r15, 7
    4dce:	8d e2       	ldi	r24, 0x2D	; 45
    4dd0:	90 e0       	ldi	r25, 0x00	; 0
    4dd2:	b3 01       	movw	r22, r6
    4dd4:	0e 94 28 27 	call	0x4e50	; 0x4e50 <fputc>
    4dd8:	06 c0       	rjmp	.+12     	; 0x4de6 <vfprintf+0x37c>
    4dda:	80 e3       	ldi	r24, 0x30	; 48
    4ddc:	90 e0       	ldi	r25, 0x00	; 0
    4dde:	b3 01       	movw	r22, r6
    4de0:	0e 94 28 27 	call	0x4e50	; 0x4e50 <fputc>
    4de4:	9a 94       	dec	r9
    4de6:	d9 14       	cp	r13, r9
    4de8:	c0 f3       	brcs	.-16     	; 0x4dda <vfprintf+0x370>
    4dea:	da 94       	dec	r13
    4dec:	f1 01       	movw	r30, r2
    4dee:	ed 0d       	add	r30, r13
    4df0:	f1 1d       	adc	r31, r1
    4df2:	80 81       	ld	r24, Z
    4df4:	90 e0       	ldi	r25, 0x00	; 0
    4df6:	b3 01       	movw	r22, r6
    4df8:	0e 94 28 27 	call	0x4e50	; 0x4e50 <fputc>
    4dfc:	dd 20       	and	r13, r13
    4dfe:	a9 f7       	brne	.-22     	; 0x4dea <vfprintf+0x380>
    4e00:	06 c0       	rjmp	.+12     	; 0x4e0e <vfprintf+0x3a4>
    4e02:	80 e2       	ldi	r24, 0x20	; 32
    4e04:	90 e0       	ldi	r25, 0x00	; 0
    4e06:	b3 01       	movw	r22, r6
    4e08:	0e 94 28 27 	call	0x4e50	; 0x4e50 <fputc>
    4e0c:	ea 94       	dec	r14
    4e0e:	ee 20       	and	r14, r14
    4e10:	c1 f7       	brne	.-16     	; 0x4e02 <vfprintf+0x398>
    4e12:	43 ce       	rjmp	.-890    	; 0x4a9a <vfprintf+0x30>
    4e14:	f3 01       	movw	r30, r6
    4e16:	66 81       	ldd	r22, Z+6	; 0x06
    4e18:	77 81       	ldd	r23, Z+7	; 0x07
    4e1a:	cb 01       	movw	r24, r22
    4e1c:	2b 96       	adiw	r28, 0x0b	; 11
    4e1e:	e2 e1       	ldi	r30, 0x12	; 18
    4e20:	0c 94 c9 24 	jmp	0x4992	; 0x4992 <__epilogue_restores__>

00004e24 <strnlen_P>:
    4e24:	fc 01       	movw	r30, r24
    4e26:	05 90       	lpm	r0, Z+
    4e28:	61 50       	subi	r22, 0x01	; 1
    4e2a:	70 40       	sbci	r23, 0x00	; 0
    4e2c:	01 10       	cpse	r0, r1
    4e2e:	d8 f7       	brcc	.-10     	; 0x4e26 <strnlen_P+0x2>
    4e30:	80 95       	com	r24
    4e32:	90 95       	com	r25
    4e34:	8e 0f       	add	r24, r30
    4e36:	9f 1f       	adc	r25, r31
    4e38:	08 95       	ret

00004e3a <strnlen>:
    4e3a:	fc 01       	movw	r30, r24
    4e3c:	61 50       	subi	r22, 0x01	; 1
    4e3e:	70 40       	sbci	r23, 0x00	; 0
    4e40:	01 90       	ld	r0, Z+
    4e42:	01 10       	cpse	r0, r1
    4e44:	d8 f7       	brcc	.-10     	; 0x4e3c <strnlen+0x2>
    4e46:	80 95       	com	r24
    4e48:	90 95       	com	r25
    4e4a:	8e 0f       	add	r24, r30
    4e4c:	9f 1f       	adc	r25, r31
    4e4e:	08 95       	ret

00004e50 <fputc>:
    4e50:	0f 93       	push	r16
    4e52:	1f 93       	push	r17
    4e54:	cf 93       	push	r28
    4e56:	df 93       	push	r29
    4e58:	8c 01       	movw	r16, r24
    4e5a:	eb 01       	movw	r28, r22
    4e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    4e5e:	81 ff       	sbrs	r24, 1
    4e60:	1b c0       	rjmp	.+54     	; 0x4e98 <fputc+0x48>
    4e62:	82 ff       	sbrs	r24, 2
    4e64:	0d c0       	rjmp	.+26     	; 0x4e80 <fputc+0x30>
    4e66:	2e 81       	ldd	r18, Y+6	; 0x06
    4e68:	3f 81       	ldd	r19, Y+7	; 0x07
    4e6a:	8c 81       	ldd	r24, Y+4	; 0x04
    4e6c:	9d 81       	ldd	r25, Y+5	; 0x05
    4e6e:	28 17       	cp	r18, r24
    4e70:	39 07       	cpc	r19, r25
    4e72:	64 f4       	brge	.+24     	; 0x4e8c <fputc+0x3c>
    4e74:	e8 81       	ld	r30, Y
    4e76:	f9 81       	ldd	r31, Y+1	; 0x01
    4e78:	01 93       	st	Z+, r16
    4e7a:	f9 83       	std	Y+1, r31	; 0x01
    4e7c:	e8 83       	st	Y, r30
    4e7e:	06 c0       	rjmp	.+12     	; 0x4e8c <fputc+0x3c>
    4e80:	e8 85       	ldd	r30, Y+8	; 0x08
    4e82:	f9 85       	ldd	r31, Y+9	; 0x09
    4e84:	80 2f       	mov	r24, r16
    4e86:	09 95       	icall
    4e88:	89 2b       	or	r24, r25
    4e8a:	31 f4       	brne	.+12     	; 0x4e98 <fputc+0x48>
    4e8c:	8e 81       	ldd	r24, Y+6	; 0x06
    4e8e:	9f 81       	ldd	r25, Y+7	; 0x07
    4e90:	01 96       	adiw	r24, 0x01	; 1
    4e92:	9f 83       	std	Y+7, r25	; 0x07
    4e94:	8e 83       	std	Y+6, r24	; 0x06
    4e96:	02 c0       	rjmp	.+4      	; 0x4e9c <fputc+0x4c>
    4e98:	0f ef       	ldi	r16, 0xFF	; 255
    4e9a:	1f ef       	ldi	r17, 0xFF	; 255
    4e9c:	c8 01       	movw	r24, r16
    4e9e:	df 91       	pop	r29
    4ea0:	cf 91       	pop	r28
    4ea2:	1f 91       	pop	r17
    4ea4:	0f 91       	pop	r16
    4ea6:	08 95       	ret

00004ea8 <__ultoa_invert>:
    4ea8:	fa 01       	movw	r30, r20
    4eaa:	aa 27       	eor	r26, r26
    4eac:	28 30       	cpi	r18, 0x08	; 8
    4eae:	51 f1       	breq	.+84     	; 0x4f04 <__ultoa_invert+0x5c>
    4eb0:	20 31       	cpi	r18, 0x10	; 16
    4eb2:	81 f1       	breq	.+96     	; 0x4f14 <__ultoa_invert+0x6c>
    4eb4:	e8 94       	clt
    4eb6:	6f 93       	push	r22
    4eb8:	6e 7f       	andi	r22, 0xFE	; 254
    4eba:	6e 5f       	subi	r22, 0xFE	; 254
    4ebc:	7f 4f       	sbci	r23, 0xFF	; 255
    4ebe:	8f 4f       	sbci	r24, 0xFF	; 255
    4ec0:	9f 4f       	sbci	r25, 0xFF	; 255
    4ec2:	af 4f       	sbci	r26, 0xFF	; 255
    4ec4:	b1 e0       	ldi	r27, 0x01	; 1
    4ec6:	3e d0       	rcall	.+124    	; 0x4f44 <__ultoa_invert+0x9c>
    4ec8:	b4 e0       	ldi	r27, 0x04	; 4
    4eca:	3c d0       	rcall	.+120    	; 0x4f44 <__ultoa_invert+0x9c>
    4ecc:	67 0f       	add	r22, r23
    4ece:	78 1f       	adc	r23, r24
    4ed0:	89 1f       	adc	r24, r25
    4ed2:	9a 1f       	adc	r25, r26
    4ed4:	a1 1d       	adc	r26, r1
    4ed6:	68 0f       	add	r22, r24
    4ed8:	79 1f       	adc	r23, r25
    4eda:	8a 1f       	adc	r24, r26
    4edc:	91 1d       	adc	r25, r1
    4ede:	a1 1d       	adc	r26, r1
    4ee0:	6a 0f       	add	r22, r26
    4ee2:	71 1d       	adc	r23, r1
    4ee4:	81 1d       	adc	r24, r1
    4ee6:	91 1d       	adc	r25, r1
    4ee8:	a1 1d       	adc	r26, r1
    4eea:	20 d0       	rcall	.+64     	; 0x4f2c <__ultoa_invert+0x84>
    4eec:	09 f4       	brne	.+2      	; 0x4ef0 <__ultoa_invert+0x48>
    4eee:	68 94       	set
    4ef0:	3f 91       	pop	r19
    4ef2:	2a e0       	ldi	r18, 0x0A	; 10
    4ef4:	26 9f       	mul	r18, r22
    4ef6:	11 24       	eor	r1, r1
    4ef8:	30 19       	sub	r19, r0
    4efa:	30 5d       	subi	r19, 0xD0	; 208
    4efc:	31 93       	st	Z+, r19
    4efe:	de f6       	brtc	.-74     	; 0x4eb6 <__ultoa_invert+0xe>
    4f00:	cf 01       	movw	r24, r30
    4f02:	08 95       	ret
    4f04:	46 2f       	mov	r20, r22
    4f06:	47 70       	andi	r20, 0x07	; 7
    4f08:	40 5d       	subi	r20, 0xD0	; 208
    4f0a:	41 93       	st	Z+, r20
    4f0c:	b3 e0       	ldi	r27, 0x03	; 3
    4f0e:	0f d0       	rcall	.+30     	; 0x4f2e <__ultoa_invert+0x86>
    4f10:	c9 f7       	brne	.-14     	; 0x4f04 <__ultoa_invert+0x5c>
    4f12:	f6 cf       	rjmp	.-20     	; 0x4f00 <__ultoa_invert+0x58>
    4f14:	46 2f       	mov	r20, r22
    4f16:	4f 70       	andi	r20, 0x0F	; 15
    4f18:	40 5d       	subi	r20, 0xD0	; 208
    4f1a:	4a 33       	cpi	r20, 0x3A	; 58
    4f1c:	18 f0       	brcs	.+6      	; 0x4f24 <__ultoa_invert+0x7c>
    4f1e:	49 5d       	subi	r20, 0xD9	; 217
    4f20:	31 fd       	sbrc	r19, 1
    4f22:	40 52       	subi	r20, 0x20	; 32
    4f24:	41 93       	st	Z+, r20
    4f26:	02 d0       	rcall	.+4      	; 0x4f2c <__ultoa_invert+0x84>
    4f28:	a9 f7       	brne	.-22     	; 0x4f14 <__ultoa_invert+0x6c>
    4f2a:	ea cf       	rjmp	.-44     	; 0x4f00 <__ultoa_invert+0x58>
    4f2c:	b4 e0       	ldi	r27, 0x04	; 4
    4f2e:	a6 95       	lsr	r26
    4f30:	97 95       	ror	r25
    4f32:	87 95       	ror	r24
    4f34:	77 95       	ror	r23
    4f36:	67 95       	ror	r22
    4f38:	ba 95       	dec	r27
    4f3a:	c9 f7       	brne	.-14     	; 0x4f2e <__ultoa_invert+0x86>
    4f3c:	00 97       	sbiw	r24, 0x00	; 0
    4f3e:	61 05       	cpc	r22, r1
    4f40:	71 05       	cpc	r23, r1
    4f42:	08 95       	ret
    4f44:	9b 01       	movw	r18, r22
    4f46:	ac 01       	movw	r20, r24
    4f48:	0a 2e       	mov	r0, r26
    4f4a:	06 94       	lsr	r0
    4f4c:	57 95       	ror	r21
    4f4e:	47 95       	ror	r20
    4f50:	37 95       	ror	r19
    4f52:	27 95       	ror	r18
    4f54:	ba 95       	dec	r27
    4f56:	c9 f7       	brne	.-14     	; 0x4f4a <__ultoa_invert+0xa2>
    4f58:	62 0f       	add	r22, r18
    4f5a:	73 1f       	adc	r23, r19
    4f5c:	84 1f       	adc	r24, r20
    4f5e:	95 1f       	adc	r25, r21
    4f60:	a0 1d       	adc	r26, r0
    4f62:	08 95       	ret

00004f64 <_exit>:
    4f64:	f8 94       	cli

00004f66 <__stop_program>:
    4f66:	ff cf       	rjmp	.-2      	; 0x4f66 <__stop_program>
